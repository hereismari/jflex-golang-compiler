/* The following code was generated by JFlex 1.6.1 */

package lexical;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import syntax.Sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/carolws/eclipse-workspace/GoCompiler/core/src/lexical/language.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, Sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\2\1\0\1\41\1\1\22\0\1\41\1\65\1\4"+
    "\2\0\1\64\1\57\1\40\1\67\1\70\1\43\1\22\1\75\1\23"+
    "\1\24\1\42\1\12\7\15\2\11\1\66\1\76\1\60\1\61\1\63"+
    "\2\0\4\13\1\21\1\13\16\6\1\30\2\6\1\17\2\6\1\71"+
    "\1\26\1\72\1\62\1\10\1\5\1\31\1\32\1\14\1\45\1\20"+
    "\1\33\1\50\1\54\1\25\1\6\1\44\1\46\1\52\1\34\1\51"+
    "\1\53\1\6\1\35\1\47\1\36\1\27\1\37\1\55\1\16\1\56"+
    "\1\6\1\73\1\3\1\74\54\0\1\6\12\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\201\0\5\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\10\0\246\6\1\0\46\6\2\0\1\6"+
    "\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6\25\0\12\7"+
    "\4\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0\2\6"+
    "\12\7\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0\131\6"+
    "\13\0\1\6\16\0\12\7\41\6\11\0\2\6\4\0\1\6\5\0"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\27\0\31\6\107\0"+
    "\23\6\121\0\66\6\3\0\1\6\22\0\1\6\7\0\12\6\4\0"+
    "\12\7\1\0\20\6\4\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0"+
    "\2\6\1\0\3\6\4\0\12\7\2\6\23\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\37\0\4\6\1\0\1\6\7\0\12\7\2\0\3\6\20\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\3\0\1\6\22\0\1\6\17\0\2\6\4\0\12\7\25\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\3\0\1\6\36\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6"+
    "\21\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\26\0\1\6\25\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\20\6\3\0\1\6\32\0\2\6\6\0\2\6\4\0\12\7"+
    "\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\40\0\1\6\1\0\2\6\4\0\12\7\1\0\2\6"+
    "\22\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\20\0\1\6"+
    "\21\0\2\6\4\0\12\7\12\0\6\6\5\0\22\6\3\0\30\6"+
    "\1\0\11\6\1\0\1\6\2\0\7\6\37\0\12\7\21\0\60\6"+
    "\1\0\2\6\14\0\7\6\11\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6"+
    "\1\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\7"+
    "\2\0\4\6\40\0\1\6\37\0\12\7\26\0\10\6\1\0\44\6"+
    "\33\0\5\6\163\0\53\6\24\0\1\6\12\7\6\0\6\6\4\0"+
    "\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0"+
    "\1\6\1\0\12\7\6\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0"+
    "\4\6\2\0\103\6\45\0\20\6\20\0\125\6\14\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\6\0\10\6\7\0\15\6\1\0"+
    "\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0\3\6\17\0"+
    "\64\6\43\0\1\6\4\0\1\6\3\0\12\7\46\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\0\1\6\5\0\106\6\12\0\37\6\47\0"+
    "\12\7\36\6\2\0\5\6\13\0\54\6\25\0\7\6\10\0\12\7"+
    "\46\0\27\6\11\0\65\6\53\0\12\7\6\0\12\7\15\0\1\6"+
    "\135\0\57\6\21\0\7\6\4\0\12\7\51\0\36\6\15\0\2\6"+
    "\12\7\54\6\32\0\44\6\34\0\12\7\3\0\3\6\12\7\44\6"+
    "\153\0\4\6\1\0\4\6\3\0\2\6\11\0\300\6\100\0\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\164\0\1\6\15\0\1\6"+
    "\20\0\15\6\145\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\64\0\2\6"+
    "\u0a7b\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\0\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\20\0\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\120\0\1\6"+
    "\u01d5\0\2\6\52\0\5\6\5\0\2\6\4\0\126\6\6\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\20\0\37\6"+
    "\2\0\106\6\61\0\11\6\2\0\147\6\2\0\4\6\1\0\36\6"+
    "\2\0\2\6\105\0\13\6\1\0\3\6\1\0\4\6\1\0\27\6"+
    "\35\0\64\6\16\0\62\6\34\0\12\7\30\0\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\12\0\27\6\31\0\35\6\7\0\57\6\34\0"+
    "\1\6\12\7\6\0\5\6\1\0\12\6\12\7\5\6\1\0\51\6"+
    "\27\0\3\6\1\0\10\6\4\0\12\7\6\0\27\6\3\0\1\6"+
    "\3\0\62\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6"+
    "\1\0\1\6\30\0\3\6\2\0\13\6\7\0\3\6\14\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6"+
    "\1\0\4\6\4\0\2\6\132\0\43\6\15\0\12\7\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6\1\0\207\6"+
    "\23\0\12\7\7\0\32\6\6\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\43\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6"+
    "\u0185\0\35\6\3\0\61\6\57\0\40\6\20\0\21\6\1\0\10\6"+
    "\6\0\46\6\12\0\36\6\2\0\44\6\4\0\10\6\60\0\236\6"+
    "\2\0\12\7\126\0\50\6\10\0\64\6\234\0\u0137\6\11\0\26\6"+
    "\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6"+
    "\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6\141\0\26\6"+
    "\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\17\0\4\6"+
    "\1\0\3\6\1\0\33\6\54\0\35\6\3\0\35\6\43\0\10\6"+
    "\1\0\34\6\33\0\66\6\12\0\26\6\12\0\23\6\15\0\22\6"+
    "\156\0\111\6\u03ba\0\65\6\56\0\12\7\23\0\55\6\40\0\31\6"+
    "\7\0\12\7\11\0\44\6\17\0\12\7\20\0\43\6\3\0\1\6"+
    "\14\0\60\6\16\0\4\6\13\0\12\7\1\6\45\0\22\6\1\0"+
    "\31\6\204\0\57\6\21\0\12\7\13\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6\37\0"+
    "\5\6\u011e\0\60\6\24\0\2\6\1\0\1\6\10\0\12\7\246\0"+
    "\57\6\121\0\60\6\24\0\1\6\13\0\12\7\46\0\53\6\25\0"+
    "\12\7\u01d6\0\100\6\12\7\25\0\1\6\u01c0\0\71\6\u0507\0\u0399\6"+
    "\u0c67\0\u042f\6\u33d1\0\u0239\6\7\0\37\6\1\0\12\7\146\0\36\6"+
    "\22\0\60\6\20\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6"+
    "\u0370\0\105\6\13\0\1\6\102\0\15\6\u4060\0\2\6\u0bfe\0\153\6"+
    "\5\0\15\6\3\0\11\6\7\0\12\6\u1766\0\125\6\1\0\107\6"+
    "\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6"+
    "\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6"+
    "\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6"+
    "\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1000\0\305\6"+
    "\u053b\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6"+
    "\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"+
    "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6"+
    "\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6"+
    "\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\2\6"+
    "\2\4\1\7\1\10\1\11\6\4\1\1\1\12\1\13"+
    "\5\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\3\0\1\37\1\40"+
    "\1\0\1\6\1\0\4\4\1\41\1\42\1\43\1\44"+
    "\1\0\1\45\12\4\2\0\1\2\1\0\1\46\1\47"+
    "\4\4\1\50\2\4\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\36"+
    "\1\37\1\0\1\6\4\4\1\65\5\4\1\66\3\4"+
    "\1\67\1\70\4\0\1\70\1\0\5\4\1\71\1\4"+
    "\1\72\1\73\1\74\1\75\2\4\1\76\1\77\3\4"+
    "\1\100\3\4\1\101\4\0\5\4\1\102\2\4\1\103"+
    "\2\4\1\104\2\4\1\105\1\0\1\106\7\4\1\107"+
    "\1\4\1\110\1\0\1\4\1\111\1\112\1\113\4\4"+
    "\1\114\1\115\1\116\2\4\1\117\2\4\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\77\0\275\0\374\0\u013b\0\u017a"+
    "\0\u017a\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\77\0\u081f\0\u085e\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\374\0\77\0\u089d\0\u013b\0\u08dc\0\u091b\0\77\0\u095a"+
    "\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\77\0\77"+
    "\0\77\0\77\0\u0b13\0\u017a\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\77\0\77\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\77\0\77\0\u107d\0\77\0\u10bc"+
    "\0\77\0\77\0\77\0\77\0\u10fb\0\77\0\77\0\374"+
    "\0\u113a\0\u1179\0\u09d8\0\u11b8\0\u11f7\0\u1236\0\u1275\0\77"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u017a\0\u13ef\0\u142e"+
    "\0\u146d\0\u017a\0\77\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u0dc8"+
    "\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u017a\0\u1722"+
    "\0\77\0\77\0\77\0\u017a\0\u1761\0\u17a0\0\u017a\0\u017a"+
    "\0\u17df\0\u181e\0\u185d\0\u017a\0\u189c\0\u18db\0\u191a\0\u017a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u017a\0\u1b90\0\u1bcf\0\u017a\0\u1c0e\0\u1c4d\0\u017a"+
    "\0\u1c8c\0\u1ccb\0\u017a\0\u1d0a\0\u017a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u017a\0\u1f02\0\u017a\0\u1f41"+
    "\0\u1f80\0\u017a\0\u017a\0\u017a\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u017a\0\u017a\0\u017a\0\u20bb\0\u20fa\0\u017a\0\u2139\0\u2178"+
    "\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\10\1\14\1\12\2\10\1\15"+
    "\1\10\1\16\1\17\1\20\1\21\1\2\3\10\1\22"+
    "\1\23\1\10\1\24\1\25\1\26\1\27\1\4\1\30"+
    "\1\31\1\10\1\32\1\10\1\33\1\34\1\10\1\35"+
    "\1\36\3\10\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\101\0\1\4\77\0\1\57\55\0\1\60"+
    "\15\0\1\61\3\0\1\62\21\61\1\63\50\61\3\64"+
    "\1\0\1\64\1\62\71\64\6\0\14\10\3\0\1\10"+
    "\1\0\11\10\4\0\13\10\31\0\2\12\2\0\1\12"+
    "\2\0\2\65\2\0\1\66\1\67\62\0\1\70\1\71"+
    "\2\0\1\71\2\72\2\65\2\0\1\66\1\67\57\0"+
    "\14\10\3\0\1\10\1\0\2\10\1\73\6\10\4\0"+
    "\5\10\1\74\2\10\1\75\2\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\76\10\10\42\0"+
    "\1\77\36\0\1\100\40\0\1\101\35\0\1\102\26\0"+
    "\2\66\2\0\1\66\6\0\1\103\60\0\14\10\3\0"+
    "\1\10\1\0\4\10\1\104\1\105\3\10\4\0\6\10"+
    "\1\106\4\10\26\0\14\10\3\0\1\10\1\0\6\10"+
    "\1\107\2\10\4\0\13\10\26\0\14\10\3\0\1\10"+
    "\1\0\1\110\1\10\1\111\6\10\4\0\5\10\1\112"+
    "\5\10\26\0\12\10\1\113\1\10\3\0\1\10\1\0"+
    "\2\10\1\114\6\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\12\10\1\115\26\0\14\10"+
    "\3\0\1\10\1\0\2\10\1\116\6\10\4\0\13\10"+
    "\20\0\1\117\3\0\22\117\1\120\50\117\42\0\1\121"+
    "\1\122\15\0\1\123\76\0\1\124\23\0\12\10\1\125"+
    "\1\10\3\0\1\10\1\0\11\10\4\0\13\10\26\0"+
    "\12\10\1\126\1\10\3\0\1\10\1\0\7\10\1\127"+
    "\1\10\4\0\11\10\1\130\1\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\5\10\1\131\5\10\26\0"+
    "\14\10\3\0\1\10\1\0\2\10\1\132\6\10\4\0"+
    "\13\10\26\0\14\10\3\0\1\10\1\0\2\10\1\133"+
    "\6\10\4\0\13\10\77\0\1\134\1\0\1\135\1\136"+
    "\37\0\1\137\34\0\1\140\1\141\76\0\1\142\76\0"+
    "\1\143\76\0\1\144\1\0\1\145\74\0\1\146\76\0"+
    "\1\147\15\0\1\61\3\0\1\150\21\61\1\63\50\61"+
    "\11\0\2\151\2\0\1\151\4\0\2\152\64\0\2\66"+
    "\2\0\1\66\2\0\2\65\3\0\1\67\62\0\2\70"+
    "\2\0\1\70\2\0\2\65\2\0\1\66\1\67\62\0"+
    "\1\70\1\71\2\0\1\71\2\0\2\65\2\0\1\66"+
    "\1\67\62\0\5\153\2\0\2\153\7\0\3\153\11\0"+
    "\1\153\37\0\14\10\3\0\1\10\1\0\11\10\4\0"+
    "\3\10\1\154\7\10\26\0\14\10\3\0\1\10\1\0"+
    "\5\10\1\155\3\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\2\10\1\156\6\10\4\0\13\10\26\0"+
    "\14\10\3\0\1\10\1\0\11\10\4\0\3\10\1\157"+
    "\7\10\44\0\1\160\60\0\14\10\3\0\1\10\1\0"+
    "\7\10\1\161\1\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\7\10\1\162\3\10\26\0"+
    "\12\10\1\163\1\10\3\0\1\10\1\0\11\10\4\0"+
    "\13\10\26\0\14\10\3\0\1\10\1\0\5\10\1\164"+
    "\3\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\165\10\10\26\0\14\10\3\0"+
    "\1\10\1\0\6\10\1\166\2\10\4\0\13\10\26\0"+
    "\14\10\3\0\1\10\1\0\7\10\1\167\1\10\4\0"+
    "\13\10\26\0\14\10\3\0\1\10\1\0\5\10\1\170"+
    "\3\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\11\10\4\0\7\10\1\171\3\10\26\0\14\10\3\0"+
    "\1\10\1\0\6\10\1\172\2\10\4\0\13\10\60\0"+
    "\1\173\42\0\1\117\5\0\1\174\2\0\1\174\1\175"+
    "\7\0\1\117\1\176\1\177\7\117\1\200\36\0\1\121"+
    "\1\3\1\4\1\0\73\121\43\122\1\201\33\122\6\0"+
    "\14\10\3\0\1\10\1\0\4\10\1\202\4\10\4\0"+
    "\13\10\26\0\14\10\3\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\203\10\10\26\0\14\10\3\0\1\10\1\0"+
    "\6\10\1\204\2\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\205\1\0\11\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\7\10\1\206\1\10\4\0\13\10\26\0"+
    "\14\10\3\0\1\10\1\0\11\10\4\0\7\10\1\207"+
    "\3\10\26\0\6\10\1\210\5\10\3\0\1\10\1\0"+
    "\11\10\4\0\13\10\101\0\1\211\76\0\1\212\76\0"+
    "\1\213\26\0\2\151\2\0\1\151\7\0\1\67\62\0"+
    "\2\151\2\0\1\151\67\0\12\10\1\214\1\10\3\0"+
    "\1\10\1\0\11\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\7\10\1\215\1\10\4\0\3\10\1\216"+
    "\7\10\26\0\14\10\3\0\1\10\1\0\5\10\1\217"+
    "\3\10\4\0\13\10\26\0\12\10\1\220\1\10\3\0"+
    "\1\10\1\0\11\10\4\0\13\10\26\0\12\10\1\221"+
    "\1\10\3\0\1\10\1\0\11\10\4\0\13\10\26\0"+
    "\14\10\3\0\1\10\1\0\11\10\4\0\5\10\1\222"+
    "\5\10\26\0\14\10\3\0\1\10\1\0\2\10\1\223"+
    "\6\10\4\0\13\10\26\0\6\10\1\224\5\10\3\0"+
    "\1\10\1\0\11\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\225\10\10\26\0"+
    "\14\10\3\0\1\10\1\0\1\226\10\10\4\0\13\10"+
    "\26\0\14\10\3\0\1\10\1\0\11\10\4\0\4\10"+
    "\1\227\6\10\26\0\12\10\1\230\1\10\3\0\1\10"+
    "\1\0\11\10\4\0\13\10\32\0\1\231\2\0\1\231"+
    "\72\0\5\232\2\0\2\232\7\0\3\232\11\0\1\232"+
    "\42\0\5\233\2\0\2\233\7\0\3\233\11\0\1\233"+
    "\42\0\5\234\2\0\2\234\7\0\3\234\11\0\1\234"+
    "\31\0\42\122\1\4\1\201\33\122\6\0\12\10\1\235"+
    "\1\10\3\0\1\10\1\0\2\10\1\236\6\10\4\0"+
    "\13\10\26\0\12\10\1\237\1\10\3\0\1\10\1\0"+
    "\11\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\1\240\10\10\4\0\13\10\26\0\14\10\3\0\1\10"+
    "\1\0\7\10\1\241\1\10\4\0\13\10\26\0\14\10"+
    "\3\0\1\10\1\0\11\10\4\0\5\10\1\242\5\10"+
    "\26\0\14\10\3\0\1\10\1\0\11\10\4\0\1\243"+
    "\12\10\26\0\14\10\3\0\1\244\1\0\11\10\4\0"+
    "\13\10\26\0\14\10\3\0\1\10\1\0\7\10\1\245"+
    "\1\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\6\10\1\246\2\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\6\10\1\247\2\10\4\0\13\10\26\0"+
    "\14\10\3\0\1\10\1\0\11\10\4\0\1\250\12\10"+
    "\26\0\14\10\3\0\1\10\1\0\7\10\1\251\1\10"+
    "\4\0\13\10\26\0\14\10\3\0\1\10\1\0\6\10"+
    "\1\252\2\10\4\0\13\10\26\0\12\10\1\253\1\10"+
    "\3\0\1\10\1\0\11\10\4\0\13\10\32\0\1\117"+
    "\2\0\1\117\72\0\5\117\2\0\2\117\7\0\3\117"+
    "\11\0\1\117\42\0\5\175\2\0\2\175\7\0\3\175"+
    "\11\0\1\175\42\0\5\254\2\0\2\254\7\0\3\254"+
    "\11\0\1\254\37\0\14\10\3\0\1\10\1\0\6\10"+
    "\1\255\2\10\4\0\13\10\26\0\14\10\3\0\1\10"+
    "\1\0\1\256\10\10\4\0\13\10\26\0\6\10\1\257"+
    "\5\10\3\0\1\10\1\0\11\10\4\0\13\10\26\0"+
    "\6\10\1\260\5\10\3\0\1\10\1\0\11\10\4\0"+
    "\13\10\26\0\6\10\1\261\5\10\3\0\1\10\1\0"+
    "\11\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\2\10\1\262\6\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\5\10\1\263\3\10\4\0\13\10\26\0"+
    "\14\10\3\0\1\10\1\0\4\10\1\264\4\10\4\0"+
    "\13\10\26\0\14\10\3\0\1\10\1\0\7\10\1\265"+
    "\1\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\11\10\4\0\10\10\1\266\2\10\26\0\14\10\3\0"+
    "\1\10\1\0\5\10\1\267\3\10\4\0\13\10\31\0"+
    "\5\270\2\0\2\270\7\0\3\270\11\0\1\270\37\0"+
    "\14\10\3\0\1\10\1\0\11\10\4\0\2\10\1\271"+
    "\10\10\26\0\14\10\3\0\1\10\1\0\7\10\1\272"+
    "\1\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\7\10\1\273\1\10\4\0\13\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\10\10\1\274\2\10\26\0"+
    "\14\10\3\0\1\10\1\0\11\10\4\0\4\10\1\275"+
    "\6\10\26\0\14\10\3\0\1\10\1\0\1\276\10\10"+
    "\4\0\13\10\26\0\14\10\3\0\1\10\1\0\2\10"+
    "\1\277\6\10\4\0\13\10\26\0\14\10\3\0\1\10"+
    "\1\0\6\10\1\300\2\10\4\0\13\10\31\0\5\176"+
    "\2\0\2\176\7\0\3\176\11\0\1\176\37\0\14\10"+
    "\3\0\1\10\1\0\7\10\1\301\1\10\4\0\13\10"+
    "\26\0\12\10\1\302\1\10\3\0\1\10\1\0\11\10"+
    "\4\0\13\10\26\0\12\10\1\303\1\10\3\0\1\10"+
    "\1\0\11\10\4\0\13\10\26\0\6\10\1\304\5\10"+
    "\3\0\1\10\1\0\11\10\4\0\13\10\26\0\14\10"+
    "\3\0\1\10\1\0\11\10\4\0\5\10\1\305\5\10"+
    "\26\0\12\10\1\306\1\10\3\0\1\10\1\0\11\10"+
    "\4\0\13\10\26\0\14\10\3\0\1\10\1\0\1\307"+
    "\10\10\4\0\13\10\26\0\14\10\3\0\1\10\1\0"+
    "\11\10\4\0\4\10\1\310\6\10\26\0\14\10\3\0"+
    "\1\10\1\0\11\10\4\0\10\10\1\311\2\10\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8631];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\37\1\1\11\2\1\12\11"+
    "\1\0\1\11\3\0\1\1\1\11\1\0\1\1\1\0"+
    "\4\1\4\11\1\0\13\1\2\0\1\1\1\0\2\11"+
    "\7\1\2\11\1\1\1\11\1\1\4\11\1\1\2\11"+
    "\2\1\1\0\5\1\1\11\12\1\1\11\4\0\1\1"+
    "\1\0\7\1\3\11\15\1\4\0\17\1\1\0\13\1"+
    "\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private ComplexSymbolFactory symbolFactory;
	
	public Lexer(java.io.Reader in, ComplexSymbolFactory sf) {
		this(in);
		symbolFactory = sf;
    }
    
    private Symbol symbol(int sym) {
    	System.out.println("Token " + sym + ", Line: " + yyline + ", size:" + yylength());
    
    	Location left = new Location(yyline+1, yycolumn+1);
    	Location right = new Location(yyline+1, yycolumn+yylength());
    	return symbolFactory.newSymbol("sym", sym, left, right);
	}
	
	private Symbol symbol(int sym, Object val) {
		System.out.println("Token (" + sym + ", " + val +  ") , Line: " + yyline + ", size:" + yylength());
	
    	Location left = new Location(yyline+1, yycolumn+1);
    	Location right = new Location(yyline+1, yycolumn+yylength());
    	return symbolFactory.newSymbol("sym", sym, left, right, val);
	}
	
	private void ignore(String pattern, String content) {
		System.out.println("Ignoring " + pattern + ", content: " + content);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2478) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", EOF, new Location(yyline+1, yycolumn+1), new Location(yyline+1, yycolumn+1));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error: Illegal character: " + yytext() + " Line: " + (yyline+1) + ", Column:" + (yycolumn+1));
            }
          case 81: break;
          case 2: 
            { 
            }
          case 82: break;
          case 3: 
            { return symbol(OR, "|");
            }
          case 83: break;
          case 4: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 84: break;
          case 5: 
            { return symbol(BLANK_IDENTIFIER, "_");
            }
          case 85: break;
          case 6: 
            { return symbol(INT_LITERAL, yytext());
            }
          case 86: break;
          case 7: 
            { return symbol(PLUS, "+");
            }
          case 87: break;
          case 8: 
            { return symbol(MINUS, "-");
            }
          case 88: break;
          case 9: 
            { return symbol(DOT, ".");
            }
          case 89: break;
          case 10: 
            { return symbol(DIV, "/");
            }
          case 90: break;
          case 11: 
            { return symbol(MUL, "*");
            }
          case 91: break;
          case 12: 
            { return symbol(ADDRESS, "&");
            }
          case 92: break;
          case 13: 
            { return symbol(LT, "<");
            }
          case 93: break;
          case 14: 
            { return symbol(ASSIGN, "=");
            }
          case 94: break;
          case 15: 
            { return symbol(XOR, "^");
            }
          case 95: break;
          case 16: 
            { return symbol(GT, ">");
            }
          case 96: break;
          case 17: 
            { return symbol(MOD, "%");
            }
          case 97: break;
          case 18: 
            { return symbol(NOT, "!");
            }
          case 98: break;
          case 19: 
            { return symbol(COLON, ":");
            }
          case 99: break;
          case 20: 
            { return symbol(PAR_L, "(");
            }
          case 100: break;
          case 21: 
            { return symbol(PAR_R, ")");
            }
          case 101: break;
          case 22: 
            { return symbol(SQRD_L, "[");
            }
          case 102: break;
          case 23: 
            { return symbol(SQRD_R, "]");
            }
          case 103: break;
          case 24: 
            { return symbol(CURLY_L, "{");
            }
          case 104: break;
          case 25: 
            { return symbol(CURLY_R, "}");
            }
          case 105: break;
          case 26: 
            { return symbol(COMMA, ",");
            }
          case 106: break;
          case 27: 
            { return symbol(SEMICOLON, ";");
            }
          case 107: break;
          case 28: 
            { return symbol(OR_OP, "||");
            }
          case 108: break;
          case 29: 
            { return symbol(OR_ASSIGN, "|=");
            }
          case 109: break;
          case 30: 
            { return symbol(STRING_LITERAL, yytext());
            }
          case 110: break;
          case 31: 
            { return symbol(FLOAT_LITERAL, yytext());
            }
          case 111: break;
          case 32: 
            { return symbol(IMG_LITERAL, yytext());
            }
          case 112: break;
          case 33: 
            { return symbol(INC_OP, "++");
            }
          case 113: break;
          case 34: 
            { return symbol(ADD_ASSIGN, "+=");
            }
          case 114: break;
          case 35: 
            { return symbol(SUB_OP, "--");
            }
          case 115: break;
          case 36: 
            { return symbol(MINUS_ASSIGN, "-=");
            }
          case 116: break;
          case 37: 
            { return symbol(IF, "if");
            }
          case 117: break;
          case 38: 
            { return symbol(DIV_ASSIGN, "/=");
            }
          case 118: break;
          case 39: 
            { return symbol(MUL_ASSIGN, "*=");
            }
          case 119: break;
          case 40: 
            { return symbol(GO, "go");
            }
          case 120: break;
          case 41: 
            { return symbol(AND, "&&");
            }
          case 121: break;
          case 42: 
            { return symbol(ADDRESS_ASSIGN, "&=");
            }
          case 122: break;
          case 43: 
            { return symbol(AND_NOT_OP, "&^");
            }
          case 123: break;
          case 44: 
            { return symbol(CHANNEL_OP, "<-");
            }
          case 124: break;
          case 45: 
            { return symbol(LEFT_OP, "<<");
            }
          case 125: break;
          case 46: 
            { return symbol(LTE, "<=");
            }
          case 126: break;
          case 47: 
            { return symbol(EQ_OP, "==");
            }
          case 127: break;
          case 48: 
            { return symbol(XOR_ASSIGN, "^=");
            }
          case 128: break;
          case 49: 
            { return symbol(GTE, ">=");
            }
          case 129: break;
          case 50: 
            { return symbol(RIGHT_OP, ">>");
            }
          case 130: break;
          case 51: 
            { return symbol(NE_OP, "!=");
            }
          case 131: break;
          case 52: 
            { return symbol(CHANNEL_ASSIGN, ":=");
            }
          case 132: break;
          case 53: 
            { return symbol(ELLIPSIS,"...");
            }
          case 133: break;
          case 54: 
            { return symbol(FOR, "for");
            }
          case 134: break;
          case 55: 
            { return symbol(VAR, "var");
            }
          case 135: break;
          case 56: 
            { return symbol(RUNE_LITERAL, yytext());
            }
          case 136: break;
          case 57: 
            { return symbol(MAP, "map");
            }
          case 137: break;
          case 58: 
            { return symbol(AND_NOT_ASSIGN, "&^=");
            }
          case 138: break;
          case 59: 
            { return symbol(LEFT_ASSIGN, "<<=");
            }
          case 139: break;
          case 60: 
            { return symbol(RIGHT_ASSIGN, ">>=");
            }
          case 140: break;
          case 61: 
            { return symbol(CASE, "case");
            }
          case 141: break;
          case 62: 
            { return symbol(CHAN, "chan");
            }
          case 142: break;
          case 63: 
            { return symbol(ELSE, "else");
            }
          case 143: break;
          case 64: 
            { return symbol(FUNC, "func");
            }
          case 144: break;
          case 65: 
            { return symbol(TYPE, "type");
            }
          case 145: break;
          case 66: 
            { return symbol(GOTO, "goto");
            }
          case 146: break;
          case 67: 
            { return symbol(CONST, "const");
            }
          case 147: break;
          case 68: 
            { return symbol(BREAK, "break");
            }
          case 148: break;
          case 69: 
            { return symbol(RANGE, "range");
            }
          case 149: break;
          case 70: 
            { return symbol(DEFER, "defer");
            }
          case 150: break;
          case 71: 
            { return symbol(IMPORT, "import");
            }
          case 151: break;
          case 72: 
            { return symbol(RETURN, "return");
            }
          case 152: break;
          case 73: 
            { return symbol(SELECT, "select");
            }
          case 153: break;
          case 74: 
            { return symbol(STRUCT, "struct");
            }
          case 154: break;
          case 75: 
            { return symbol(SWITCH, "switch");
            }
          case 155: break;
          case 76: 
            { return symbol(DEFAULT, "default");
            }
          case 156: break;
          case 77: 
            { return symbol(PACKAGE, "package");
            }
          case 157: break;
          case 78: 
            { return symbol(CONTINUE, "continue");
            }
          case 158: break;
          case 79: 
            { return symbol(INTERFACE, "interface");
            }
          case 159: break;
          case 80: 
            { return symbol(FALLTHROUGH, "fallthrough");
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
