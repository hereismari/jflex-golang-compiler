import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

import java.util.*;
import java.io.*;

parser code {:
    public void report_error(String message, Object info){
       StringBuffer m = new StringBuffer("Sintax error: ");

       if (info instanceof ComplexSymbol){
         ComplexSymbol s = (ComplexSymbol) info;
         if(s.value != null) m.append( s.value.toString() );
         m.append( " - Line: " + s.getLeft().getLine() + " - Column: "+s.getLeft().getColumn() );
         }

       m.append(" : " + message);

       System.err.println(m);
     }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
:};

// keywords
terminal BREAK, DEFAULT, FUNC, INTERFACE, SELECT, CASE, DEFER, GO;
terminal MAP, STRUCT, CHAN, ELSE, GOTO, PACKAGE, SWITCH, CONST;
terminal FALLTHROUGH, IF, RANGE, TYPE, CONTINUE, FOR, IMPORT, RETURN, VAR;

// operation
terminal PLUS, ADDRESS, AND, MINUS, OR, LT, LTE, MUL, XOR;
terminal GT, GTE, DIV, MOD, NOT;

terminal ADD_ASSIGN, ADDRESS_ASSIGN, MINUS_ASSIGN;
terminal OR_ASSIGN, MUL_ASSIGN, XOR_ASSIGN, DIV_ASSIGN;
terminal LEFT_ASSIGN, ASSIGN, CHANNEL_ASSIGN;
terminal RIGHT_ASSIGN, AND_NOT_ASSIGN;

terminal EQ_OP, NE_OP, OR_OP, LEFT_OP, RIGHT_OP, INC_OP, SUB_OP;
terminal AND_NOT_OP, CHANNEL_OP;

// punctuation
terminal COMMA, SEMICOLON, ELLIPSIS, COLON, DOT;
terminal PAR_L, PAR_R, SQRD_L, SQRD_R, CURLY_L, CURLY_R;

// others
terminal STRING_LITERAL, IMG_LITERAL, INT_LITERAL, RUNE_LITERAL;
terminal FLOAT_LITERAL, IDENTIFIER, BLANK_IDENTIFIER;

// hot fixes
terminal INTERROGATION;
terminal HASH;
terminal DOUBLE_INTERROGATION;

/* --------------- Non terminals --------------- */

/* --------------- Struct ---------------------- */
non terminal StructType;
non terminal FieldDecl, FieldDeclStar1;
non terminal IdentifierList, Tag;
non terminal EmbeddedField, EmbeddedField1, EmbeddedField2;

/* --------------- Type helpers ---------------- */
non terminal Type, TypeLit;
non terminal TypeNoIdentifier;
non terminal TypeName, AuxTypeName1, TypeNameNoPar;

/* --------------- All types ------------------- */
non terminal ElementType, PointerType, BaseType, FunctionType, InterfaceType;
non terminal MapType, SliceType, KeyType, ChannelType;

/* --------------- Array ----------------------- */
non terminal ArrayLength, ArrayType;

/* --------------- Function -------------------- */
non terminal Signature, Result;
non terminal Parameters, ParameterList;
non terminal ParameterDecl, ParameterDeclStar;
non terminal FuncIdentifierList, FuncIdentifierListAux1;

non terminal IdentifierListParam;
non terminal IdentifierStar2, IdentifierStar3, IdentifierStar4;

/* --------------- Interface ------------------- */
non terminal MethodSpec, MethodSpecAux1, MethodSpecAux2;

/* --------------- Optional -------------------- */
non terminal OptMul;
non terminal OptComma;
non terminal OptIdentifierList, OptIdentifier;
non terminal OptEllipsisComma;

/* --------------- Auxiliary ------------------- */
non terminal AuxFieldDecl1, AuxFieldDecl2, AuxFieldDecl3, AuxFieldDecl4;
non terminal IdentifierStar1;
non terminal AuxParameters1, AuxParameters2, AuxParameterList3;
non terminal AuxParameterList1, AuxParameterList2;
non terminal AuxIntefaceType1;
non terminal AuxChannelType1;

non terminal AuxResult, AuxResult2, AuxResult3;

/* --------------- Basics ---------------------- */
non terminal BasicLit, CompositeLit, FunctionLit;
non terminal CompositeLitIncomplete, LiteralTypeIncomplete;

non terminal UnaryOp, MulOp, AddOp, RelOp, BinOp;
non terminal Expression, ExpressionList, UnaryExpr, PrimaryExpr;
non terminal X, Y;

non terminal Conversion, NextConversion;
non terminal TypeConv;

non terminal OptDotIDENTIFIER;
non terminal DotIdentifier, TypeNameDotIdentifier;
non terminal AuxTypeNameDotIdentifier;

non terminal AuxTypeDotIdentifier;

non terminal Index, PrimaryExprOtherOptions;

non terminal IndexAndSlice, OptExpression, OptExpression2;

non terminal PossibleClose, PossibleClose2, PossibleClose3;

non terminal Arguments, ExpTypeEtc, OptExpType, OptCommaExp;

/* --------------- Source and Import ----------- */
non terminal SourceFile;
non terminal PackageClause;
non terminal ImportDecl, ImportDeclStar, ImportDeclAux1, ImportSpec, ImportSpecStar, ImportSpecAux1;

/* --------------- Declarations ---------------- */
non terminal Declaration, TopLevelDecl, TopLevelDeclStar;
non terminal FunctionDecl, FunctionBodyOpt;
non terminal MethodDecl;

/* --------------- Operands -------------------- */
non terminal Operand, OperandIncomplete;
non terminal Literal, LiteralType, LiteralValue, LiteralValueAux1;
non terminal Element, ElementList, ElementListAux1;
non terminal KeyedElement, KeyedElementAux1, KeyedElementAux2, KeyedElementAux3;

/* --------------- IDENTIFIER + BLANK ---------- */
non terminal Identifier;


/* --------------- Statements ------------------ */
non terminal ConstDecl, ConstSpec, AuxConstSpec, AuxConstSpec2, AuxConstDecl1;
non terminal AuxCommaExp, IdentifierListStarAux, IdentifierListStar2, ExpressionListStar;

non terminal OptType;
non terminal Statement, StatementList, StatementListAux;
non terminal SimpleStmt, ShortVarDecl, AuxExpression, Assignment, AssignOp, AuxOp;
non terminal OptSimpleStmt;

non terminal TypeDecl, TypeDeclAux, TypeSpecAux, TypeSpec;
non terminal OptAssign, OptAssignExpList;

non terminal VarDecl, VarDeclAux, VarSpecAux, VarSpecAux2, VarSpec;

non terminal LabeledStmt, GoStmt, ReturnStmt, BreakStmt, ContinueStmt, GotoStmt;
non terminal FallthroughStmt, Block, DeferStmt, SelectStmt;
non terminal CommClause, CommCase, StmtOpt, RecvStmt, RecvStmtAux, RecvStmtAux2;

non terminal IfStmt, SimpleStmt2, SimpleStmtAux, IfStmtAux, IfStmtAux2;
non terminal SimpleStmtSc;

non terminal ForStmt, ForStmtAux, ForClause, RangeClause, SimplesStmtStarAux;
non terminal RangeClauseAux, RangeClauseAux2;
non terminal SwitchStmt, SwitchStmtAux, SwitchStmtAux2, SwitchStmtSc;
non terminal ExprCaseClause, ExprSwitchCase, TypeSwitchGuard, TypeCaseClause;
non terminal OptTypeSwitchGuard;

non terminal TypeSwitchCase, AuxTypeList, TypeList;

/* --------------- Tests ----------------------- */
non terminal TypeStar;
non terminal BasicLitStar;
non terminal ExpressionStar;
non terminal OperandStar;
non terminal FunctionTypeStar;

/*
Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||
*/

precedence left OR_OP;
precedence left AND;
precedence left EQ_OP, NE_OP, LT, LTE, GT, GTE;
precedence left PLUS, MINUS, OR, XOR;
precedence left MUL, DIV, MOD, LEFT_OP, RIGHT_OP, ADDRESS, AND_NOT_OP;

precedence left CHANNEL_OP;  // HOTFIX: Franklin has given permition.

start with SourceFile;

Identifier ::= IDENTIFIER | BLANK_IDENTIFIER;

/* --------------- Grammar --------------------- */

/* --------------- Operation ------------------- */
BasicLitStar ::= BasicLit BasicLitStar |;
BasicLit     ::= INT_LITERAL | FLOAT_LITERAL | IMG_LITERAL | RUNE_LITERAL | STRING_LITERAL;

UnaryOp  ::= PLUS | MINUS |  NOT | XOR | MUL | ADDRESS | CHANNEL_OP;
MulOp    ::= MUL | DIV | MOD | LEFT_OP | RIGHT_OP | ADDRESS | AND_NOT_OP;
AddOp    ::= PLUS | MINUS | OR | XOR;
RelOp    ::= EQ_OP | NE_OP | LT | LTE | GT | GTE;
BinOp    ::= OR_OP | AND | RelOp | AddOp | MulOp;

/* --------------- Composite literal------------ */
CompositeLit     ::= LiteralType LiteralValue;
LiteralType      ::= StructType | ArrayType | SQRD_L ELLIPSIS SQRD_R ElementType | SliceType | MapType | TypeName;
LiteralValue     ::= CURLY_L LiteralValueAux1 CURLY_R;
LiteralValueAux1 ::= ElementList |;

ElementList      ::= KeyedElement ElementListAux1 OptComma;
ElementListAux1  ::= ElementListAux1 COMMA KeyedElement |;

KeyedElement     ::= KeyedElementAux1 KeyedElementAux2;
KeyedElementAux1 ::= Expression | LiteralValue;
KeyedElementAux2 ::= KeyedElementAux3 |;
KeyedElementAux3 ::= COLON Element;

Element          ::= Expression | LiteralValue;


/* ----------------- Function Literal ------------ */
FunctionLit ::= FUNC Signature Block;

/* --------------- Source and Import ---------- */
SourceFile ::= PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar;

ImportDeclStar ::= ImportDecl SEMICOLON ImportDeclStar |;
ImportDecl ::= IMPORT ImportDeclAux1;
ImportDeclAux1 ::= ImportSpec | PAR_L ImportSpecStar PAR_R;
ImportSpecStar ::= ImportSpec SEMICOLON ImportSpecStar |;

ImportSpec ::= ImportSpecAux1 STRING_LITERAL;
ImportSpecAux1 ::= DOT | IDENTIFIER |;

PackageClause ::= PACKAGE IDENTIFIER;

/* --------------- Operand --------------------- */
OperandStar    ::= OperandStar Operand |;
Operand        ::= Literal | TypeName | PAR_L Expression PAR_R;
Literal        ::= BasicLit | CompositeLit | FunctionLit; //FIXME: FunctionLit;

/* --------------- Expression ------------------ */
UnaryExpr      ::= PrimaryExpr | UnaryOp UnaryExpr;
PrimaryExpr    ::= Operand | Conversion | PrimaryExpr PrimaryExprOtherOptions;  // Obs: Missing MethodExpr
Expression     ::= UnaryExpr | Expression BinOp Expression;

// Index, Slice and Arguments, HASH TypeAssertion
PrimaryExprOtherOptions ::= IndexAndSlice | Arguments | HASH DOT PAR_L Type PAR_R;

Arguments      ::= HASH PAR_L ExpTypeEtc PAR_R;  // HOT FIX HASH
ExpTypeEtc     ::= OptExpType OptEllipsisComma |;
OptExpType     ::= ExpressionList | TypeLit OptCommaExp; // Incomplete!
OptCommaExp    ::= COMMA ExpressionList;

IndexAndSlice  ::= SQRD_L Expression PossibleClose | SQRD_L PossibleClose2;
PossibleClose  ::= SQRD_R | COLON OptExpression SQRD_R;
PossibleClose2 ::= COLON SQRD_R | COLON Expression PossibleClose3;
PossibleClose3 ::= COLON Expression SQRD_R;

OptEllipsisComma    ::= ELLIPSIS | ELLIPSIS COMMA | ; // Obs: is possible a COMMA without an ellipsis

OptExpression  ::= Expression |;
OptExpression2 ::= SQRD_R | COLON OptExpression; 
Index ::= SQRD_L Expression SQRD_R;

ExpressionList ::= Expression ExpressionStar;
ExpressionStar ::= COMMA Expression ExpressionStar |;

Conversion     ::= TypeConv NextConversion;
NextConversion ::= PAR_L Expression OptComma PAR_R;

TypeConv ::= TypeName | TypeLit | INTERROGATION TypeConv INTERROGATION; // HOTFIX INTERROGATION

OptDotIDENTIFIER ::= DOT IDENTIFIER | ;

/* --------------- Const  -------------------------- */
ConstDecl     ::= CONST AuxConstDecl1;
AuxConstDecl1 ::= ConstSpec | PAR_L AuxConstSpec PAR_R;

ConstSpec     ::= IdentifierListStar2 AuxConstSpec2;
AuxConstSpec  ::= AuxConstSpec ConstSpec SEMICOLON  | ;

AuxCommaExp   ::= AuxCommaExp COMMA Expression | ;
OptType       ::= Type | ;

AuxConstSpec2       	  ::= OptType ASSIGN ExpressionList | ;
IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER | ;
IdentifierListStar2   ::= IDENTIFIER IdentifierListStarAux;


/* --------------- Statement ----------------------- */
Statement ::= Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | 
              BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt | Block | 
              IfStmt | SelectStmt | SwitchStmt | DeferStmt | ForStmt;

/* --------------- Declaration -------------------- */
TopLevelDeclStar ::= TopLevelDecl SEMICOLON TopLevelDeclStar |;
TopLevelDecl ::= Declaration | FunctionDecl | MethodDecl;

FunctionDecl ::= FUNC IDENTIFIER Signature FunctionBodyOpt;
FunctionBodyOpt ::= Block |;

MethodDecl ::= FUNC Parameters IDENTIFIER Signature FunctionBodyOpt;
Declaration ::= ConstDecl | TypeDecl | VarDecl;

TypeDecl      ::= TYPE TypeDeclAux;
TypeDeclAux   ::= TypeSpec | PAR_L TypeSpecAux PAR_R;
TypeSpecAux   ::= TypeSpecAux TypeSpec SEMICOLON | ;
TypeSpec      ::= IDENTIFIER OptAssign Type;

VarDecl       ::= VAR VarDeclAux;
VarDeclAux    ::= VarSpec | PAR_L VarSpecAux PAR_R;
VarSpecAux    ::= VarSpecAux VarSpec SEMICOLON | ;
VarSpec       ::= IdentifierListStar2 VarSpecAux2;
VarSpecAux2   ::= Type OptAssignExpList | ASSIGN ExpressionList;


/* --------------- LabeledStmt -------------------- */
LabeledStmt ::= IDENTIFIER COLON Statement;

/* --------------- SimpleStmt --------------------- */
SimpleStmt ::= Expression AuxExpression | Assignment | INTERROGATION ShortVarDecl |;  // HOT FIX INTERROGATION
AuxExpression ::= CHANNEL_OP Expression | INC_OP | SUB_OP | PLUS PLUS | MINUS MINUS | ;
Assignment ::= ExpressionList AssignOp ExpressionList;
AssignOp ::= MUL_ASSIGN | ADD_ASSIGN | XOR_ASSIGN | DIV_ASSIGN |
             LEFT_ASSIGN | RIGHT_ASSIGN | AND_NOT_ASSIGN | MINUS_ASSIGN | ADDRESS_ASSIGN |
             ASSIGN; // Missing other types of assignment

ShortVarDecl ::=  IdentifierList CHANNEL_ASSIGN ExpressionList;

StatementList ::= Statement SEMICOLON StatementList | ;
Block ::= CURLY_L StatementList CURLY_R;


/* --------------- ForStmt --------------------- */
ForStmt ::= FOR ForStmtAux DOUBLE_INTERROGATION Block;           // HOT FIX DOUBLE_INTERROGATION
ForStmtAux ::= Expression | ForClause | RangeClause |;
ForClause ::= SimpleStmt SEMICOLON OptExpression SEMICOLON SimpleStmt;

SimplesStmtStarAux  ::= CHANNEL_OP Expression | INC_OP | SUB_OP | AuxCommaExp AssignOp ExpressionList;
RangeClauseAux      ::= ExpressionList RangeClauseAux2 | ;
RangeClauseAux2     ::= ASSIGN | CHANNEL_ASSIGN;
RangeClause         ::= RangeClauseAux RANGE Expression;


/* ------------------ SwitchStmt ------------------- */
SwitchStmt ::= SWITCH SwitchStmtAux;

SwitchStmtAux ::= SimpleStmtSc SwitchStmtAux2;
SimpleStmtSc ::= SimpleStmt SEMICOLON | HASH; // HOT FIX HASH

// HOT FIX BLANK_IDENTIFIER
SwitchStmtAux2 ::= OptExpression DOUBLE_INTERROGATION CURLY_L ExprCaseClause CURLY_R | TypeSwitchGuard CURLY_L TypeCaseClause CURLY_R;
ExprCaseClause ::= ExprSwitchCase COLON StatementList ExprCaseClause |;

// HOT FIX HASH
TypeSwitchGuard    ::= OptTypeSwitchGuard PrimaryExpr HASH DOT PAR_L TYPE PAR_R;
OptTypeSwitchGuard ::= Identifier CHANNEL_ASSIGN | HASH;

TypeCaseClause     ::= TypeSwitchCase COLON StatementList TypeCaseClause | ;
TypeSwitchCase     ::= CASE TypeList | DEFAULT;

ExprSwitchCase ::= CASE ExpressionList | DEFAULT ;

TypeList ::= Type AuxTypeList;
AuxTypeList ::= COMMA Type AuxTypeList | ;

/* ------------------ DeferStmt ------------------- */
DeferStmt ::= DEFER Expression;

/* ------------------ IfStmt ------------------- */
IfStmt         ::= IF SimpleStmtAux Expression DOUBLE_INTERROGATION Block IfStmtAux;  // HOTFIX Interrogation
SimpleStmtAux  ::= HASH SimpleStmt SEMICOLON | ; // HOTFIX HASH
IfStmtAux      ::= ELSE IfStmtAux2 | ;
IfStmtAux2     ::= IfStmt | Block;

/* ------------------ SelectStmt ------------------- */
SelectStmt  ::= SELECT CURLY_L CommClause CURLY_R;
CommClause  ::= CommCase COLON StatementList CommClause | ;
CommCase    ::= CASE StmtOpt | DEFAULT;
StmtOpt     ::= Expression CHANNEL_OP Expression | RecvStmt;
RecvStmt    ::= RecvStmtAux Expression;
RecvStmtAux ::= ExpressionList RecvStmtAux2; //FIXME: could be empty, warning: wont fix
RecvStmtAux2 ::= ASSIGN | CHANNEL_ASSIGN;    // Errors in this

/* ---------------- Other Statements --------------- */
OptIdentifier ::= Identifier |;
FallthroughStmt ::= FALLTHROUGH;
GotoStmt ::= GOTO OptIdentifier;
ContinueStmt ::= CONTINUE OptIdentifier;
BreakStmt ::= BREAK OptIdentifier;

ExpressionListStar ::= ExpressionList | ;
ReturnStmt ::= RETURN ExpressionListStar;

GoStmt ::= GO Expression;


OptAssign ::= ASSIGN | ;
OptAssignExpList ::= ASSIGN ExpressionList | ;

/* --------------- Struct ---------------------- */
StructType     ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R;
FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON |;
FieldDecl      ::= AuxFieldDecl1 AuxFieldDecl2;

AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 | BLANK_IDENTIFIER AuxFieldDecl4 | EmbeddedField1;
AuxFieldDecl3 ::= IdentifierStar1 Type | DOT IDENTIFIER |;
AuxFieldDecl4 ::= IdentifierStar1 Type;
AuxFieldDecl2 ::= | Tag;

Tag ::= STRING_LITERAL;

EmbeddedField1 ::= MUL TypeName;
OptMul ::= MUL |;

IdentifierList ::= Identifier IdentifierStar1;
IdentifierStar1 ::= COMMA Identifier IdentifierStar1 |;

TypeStar ::= Type TypeStar |;
Type ::= TypeName | TypeLit | PAR_L Type PAR_R;

TypeName     ::= IDENTIFIER AuxTypeName1 | BLANK_IDENTIFIER;
AuxTypeName1 ::= DOT IDENTIFIER |;

TypeLit     ::= ArrayType | PointerType | SliceType | MapType | ChannelType | StructType | InterfaceType | FunctionType;

/* --------------- Array ----------------------- */
ArrayLength ::= Expression;
ArrayType   ::= SQRD_L ArrayLength SQRD_R ElementType;
ElementType ::= Type;

PointerType ::= MUL BaseType;
BaseType    ::= Type;

/* --------------- Function -------------------- */
FunctionType     ::= FUNC Signature;
Signature        ::= Parameters AuxResult;
AuxResult        ::= Result |;

Result         ::= HASH PAR_L AuxResult2 PAR_R | TypeLit | TypeName;   // HOTFIX HASH
AuxResult2     ::= Identifier AuxResult3 | TypeLit | PAR_L Type PAR_R;
AuxResult3     ::= IdentifierStar3 | DOT Identifier;

Parameters          ::= PAR_L AuxParameters1 PAR_R;
AuxParameters1      ::= ParameterList | ;
OptComma            ::= COMMA |;

ParameterList       ::= ParameterDecl;

TypeNoIdentifier    ::= TypeLit | PAR_L Type PAR_R;
ParameterDecl       ::= IdentifierListParam |
					    ELLIPSIS Type ParameterDeclStar |
					    TypeNoIdentifier ParameterDeclStar;

ParameterDeclStar   ::= COMMA ParameterDecl | COMMA | ;
IdentifierListParam ::= Identifier IdentifierStar3;  // include all posibilities
IdentifierStar3     ::= IdentifierStar2 |;
IdentifierStar2     ::= COMMA IdentifierStar4 |
                        ELLIPSIS Type ParameterDeclStar |
                        Type ParameterDeclStar;
IdentifierStar4     ::= IdentifierListParam | TypeNoIdentifier; // Type

FuncIdentifierList     ::= Identifier FuncIdentifierListAux1;
FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier |;

/* --------------- Interface ------------------- */
InterfaceType      ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R;
AuxIntefaceType1   ::= AuxIntefaceType1 MethodSpec SEMICOLON |;
MethodSpec         ::= IDENTIFIER MethodSpecAux1;
MethodSpecAux1     ::= Signature | MethodSpecAux2;
MethodSpecAux2     ::= DOT IDENTIFIER |;

/* --------------- Slice ----------------------- */
SliceType ::= SQRD_L SQRD_R ElementType;

/* --------------- Map ------------------------- */
MapType     ::= MAP SQRD_L KeyType SQRD_R ElementType;
KeyType     ::= Type;

/* --------------- Channel --------------------- */
ChannelType     ::= AuxChannelType1 ElementType;
AuxChannelType1 ::= CHAN | CHAN CHANNEL_OP | CHANNEL_OP CHAN;