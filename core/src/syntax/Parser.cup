import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

import java.util.*;
import java.io.*;

parser code {:
    public void report_error(String message, Object info){
       StringBuffer m = new StringBuffer("ERRO SINT√ÅTICO EM: ");

       if (info instanceof ComplexSymbol){
         ComplexSymbol s = (ComplexSymbol) info;
         if(s.value != null) m.append( s.value.toString() );
         m.append( " - Linha: " + s.getLeft().getLine() + " - Coluna: "+s.getLeft().getColumn() );
         }

       m.append(" : "+message);

       System.err.println(m);
     }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
:};

// keywords
terminal BREAK, DEFAULT, FUNC, INTERFACE, SELECT, CASE, DEFER, GO;
terminal MAP, STRUCT, CHAN, ELSE, GOTO, PACKAGE, SWITCH, CONST;
terminal FALLTHROUGH, IF, RANGE, TYPE, CONTINUE, FOR, IMPORT, RETURN, VAR;

// operation
terminal PLUS, ADDRESS, AND, MINUS, OR, LT, LTE, MUL, XOR;
terminal GT, GTE, DIV, MOD, NOT;

terminal ADD_ASSIGN, ADDRESS_ASSIGN, MINUS_ASSIGN;
terminal OR_ASSIGN, MUL_ASSIGN, XOR_ASSIGN, DIV_ASSIGN;
terminal LEFT_ASSIGN, ASSIGN, CHANNEL_ASSIGN;
terminal RIGHT_ASSIGN, AND_NOT_ASSIGN;

terminal EQ_OP, NE_OP, OR_OP, LEFT_OP, RIGHT_OP, INC_OP, SUB_OP;
terminal AND_NOT_OP, CHANNEL_OP;

// punctuation
terminal COMMA, SEMICOLON, ELLIPSIS, COLON, DOT;
terminal PAR_L, PAR_R, SQRD_L, SQRD_R, CURLY_L, CURLY_R;

// others
terminal STRING_LITERAL, IMG_LITERAL, INT_LITERAL, RUNE_LITERAL;
terminal FLOAT_LITERAL, IDENTIFIER, BLANK_IDENTIFIER;

/* Non terminals */

// Struct related
non terminal StructType;
non terminal FieldDeclStar1, FieldDecl;
non terminal IdentifierList, EmbeddedField, Tag;

non terminal EmbeddedField1, EmbeddedField2;

non terminal Type, TypeLit;
non terminal TypeName, AuxTypeName1, AuxTypeName2;

non terminal TypeNameNoIdentifier;
non terminal QualifiedIdent;
non terminal PackageName;
non terminal ArrayLength, ArrayType;

non terminal ElementType, PointerType, BaseType, FunctionType, InterfaceType;
non terminal MapType, SliceType, KeyType, ChannelType;

non terminal Signature, AuxResult, Result;
non terminal Parameters, ParameterList;
non terminal ParameterDecl;

non terminal MethodSpec, MethodName, InterfaceTypeName;

// Optional
non terminal OptMul;
non terminal OptComma;
non terminal OptIdentifierList;
non terminal OptEllipsis;

// Aux. terminals
non terminal AuxFieldDecl1, AuxFieldDecl2, AuxFieldDecl3, AuxFieldDecl4;
non terminal IdentifierStar1;
non terminal AuxParameters1, AuxParameterList1;
non terminal AuxIntefaceType1;
non terminal AuxChannelType1;

non terminal BasicLit;
non terminal UnaryOp, MulOp, AddOp, RelOp, BinOp;
non terminal Expression, UnaryExpr;
non terminal X, Y;

// ConstDeclaration
non terminal ConstDecl;

/* helpers */
non terminal Identifier;


/* test terminals */
non terminal TypeStar;
non terminal BasicLitStar;
non terminal ExpressionStar;
non terminal QualifiedIdentifierStar;

/*
Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||
*/

precedence left OR_OP;
precedence left AND;
precedence left EQ_OP, NE_OP, LT, LTE, GT, GTE;
precedence left PLUS, MINUS, OR, XOR;
precedence left MUL, DIV, MOD, LEFT_OP, RIGHT_OP, ADDRESS, AND_NOT_OP;

precedence left CHANNEL_OP;  // HOTFIX: Franklin has given permition.

start with TypeStar;

/* helpers */
Identifier ::=   IDENTIFIER:i {: System.out.println("ID " + i); :}
               | BLANK_IDENTIFIER:i {: System.out.println("ID " + i); :};

/* grammar */
/* ------------ Operands ------------ */
BasicLitStar ::= BasicLit BasicLitStar |;
BasicLit ::= INT_LITERAL | FLOAT_LITERAL | IMG_LITERAL | RUNE_LITERAL | STRING_LITERAL;

//unary_op   = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .
UnaryOp  ::= PLUS | MINUS |  NOT | XOR | MUL | ADDRESS | CHANNEL_OP;

//mul_op     = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .
MulOp    ::= MUL | DIV | MOD | LEFT_OP | RIGHT_OP | ADDRESS | AND_NOT_OP;

//add_op     = "+" | "-" | "|" | "^" .
AddOp    ::= PLUS | MINUS | OR | XOR;

//rel_op     = "==" | "!=" | "<" | "<=" | ">" | ">=" .
RelOp    ::= EQ_OP | NE_OP | LT | LTE | GT | GTE;

//binary_op  = "||" | "&&" | rel_op | add_op | mul_op .
BinOp    ::= OR_OP | AND | RelOp | AddOp | MulOp;

//Expression = UnaryExpr | Expression binary_op Expression .
//UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

UnaryExpr  ::= IF | UnaryOp; // FixMe: PrimaryExpr | unary_op UnaryExpr .
Expression ::= UnaryExpr | Expression BinOp Expression;
ExpressionStar ::= ExpressionStar Expression |;


/* ------------ Const Declaration ------------ */
//ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
// ConstDecl ::= CONST AuxConstDecl1;
// AuxConstDecl1 ::= ConstSpec | PAR_L AuxConstSpec PAR_R;
// AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON  | ;

//ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
// ConstSpec ::= IdentifierList AuxConstSpec2;

/* ------------ Struct -------------- */
StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R;
FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON |; // FieldDeclStar1 FieldDecl SEMICOLON |;
FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2;

AuxFieldDecl1 ::= IDENTIFIER:i {: System.out.println("ID "  + i); :} AuxFieldDecl3 | BLANK_IDENTIFIER AuxFieldDecl4 | EmbeddedField1;
AuxFieldDecl3 ::= IdentifierStar1 Type | DOT Identifier:i {: System.out.println("ID "  + i); :};
AuxFieldDecl4 ::= IdentifierStar1 Type;
AuxFieldDecl2 ::= | Tag;

Tag ::= STRING_LITERAL;

// Mandatory MUL included
EmbeddedField1 ::= MUL TypeName:x {: System.out.println("EMB FIELD "  + x); :};
OptMul ::= MUL |;

IdentifierList ::= Identifier:i {: System.out.println("ID "  + i); :} IdentifierStar1 |;
IdentifierStar1 ::= COMMA:a {: System.out.println("COMMA "  + a); :} Identifier:x {: System.out.println("AFTER COMMA "  + x); :} IdentifierStar1 | ; // COMMA IDENTIFIER IdentifierStar1 |;

TypeStar ::= Type TypeStar |; // test state
Type ::= TypeName | TypeLit | PAR_L Type PAR_R;

TypeName ::= AuxTypeName1; // OK
AuxTypeName1 ::= IDENTIFIER:i {: System.out.println("ID "  + i); :} AuxTypeName2 | BLANK_IDENTIFIER;
AuxTypeName2 ::= DOT Identifier:i {: System.out.println("ID "  + i); :} |;
AuxTypeName3 ::= AuxTypeName2 | BLANK_IDENTIFIER;

//TypeName ::= IDENTIFIER | QualifiedIdent;
//QualifiedIdent ::= PackageName DOT IDENTIFIER;
//PackageName ::= IDENTIFIER;

TypeNameNoIdentifier ::= QualifiedIdent;
TypeLit ::= ArrayType | PointerType | SliceType | MapType | ChannelType | StructType; // FIXME: Missing StructType, InterfaceType and FunctionType;

QualifiedIdent ::= PackageName DOT Identifier;
QualifiedIdentifierStar ::= QualifiedIdentifierStar QualifiedIdent |;

PackageName ::= IDENTIFIER;

ArrayLength ::= INT_LITERAL; // FIX ME: Array Length should be an Expression
ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType;
ElementType ::= Type;

PointerType ::= MUL BaseType;
BaseType ::= Type;

/* Functions */
FunctionType   ::= FUNC Signature;
Signature      ::= Parameters AuxResult;
AuxResult      ::= Result |;
Result         ::= Parameters | Type;

Parameters     ::= PAR_L AuxParameters1 PAR_R;
AuxParameters1 ::= ParameterList OptComma |;
OptComma       ::= COMMA |;

ParameterList  ::= ParameterDecl AuxParameterList1;
AuxParameterList1 ::= AuxParameterList1 COMMA ParameterDecl |;
ParameterDecl   ::= OptIdentifierList OptEllipsis Type;
OptIdentifierList ::= IdentifierList |;
OptEllipsis     ::= ELLIPSIS |; 

InterfaceType      ::= INTERFACE PAR_L AuxIntefaceType1 PAR_R;
AuxIntefaceType1   ::= AuxIntefaceType1 MethodSpec SEMICOLON |;
MethodSpec         ::= MethodName Signature | InterfaceTypeName;
MethodName         ::= IDENTIFIER;
InterfaceTypeName  ::= TypeName;

SliceType ::= SQRD_L SQRD_R ElementType;

MapType     ::= MAP SQRD_L KeyType SQRD_R ElementType;
KeyType     ::= Type;

ChannelType ::= AuxChannelType1 ElementType;
AuxChannelType1 ::= CHAN | CHAN CHANNEL_OP | CHANNEL_OP CHAN;