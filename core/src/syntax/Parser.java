
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package syntax;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import semantic.*;
import semantic.models.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0174\000\002\002\004\000\002\176\003\000\002\176" +
    "\003\000\002\310\004\000\002\310\002\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\101\003\000\002\101\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\077" +
    "\004\000\002\164\003\000\002\164\003\000\002\164\006" +
    "\000\002\164\003\000\002\164\003\000\002\164\003\000" +
    "\002\165\005\000\002\166\003\000\002\166\002\000\002" +
    "\170\005\000\002\171\005\000\002\171\002\000\002\172" +
    "\004\000\002\173\003\000\002\173\003\000\002\174\003" +
    "\000\002\174\002\000\002\175\004\000\002\167\003\000" +
    "\002\167\003\000\002\100\005\000\002\143\006\000\002" +
    "\146\005\000\002\146\002\000\002\145\004\000\002\147" +
    "\003\000\002\147\005\000\002\151\005\000\002\151\002" +
    "\000\002\150\004\000\002\152\003\000\002\152\003\000" +
    "\002\152\002\000\002\144\004\000\002\312\004\000\002" +
    "\312\002\000\002\161\003\000\002\161\003\000\002\161" +
    "\005\000\002\163\003\000\002\163\003\000\002\163\003" +
    "\000\002\113\003\000\002\113\004\000\002\114\003\000" +
    "\002\114\003\000\002\114\004\000\002\111\003\000\002" +
    "\111\005\000\002\130\003\000\002\130\003\000\002\130" +
    "\007\000\002\137\006\000\002\140\004\000\002\140\002" +
    "\000\002\141\003\000\002\141\004\000\002\142\004\000" +
    "\002\142\002\000\002\131\005\000\002\131\004\000\002" +
    "\134\003\000\002\134\005\000\002\135\004\000\002\135" +
    "\005\000\002\136\005\000\002\136\003\000\002\056\003" +
    "\000\002\056\004\000\002\056\002\000\002\132\003\000" +
    "\002\132\002\000\002\133\003\000\002\133\004\000\002" +
    "\127\005\000\002\112\004\000\002\311\005\000\002\311" +
    "\002\000\002\117\004\000\002\120\006\000\002\121\003" +
    "\000\002\121\003\000\002\121\005\000\002\122\004\000" +
    "\002\122\002\000\002\177\004\000\002\203\003\000\002" +
    "\203\005\000\002\200\004\000\002\201\005\000\002\201" +
    "\002\000\002\204\005\000\002\204\002\000\002\210\003" +
    "\000\002\210\002\000\002\202\005\000\002\202\002\000" +
    "\002\205\005\000\002\205\002\000\002\314\002\000\002" +
    "\206\005\000\002\211\003\000\002\211\003\000\002\211" +
    "\003\000\002\211\003\000\002\211\003\000\002\211\003" +
    "\000\002\211\003\000\002\211\003\000\002\211\003\000" +
    "\002\211\003\000\002\211\003\000\002\211\003\000\002" +
    "\211\003\000\002\211\003\000\002\211\003\000\002\155" +
    "\005\000\002\155\002\000\002\154\003\000\002\154\003" +
    "\000\002\154\003\000\002\315\002\000\002\156\007\000" +
    "\002\157\003\000\002\157\002\000\002\160\007\000\002" +
    "\153\003\000\002\153\003\000\002\153\003\000\002\223" +
    "\004\000\002\224\003\000\002\224\005\000\002\225\005" +
    "\000\002\225\002\000\002\226\005\000\002\231\004\000" +
    "\002\232\003\000\002\232\005\000\002\233\005\000\002" +
    "\233\002\000\002\235\004\000\002\234\004\000\002\234" +
    "\004\000\002\236\005\000\002\214\004\000\002\214\003" +
    "\000\002\214\004\000\002\214\002\000\002\216\004\000" +
    "\002\216\003\000\002\216\003\000\002\216\004\000\002" +
    "\216\004\000\002\216\002\000\002\316\002\000\002\217" +
    "\006\000\002\220\003\000\002\220\003\000\002\220\003" +
    "\000\002\220\003\000\002\220\003\000\002\220\003\000" +
    "\002\220\003\000\002\220\003\000\002\220\003\000\002" +
    "\220\003\000\002\215\005\000\002\212\005\000\002\212" +
    "\002\000\002\245\005\000\002\264\005\000\002\265\003" +
    "\000\002\265\003\000\002\265\003\000\002\265\002\000" +
    "\002\266\007\000\002\270\004\000\002\270\003\000\002" +
    "\270\003\000\002\270\005\000\002\271\004\000\002\271" +
    "\002\000\002\272\003\000\002\272\003\000\002\267\005" +
    "\000\002\273\004\000\002\274\004\000\002\263\004\000" +
    "\002\263\003\000\002\275\006\000\002\275\006\000\002" +
    "\277\006\000\002\277\002\000\002\301\011\000\002\303" +
    "\004\000\002\303\003\000\002\302\006\000\002\302\002" +
    "\000\002\304\004\000\002\304\003\000\002\300\004\000" +
    "\002\300\003\000\002\306\004\000\002\305\005\000\002" +
    "\305\002\000\002\246\004\000\002\317\002\000\002\320" +
    "\002\000\002\256\011\000\002\260\005\000\002\260\002" +
    "\000\002\261\004\000\002\321\002\000\002\261\005\000" +
    "\002\261\002\000\002\247\006\000\002\250\006\000\002" +
    "\250\002\000\002\251\004\000\002\251\003\000\002\252" +
    "\005\000\002\252\003\000\002\253\004\000\002\254\004" +
    "\000\002\255\003\000\002\255\003\000\002\055\003\000" +
    "\002\055\002\000\002\244\003\000\002\243\004\000\002" +
    "\242\004\000\002\241\004\000\002\207\003\000\002\207" +
    "\002\000\002\240\004\000\002\237\004\000\002\227\003" +
    "\000\002\227\002\000\002\230\004\000\002\230\002\000" +
    "\002\002\006\000\002\004\005\000\002\004\002\000\002" +
    "\003\004\000\002\057\004\000\002\057\004\000\002\057" +
    "\003\000\002\061\004\000\002\061\004\000\002\061\002" +
    "\000\002\062\004\000\002\060\002\000\002\060\003\000" +
    "\002\006\003\000\002\010\004\000\002\052\003\000\002" +
    "\052\002\000\002\005\004\000\002\063\005\000\002\063" +
    "\002\000\002\307\004\000\002\307\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\005\000\002\015\004\000" +
    "\002\015\003\000\002\016\004\000\002\016\002\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\031\003\000\002\032\006\000" +
    "\002\020\003\000\002\021\004\000\002\022\003\000\002" +
    "\023\004\000\002\033\004\000\002\073\003\000\002\073" +
    "\002\000\002\034\006\000\002\034\003\000\002\034\003" +
    "\000\002\074\004\000\002\074\003\000\002\074\005\000" +
    "\002\075\003\000\002\075\004\000\002\035\005\000\002" +
    "\064\003\000\002\064\002\000\002\053\003\000\002\053" +
    "\002\000\002\036\003\000\002\014\003\000\002\014\005" +
    "\000\002\037\003\000\002\037\005\000\002\037\004\000" +
    "\002\040\004\000\002\040\003\000\002\040\002\000\002" +
    "\043\004\000\002\044\005\000\002\044\005\000\002\044" +
    "\004\000\002\041\004\000\002\042\005\000\002\042\002" +
    "\000\002\024\006\000\002\071\005\000\002\071\002\000" +
    "\002\047\004\000\002\050\003\000\002\050\003\000\002" +
    "\051\004\000\002\051\002\000\002\026\005\000\002\025" +
    "\007\000\002\027\003\000\002\030\004\000\002\072\003" +
    "\000\002\072\004\000\002\072\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f2\000\004\021\005\001\002\000\004\103\011\001" +
    "\002\000\004\122\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\103\uffb6\001\002\000" +
    "\016\002\uffc0\006\uffc0\023\uffc0\027\uffc0\032\012\034\uffc0" +
    "\001\002\000\012\106\u01ee\107\u01ec\115\uffb7\122\u01ed\001" +
    "\002\000\004\103\u01e7\001\002\000\014\002\uff62\006\015" +
    "\023\030\027\023\034\022\001\002\000\006\107\115\122" +
    "\u01df\001\002\000\004\103\uff58\001\002\000\004\103\uff5f" +
    "\001\002\000\004\103\uff61\001\002\000\004\103\uff57\001" +
    "\002\000\006\107\u01d1\122\035\001\002\000\006\107\u01c5" +
    "\122\u01c6\001\002\000\004\103\u01c2\001\002\000\004\002" +
    "\uffc2\001\002\000\004\103\uff60\001\002\000\004\103\uff59" +
    "\001\002\000\006\107\034\122\035\001\002\000\004\103" +
    "\uff82\001\002\000\034\006\064\007\071\014\047\015\050" +
    "\016\056\046\074\065\uff79\101\046\103\uff77\107\051\111" +
    "\065\122\055\123\063\001\002\000\004\103\uff81\001\002" +
    "\000\006\110\uff7d\122\uff7d\001\002\000\036\006\uff74\007" +
    "\uff74\014\uff74\015\uff74\016\uff74\046\uff74\065\uff74\101\uff74" +
    "\102\uff74\103\uff74\107\uff74\111\uff74\122\uff74\123\uff74\001" +
    "\002\000\036\006\uff75\007\uff75\014\uff75\015\uff75\016\uff75" +
    "\046\uff75\065\uff75\101\uff75\102\uff75\103\uff75\107\uff75\111" +
    "\uff75\122\uff75\123\uff75\001\002\000\036\006\uff73\007\uff73" +
    "\014\uff73\015\uff73\016\uff73\046\uff73\065\uff73\101\uff73\102" +
    "\040\103\uff73\107\uff73\111\uff73\122\uff73\123\uff73\001\002" +
    "\000\004\122\041\001\002\000\036\006\uff76\007\uff76\014" +
    "\uff76\015\uff76\016\uff76\046\uff76\065\uff76\101\uff76\102\uff76" +
    "\103\uff76\107\uff76\111\uff76\122\uff76\123\uff76\001\002\000" +
    "\006\110\044\122\035\001\002\000\004\103\045\001\002" +
    "\000\004\103\uff80\001\002\000\006\110\uff7e\122\uff7e\001" +
    "\002\000\004\016\265\001\002\000\004\111\u01bd\001\002" +
    "\000\004\113\u01a7\001\002\000\030\006\064\007\071\014" +
    "\047\015\050\016\056\046\074\101\046\107\051\111\065" +
    "\122\055\123\063\001\002\000\004\065\u01a3\001\002\000" +
    "\030\065\ufec5\102\ufec5\103\ufec5\104\ufec5\105\ufec5\107\ufec5" +
    "\110\ufec5\112\ufec5\113\ufec5\115\ufec5\124\ufec5\001\002\000" +
    "\030\065\ufec6\102\ufec6\103\ufec6\104\ufec6\105\ufec6\107\ufec6" +
    "\110\ufec6\112\ufec6\113\ufec6\115\ufec6\124\ufec6\001\002\000" +
    "\136\037\ufecb\040\ufecb\041\ufecb\042\ufecb\043\ufecb\044\ufecb" +
    "\045\ufecb\046\ufecb\047\ufecb\050\ufecb\051\ufecb\052\ufecb\053" +
    "\ufecb\055\ufecb\056\ufecb\057\ufecb\061\ufecb\062\ufecb\063\ufecb" +
    "\064\ufecb\065\ufecb\066\ufecb\067\ufecb\070\ufecb\071\ufecb\072" +
    "\ufecb\073\ufecb\074\ufecb\075\ufecb\076\ufecb\077\ufecb\100\ufecb" +
    "\101\ufecb\102\ufecb\103\ufecb\104\ufecb\105\ufecb\106\u0107\107" +
    "\ufecb\110\ufecb\111\ufecb\112\ufecb\113\ufecb\115\ufecb\124\ufecb" +
    "\125\ufecb\001\002\000\030\006\ufe90\007\ufe90\014\ufe90\015" +
    "\ufe90\016\ufe90\046\ufe90\101\u01a2\107\ufe90\111\ufe90\122\ufe90" +
    "\123\ufe90\001\002\000\030\065\ufec7\102\ufec7\103\ufec7\104" +
    "\ufec7\105\ufec7\107\ufec7\110\ufec7\112\ufec7\113\ufec7\115\ufec7" +
    "\124\ufec7\001\002\000\030\065\ufed0\102\ufed0\103\ufed0\104" +
    "\ufed0\105\ufed0\107\ufed0\110\ufed0\112\ufed0\113\ufed0\115\ufed0" +
    "\124\ufed0\001\002\000\004\065\uff7a\001\002\000\030\065" +
    "\ufed1\102\ufed1\103\ufed1\104\ufed1\105\ufed1\107\ufed1\110\ufed1" +
    "\112\ufed1\113\ufed1\115\ufed1\124\ufed1\001\002\000\134\037" +
    "\ufecd\040\ufecd\041\ufecd\042\ufecd\043\ufecd\044\ufecd\045\ufecd" +
    "\046\ufecd\047\ufecd\050\ufecd\051\ufecd\052\ufecd\053\ufecd\055" +
    "\ufecd\056\ufecd\057\ufecd\061\ufecd\062\ufecd\063\ufecd\064\ufecd" +
    "\065\ufecd\066\ufecd\067\ufecd\070\ufecd\071\ufecd\072\ufecd\073" +
    "\ufecd\074\ufecd\075\ufecd\076\ufecd\077\ufecd\100\ufecd\101\ufecd" +
    "\102\ufecd\103\ufecd\104\ufecd\105\ufecd\107\ufecd\110\ufecd\111" +
    "\ufecd\112\ufecd\113\ufecd\115\ufecd\124\ufecd\125\ufecd\001\002" +
    "\000\004\107\115\001\002\000\064\006\226\007\071\014" +
    "\047\015\050\016\056\035\221\036\232\037\214\040\210" +
    "\042\205\046\222\047\201\054\207\101\227\107\217\111" +
    "\065\112\224\115\177\116\204\117\233\120\175\121\231" +
    "\122\055\123\063\124\176\001\002\000\030\065\ufec9\102" +
    "\ufec9\103\ufec9\104\ufec9\105\ufec9\107\ufec9\110\ufec9\112\ufec9" +
    "\113\ufec9\115\ufec9\124\ufec9\001\002\000\030\065\ufec4\102" +
    "\ufec4\103\ufec4\104\ufec4\105\ufec4\107\ufec4\110\ufec4\112\ufec4" +
    "\113\ufec4\115\ufec4\124\ufec4\001\002\000\030\065\ufeca\102" +
    "\ufeca\103\ufeca\104\ufeca\105\ufeca\107\ufeca\110\ufeca\112\ufeca" +
    "\113\ufeca\115\ufeca\124\ufeca\001\002\000\004\113\103\001" +
    "\002\000\030\065\ufec3\102\ufec3\103\ufec3\104\ufec3\105\ufec3" +
    "\107\ufec3\110\ufec3\112\ufec3\113\ufec3\115\ufec3\124\ufec3\001" +
    "\002\000\030\006\064\007\071\014\047\015\050\016\056" +
    "\046\074\101\046\107\051\111\065\122\055\123\063\001" +
    "\002\000\030\006\064\007\071\014\047\015\050\016\056" +
    "\046\074\101\046\107\051\111\065\122\055\123\063\001" +
    "\002\000\030\065\ufec8\102\ufec8\103\ufec8\104\ufec8\105\ufec8" +
    "\107\ufec8\110\ufec8\112\ufec8\113\ufec8\115\ufec8\124\ufec8\001" +
    "\002\000\004\103\uff7f\001\002\000\030\065\ufebe\102\ufebe" +
    "\103\ufebe\104\ufebe\105\ufebe\107\ufebe\110\ufebe\112\ufebe\113" +
    "\ufebe\115\ufebe\124\ufebe\001\002\000\030\065\ufebf\102\ufebf" +
    "\103\ufebf\104\ufebf\105\ufebf\107\ufebf\110\ufebf\112\ufebf\113" +
    "\ufebf\115\ufebf\124\ufebf\001\002\000\030\065\ufe91\102\ufe91" +
    "\103\ufe91\104\ufe91\105\ufe91\107\ufe91\110\ufe91\112\ufe91\113" +
    "\ufe91\115\ufe91\124\ufe91\001\002\000\030\065\ufec0\102\ufec0" +
    "\103\ufec0\104\ufec0\105\ufec0\107\ufec0\110\ufec0\112\ufec0\113" +
    "\ufec0\115\ufec0\124\ufec0\001\002\000\006\114\ufe9a\122\ufe9a" +
    "\001\002\000\006\114\107\122\105\001\002\000\010\103" +
    "\ufe95\106\116\107\115\001\002\000\004\103\110\001\002" +
    "\000\030\065\ufe9c\102\ufe9c\103\ufe9c\104\ufe9c\105\ufe9c\107" +
    "\ufe9c\110\ufe9c\112\ufe9c\113\ufe9c\115\ufe9c\124\ufe9c\001\002" +
    "\000\006\114\ufe9b\122\ufe9b\001\002\000\004\103\ufe98\001" +
    "\002\000\056\006\064\007\071\014\047\015\050\016\056" +
    "\046\074\065\ufeba\101\046\102\ufeba\103\ufeba\104\ufeba\105" +
    "\ufeba\107\ufeba\110\ufeba\111\065\112\ufeba\113\ufeba\115\ufeba" +
    "\122\055\123\063\124\ufeba\125\155\001\002\000\004\103" +
    "\ufe97\001\002\000\004\103\ufe99\001\002\000\034\006\064" +
    "\007\071\014\047\015\050\016\056\046\074\101\046\104" +
    "\130\107\120\110\ufeaf\111\065\122\122\123\124\001\002" +
    "\000\004\122\117\001\002\000\004\103\ufe96\001\002\000" +
    "\030\006\064\007\071\014\047\015\050\016\056\046\074" +
    "\101\046\107\051\111\065\122\055\123\063\001\002\000" +
    "\006\102\134\110\ufea4\001\002\000\044\006\000\007\000" +
    "\014\000\015\000\016\000\046\000\066\000\101\000\102" +
    "\000\103\000\104\000\106\000\107\000\110\000\111\000" +
    "\122\000\123\000\001\002\000\006\102\ufeab\110\ufeab\001" +
    "\002\000\044\006\uffff\007\uffff\014\uffff\015\uffff\016\uffff" +
    "\046\uffff\066\uffff\101\uffff\102\uffff\103\uffff\104\uffff\106" +
    "\uffff\107\uffff\110\uffff\111\uffff\122\uffff\123\uffff\001\002" +
    "\000\034\006\064\007\071\014\047\015\050\016\056\046" +
    "\074\101\046\102\142\104\143\107\051\111\065\122\055" +
    "\123\063\001\002\000\004\110\ufeb0\001\002\000\004\110" +
    "\137\001\002\000\030\006\064\007\071\014\047\015\050" +
    "\016\056\046\074\101\046\107\051\111\065\122\055\123" +
    "\063\001\002\000\004\110\ufea9\001\002\000\004\110\ufeac" +
    "\001\002\000\006\102\134\110\ufea4\001\002\000\034\006" +
    "\064\007\071\014\047\015\050\016\056\046\074\101\046" +
    "\104\130\107\120\110\ufea5\111\065\122\122\123\124\001" +
    "\002\000\004\110\ufea8\001\002\000\004\110\ufea6\001\002" +
    "\000\056\006\ufeb1\007\ufeb1\014\ufeb1\015\ufeb1\016\ufeb1\046" +
    "\ufeb1\065\ufeb1\101\ufeb1\102\ufeb1\103\ufeb1\104\ufeb1\105\ufeb1" +
    "\107\ufeb1\110\ufeb1\111\ufeb1\112\ufeb1\113\ufeb1\115\ufeb1\122" +
    "\ufeb1\123\ufeb1\124\ufeb1\125\ufeb1\001\002\000\004\110\ufea3" +
    "\001\002\000\006\102\134\110\ufea4\001\002\000\006\122" +
    "\122\123\124\001\002\000\030\006\064\007\071\014\047" +
    "\015\050\016\056\046\074\101\046\107\051\111\065\122" +
    "\055\123\063\001\002\000\006\102\134\110\ufea4\001\002" +
    "\000\004\110\ufea1\001\002\000\034\006\064\007\071\014" +
    "\047\015\050\016\056\046\074\101\046\102\142\104\143" +
    "\107\051\111\065\122\055\123\063\001\002\000\004\110" +
    "\ufea2\001\002\000\004\110\ufea0\001\002\000\004\110\ufea7" +
    "\001\002\000\004\110\153\001\002\000\006\102\ufeaa\110" +
    "\ufeaa\001\002\000\030\065\ufebb\102\ufebb\103\ufebb\104\ufebb" +
    "\105\ufebb\107\ufebb\110\ufebb\112\ufebb\113\ufebb\115\ufebb\124" +
    "\ufebb\001\002\000\004\107\161\001\002\000\030\065\ufeb8" +
    "\102\ufeb8\103\ufeb8\104\ufeb8\105\ufeb8\107\ufeb8\110\ufeb8\112" +
    "\ufeb8\113\ufeb8\115\ufeb8\124\ufeb8\001\002\000\030\065\ufeb7" +
    "\102\ufeb7\103\ufeb7\104\ufeb7\105\ufeb7\107\ufeb7\110\ufeb7\112" +
    "\ufeb7\113\ufeb7\115\ufeb7\124\ufeb7\001\002\000\030\065\ufebc" +
    "\102\ufebc\103\ufebc\104\ufebc\105\ufebc\107\ufebc\110\ufebc\112" +
    "\ufebc\113\ufebc\115\ufebc\124\ufebc\001\002\000\030\006\064" +
    "\007\071\014\047\015\050\016\056\046\074\101\046\107" +
    "\162\111\065\122\122\123\124\001\002\000\030\006\064" +
    "\007\071\014\047\015\050\016\056\046\074\101\046\107" +
    "\051\111\065\122\055\123\063\001\002\000\004\110\172" +
    "\001\002\000\004\110\ufeb5\001\002\000\004\106\170\001" +
    "\002\000\004\110\ufeb6\001\002\000\004\110\ufeb3\001\002" +
    "\000\006\122\122\123\124\001\002\000\004\110\ufeb2\001" +
    "\002\000\030\065\ufeb9\102\ufeb9\103\ufeb9\104\ufeb9\105\ufeb9" +
    "\107\ufeb9\110\ufeb9\112\ufeb9\113\ufeb9\115\ufeb9\124\ufeb9\001" +
    "\002\000\004\110\174\001\002\000\004\110\ufeb4\001\002" +
    "\000\126\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\055\ufff9\056\ufff9\057\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100" +
    "\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\110\ufff9" +
    "\111\ufff9\112\ufff9\113\ufff9\125\ufff9\001\002\000\030\006" +
    "\064\007\071\014\047\015\050\016\056\046\074\101\046" +
    "\111\065\122\055\123\063\124\176\001\002\000\126\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8" +
    "\102\ufff8\103\ufff8\104\ufff8\105\ufff8\110\ufff8\111\ufff8\112" +
    "\ufff8\113\ufff8\125\ufff8\001\002\000\126\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3" +
    "\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103" +
    "\uffb3\104\uffb3\105\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3" +
    "\125\uffb3\001\002\000\062\006\ufff2\007\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2" +
    "\046\ufff2\047\ufff2\054\ufff2\101\ufff2\107\ufff2\111\ufff2\115" +
    "\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122\ufff2\123\ufff2" +
    "\124\ufff2\001\002\000\130\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2" +
    "\105\uffb2\107\uff87\110\uffb2\111\uffb2\112\uffb2\113\uffb2\125" +
    "\uffb2\001\002\000\006\107\uff86\124\uff86\001\002\000\126" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101" +
    "\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\110\ufffa\111\ufffa" +
    "\112\ufffa\113\ufffa\125\ufffa\001\002\000\062\006\ufff4\007" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\042\ufff4\046\ufff4\047\ufff4\054\ufff4\101\ufff4\107" +
    "\ufff4\111\ufff4\115\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4" +
    "\122\ufff4\123\ufff4\124\ufff4\001\002\000\062\006\226\007" +
    "\071\014\047\015\050\016\056\035\221\036\232\037\214" +
    "\040\210\042\205\046\222\047\201\054\207\101\227\107" +
    "\217\111\065\115\177\116\204\117\233\120\175\121\231" +
    "\122\055\123\063\124\176\001\002\000\062\006\ufff3\007" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\042\ufff3\046\ufff3\047\ufff3\054\ufff3\101\ufff3\107" +
    "\ufff3\111\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3" +
    "\122\ufff3\123\ufff3\124\ufff3\001\002\000\062\006\ufff0\007" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\042\ufff0\046\ufff0\047\ufff0\054\ufff0\101\ufff0\107" +
    "\ufff0\111\ufff0\115\ufff0\116\ufff0\117\ufff0\120\ufff0\121\ufff0" +
    "\122\ufff0\123\ufff0\124\ufff0\001\002\000\126\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\104\uffb0\105\uffb0\110\uffb0\111\uffb0\112\uffb0\113" +
    "\uffb0\125\uffb0\001\002\000\004\112\u019e\001\002\000\126" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\055\uffae\056\uffae\057\uffae\061\uffae\062\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101" +
    "\uffae\102\uffae\103\uffae\104\uffae\105\uffae\110\uffae\111\uffae" +
    "\112\uffae\113\uffae\125\uffae\001\002\000\062\006\ufff5\007" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\046\ufff5\047\ufff5\054\ufff5\101\ufff5\107" +
    "\ufff5\111\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5" +
    "\122\ufff5\123\ufff5\124\ufff5\001\002\000\126\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\103\uffaf\104\uffaf\105\uffaf\110\uffaf\111\uffaf\112\uffaf\113" +
    "\uffaf\125\uffaf\001\002\000\122\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\110\uffa8\112\uffa8\113\uffa8\001\002\000\062" +
    "\006\226\007\071\014\047\015\050\016\056\035\221\036" +
    "\232\037\214\040\210\042\205\046\222\047\201\054\207" +
    "\101\227\107\217\111\065\115\177\116\204\117\233\120" +
    "\175\121\231\122\055\123\063\124\176\001\002\000\126" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\055\uffad\056\uffad\057\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\102\uffad\103\uffad\104\uffad\105\uffad\110\uffad\111\u0135" +
    "\112\uffad\113\uffad\125\u0199\001\002\000\126\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\110\ufff7\111\ufff7\112\ufff7\113" +
    "\ufff7\125\ufff7\001\002\000\062\006\ufff1\007\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042" +
    "\ufff1\046\ufff1\047\ufff1\054\ufff1\101\046\107\ufff1\111\ufff1" +
    "\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1\122\ufff1\123" +
    "\ufff1\124\ufff1\001\002\000\004\107\u0193\001\002\000\030" +
    "\006\064\007\071\014\047\015\050\016\056\046\074\101" +
    "\046\107\051\111\065\122\055\123\063\001\002\000\126" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\110\uffaa\111\uffaa" +
    "\112\uffaa\113\uffaa\125\uffaa\001\002\000\004\107\115\001" +
    "\002\000\062\006\uffef\007\uffef\014\uffef\015\uffef\016\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\046\uffef\047" +
    "\uffef\054\uffef\101\uffef\107\uffef\111\uffef\115\uffef\116\uffef" +
    "\117\uffef\120\uffef\121\uffef\122\uffef\123\uffef\124\uffef\001" +
    "\002\000\052\037\240\040\257\041\236\042\254\043\241" +
    "\044\237\045\243\046\263\047\261\050\246\051\251\052" +
    "\253\053\235\071\247\072\242\073\255\074\245\075\252" +
    "\100\250\112\ufec2\001\002\000\126\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\125" +
    "\ufffb\001\002\000\126\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105" +
    "\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\125\ufff6\001\002" +
    "\000\126\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100" +
    "\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\110\ufffc" +
    "\111\ufffc\112\ufffc\113\ufffc\125\ufffc\001\002\000\126\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\055" +
    "\uffab\056\uffab\057\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\104\uffab\105\uffab\110\uffab\111\uffab\112" +
    "\uffab\113\uffab\125\uffab\001\002\000\062\006\uffec\007\uffec" +
    "\014\uffec\015\uffec\016\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\042\uffec\046\uffec\047\uffec\054\uffec\101\uffec\107\uffec" +
    "\111\uffec\115\uffec\116\uffec\117\uffec\120\uffec\121\uffec\122" +
    "\uffec\123\uffec\124\uffec\001\002\000\062\006\uffdc\007\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\042\uffdc\046\uffdc\047\uffdc\054\uffdc\101\uffdc\107\uffdc" +
    "\111\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc\122" +
    "\uffdc\123\uffdc\124\uffdc\001\002\000\062\006\uffe1\007\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\042\uffe1\046\uffe1\047\uffe1\054\uffe1\101\uffe1\107\uffe1" +
    "\111\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122" +
    "\uffe1\123\uffe1\124\uffe1\001\002\000\062\006\uffe7\007\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\046\uffe7\047\uffe7\054\uffe7\101\uffe7\107\uffe7" +
    "\111\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122" +
    "\uffe7\123\uffe7\124\uffe7\001\002\000\062\006\uffe5\007\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\042\uffe5\046\uffe5\047\uffe5\054\uffe5\101\uffe5\107\uffe5" +
    "\111\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122" +
    "\uffe5\123\uffe5\124\uffe5\001\002\000\062\006\uffe2\007\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\042\uffe2\046\uffe2\047\uffe2\054\uffe2\101\uffe2\107\uffe2" +
    "\111\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122" +
    "\uffe2\123\uffe2\124\uffe2\001\002\000\062\006\uffe0\007\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\042\uffe0\046\uffe0\047\uffe0\054\uffe0\101\uffe0\107\uffe0" +
    "\111\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122" +
    "\uffe0\123\uffe0\124\uffe0\001\002\000\062\006\uffd9\007\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\042\uffd9\046\uffd9\047\uffd9\054\uffd9\101\uffd9\107\uffd9" +
    "\111\uffd9\115\uffd9\116\uffd9\117\uffd9\120\uffd9\121\uffd9\122" +
    "\uffd9\123\uffd9\124\uffd9\001\002\000\062\006\uffeb\007\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\042\uffeb\046\uffeb\047\uffeb\054\uffeb\101\uffeb\107\uffeb" +
    "\111\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb\122" +
    "\uffeb\123\uffeb\124\uffeb\001\002\000\062\006\uffdf\007\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\042\uffdf\046\uffdf\047\uffdf\054\uffdf\101\uffdf\107\uffdf" +
    "\111\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122" +
    "\uffdf\123\uffdf\124\uffdf\001\002\000\062\006\uffe3\007\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\042\uffe3\046\uffe3\047\uffe3\054\uffe3\101\uffe3\107\uffe3" +
    "\111\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3\122" +
    "\uffe3\123\uffe3\124\uffe3\001\002\000\062\006\uffe8\007\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\042\uffe8\046\uffe8\047\uffe8\054\uffe8\101\uffe8\107\uffe8" +
    "\111\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122" +
    "\uffe8\123\uffe8\124\uffe8\001\002\000\062\006\uffde\007\uffde" +
    "\014\uffde\015\uffde\016\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\042\uffde\046\uffde\047\uffde\054\uffde\101\uffde\107\uffde" +
    "\111\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde\122" +
    "\uffde\123\uffde\124\uffde\001\002\000\062\006\uffea\007\uffea" +
    "\014\uffea\015\uffea\016\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\042\uffea\046\uffea\047\uffea\054\uffea\101\uffea\107\uffea" +
    "\111\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\122" +
    "\uffea\123\uffea\124\uffea\001\002\000\062\006\uffed\007\uffed" +
    "\014\uffed\015\uffed\016\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\042\uffed\046\uffed\047\uffed\054\uffed\101\uffed\107\uffed" +
    "\111\uffed\115\uffed\116\uffed\117\uffed\120\uffed\121\uffed\122" +
    "\uffed\123\uffed\124\uffed\001\002\000\062\006\uffe6\007\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\042\uffe6\046\uffe6\047\uffe6\054\uffe6\101\uffe6\107\uffe6" +
    "\111\uffe6\115\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\122" +
    "\uffe6\123\uffe6\124\uffe6\001\002\000\062\006\uffdd\007\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\042\uffdd\046\uffdd\047\uffdd\054\uffdd\101\uffdd\107\uffdd" +
    "\111\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd\122" +
    "\uffdd\123\uffdd\124\uffdd\001\002\000\062\006\226\007\071" +
    "\014\047\015\050\016\056\035\221\036\232\037\214\040" +
    "\210\042\205\046\222\047\201\054\207\101\227\107\217" +
    "\111\065\115\177\116\204\117\233\120\175\121\231\122" +
    "\055\123\063\124\176\001\002\000\062\006\uffe9\007\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\042\uffe9\046\uffe9\047\uffe9\054\uffe9\101\uffe9\107\uffe9" +
    "\111\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9\121\uffe9\122" +
    "\uffe9\123\uffe9\124\uffe9\001\002\000\062\006\uffda\007\uffda" +
    "\014\uffda\015\uffda\016\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\042\uffda\046\uffda\047\uffda\054\uffda\101\uffda\107\uffda" +
    "\111\uffda\115\uffda\116\uffda\117\uffda\120\uffda\121\uffda\122" +
    "\uffda\123\uffda\124\uffda\001\002\000\062\006\uffe4\007\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\042\uffe4\046\uffe4\047\uffe4\054\uffe4\101\uffe4\107\uffe4" +
    "\111\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122" +
    "\uffe4\123\uffe4\124\uffe4\001\002\000\062\006\uffdb\007\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\046\uffdb\047\uffdb\054\uffdb\101\uffdb\107\uffdb" +
    "\111\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb\121\uffdb\122" +
    "\uffdb\123\uffdb\124\uffdb\001\002\000\062\006\uffee\007\uffee" +
    "\014\uffee\015\uffee\016\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\042\uffee\046\uffee\047\uffee\054\uffee\101\uffee\107\uffee" +
    "\111\uffee\115\uffee\116\uffee\117\uffee\120\uffee\121\uffee\122" +
    "\uffee\123\uffee\124\uffee\001\002\000\122\037\240\040\257" +
    "\041\236\042\254\043\241\044\237\045\243\046\263\047" +
    "\261\050\246\051\251\052\253\053\235\055\uffa7\056\uffa7" +
    "\057\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\067\uffa7\070\uffa7\071\247\072\242\073\255\074\245" +
    "\075\252\076\uffa7\077\uffa7\100\250\101\uffa7\102\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\110\uffa7\112\uffa7\113\uffa7\001\002" +
    "\000\030\006\ufe8e\007\ufe8e\014\ufe8e\015\ufe8e\016\ufe8e\046" +
    "\ufe8e\101\ufe8e\107\ufe8e\111\ufe8e\122\ufe8e\123\ufe8e\001\002" +
    "\000\014\102\ufebd\104\ufebd\107\ufebd\110\ufebd\113\270\001" +
    "\002\000\126\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\113\uffc3\125\uffc3\001\002\000\124" +
    "\004\321\006\226\007\071\010\310\012\276\013\274\014" +
    "\047\015\050\016\056\020\305\022\315\023\030\024\312" +
    "\025\327\027\023\030\326\031\316\033\320\034\022\035" +
    "\221\036\232\037\214\040\210\042\205\046\222\047\201" +
    "\054\207\101\227\103\uff44\107\217\111\065\113\270\114" +
    "\uff2f\115\177\116\204\117\233\120\175\121\231\122\272" +
    "\123\063\124\322\001\002\000\004\103\uff70\001\002\000" +
    "\120\037\ufecb\040\ufecb\041\ufecb\042\ufecb\043\ufecb\044\ufecb" +
    "\045\ufecb\046\ufecb\047\ufecb\050\ufecb\051\ufecb\052\ufecb\053" +
    "\ufecb\055\ufecb\056\ufecb\057\ufecb\061\ufecb\062\ufecb\063\ufecb" +
    "\064\ufecb\065\ufecb\067\ufecb\070\ufecb\071\ufecb\072\ufecb\073" +
    "\ufecb\074\ufecb\075\ufecb\076\ufecb\077\ufecb\100\ufecb\101\ufecb" +
    "\102\ufecb\103\ufecb\105\u0190\106\u0107\107\ufecb\111\ufecb\125" +
    "\ufecb\001\002\000\004\103\u018e\001\002\000\062\006\226" +
    "\007\071\014\047\015\050\016\056\035\221\036\232\037" +
    "\214\040\210\042\205\046\222\047\201\054\207\101\227" +
    "\107\217\111\065\115\177\116\204\117\233\120\175\121" +
    "\231\122\055\123\063\124\176\001\002\000\004\103\uff66" +
    "\001\002\000\062\006\226\007\071\014\047\015\050\016" +
    "\056\035\221\036\232\037\214\040\210\042\205\046\222" +
    "\047\201\054\207\101\227\107\217\111\065\115\177\116" +
    "\204\117\233\120\175\121\231\122\055\123\063\124\176" +
    "\001\002\000\004\103\uff71\001\002\000\004\103\uff6c\001" +
    "\002\000\004\103\uff6e\001\002\000\004\103\uff6d\001\002" +
    "\000\004\103\uff69\001\002\000\004\103\uff65\001\002\000" +
    "\010\103\ufef4\122\122\123\124\001\002\000\004\103\uff68" +
    "\001\002\000\004\103\uff67\001\002\000\004\113\u0177\001" +
    "\002\000\004\103\uff72\001\002\000\004\103\ufef3\001\002" +
    "\000\004\103\uff6f\001\002\000\026\055\u011f\056\u0121\057" +
    "\u0120\061\u011c\062\u011b\063\u0123\064\u0127\065\u0176\067\u011d" +
    "\070\u011e\001\002\000\066\006\226\007\071\014\047\015" +
    "\050\016\056\035\221\036\232\037\214\040\210\042\205" +
    "\046\222\047\201\054\207\101\227\103\uff44\107\217\111" +
    "\065\115\177\116\204\117\233\120\175\121\231\122\055" +
    "\123\063\124\322\125\u012a\001\002\000\070\006\226\007" +
    "\071\014\047\015\050\016\056\026\uff22\035\221\036\232" +
    "\037\214\040\210\042\205\046\222\047\201\054\207\101" +
    "\227\103\uff44\107\217\111\065\113\uff29\115\177\116\204" +
    "\117\233\120\175\121\231\122\055\123\063\124\322\001" +
    "\002\000\004\103\uff64\001\002\000\064\006\226\007\071" +
    "\014\047\015\050\016\056\035\221\036\232\037\214\040" +
    "\210\042\205\046\222\047\201\054\207\101\227\103\ufeee" +
    "\107\217\111\065\115\177\116\204\117\233\120\175\121" +
    "\231\122\055\123\063\124\176\001\002\000\010\103\ufef4" +
    "\122\122\123\124\001\002\000\030\006\064\007\071\014" +
    "\047\015\050\016\056\046\074\101\046\111\065\122\367" +
    "\123\373\124\176\001\002\000\004\114\366\001\002\000" +
    "\004\103\uff6b\001\002\000\006\103\uff46\113\uff46\001\002" +
    "\000\010\103\ufef4\122\122\123\124\001\002\000\064\006" +
    "\uff05\007\uff05\014\uff05\015\uff05\016\uff05\035\uff05\036\uff05" +
    "\037\uff05\040\uff05\042\uff05\046\uff05\047\uff05\054\uff05\101" +
    "\uff05\107\uff05\111\uff05\115\uff05\116\uff05\117\uff05\120\uff05" +
    "\121\uff05\122\uff05\123\uff05\124\uff05\125\347\001\002\000" +
    "\110\037\334\040\257\041\236\042\340\043\241\044\237" +
    "\045\243\046\263\047\261\050\246\051\251\052\253\053" +
    "\235\055\uff8a\056\uff8a\057\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\067\uff8a\070\uff8a\071\247\072\242\073" +
    "\255\074\245\075\252\076\337\077\333\100\250\101\332" +
    "\102\336\103\uff3e\113\uff3e\001\002\000\004\103\uff6a\001" +
    "\002\000\062\006\226\007\071\014\047\015\050\016\056" +
    "\035\221\036\232\037\214\040\210\042\205\046\222\047" +
    "\201\054\207\101\227\107\217\111\065\115\177\116\204" +
    "\117\233\120\175\121\231\122\055\123\063\124\176\001" +
    "\002\000\006\103\uff41\113\uff41\001\002\000\062\006\uffe7" +
    "\007\uffe7\014\uffe7\015\uffe7\016\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\042\uffe7\046\uffe7\047\uffe7\054\uffe7\101\uffe7" +
    "\107\uffe7\111\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121" +
    "\uffe7\122\uffe7\123\uffe7\124\uffe7\001\002\000\006\103\uff47" +
    "\113\uff47\001\002\000\062\006\226\007\071\014\047\015" +
    "\050\016\056\035\221\036\232\037\214\040\210\042\205" +
    "\046\222\047\201\054\207\101\227\107\217\111\065\115" +
    "\177\116\204\117\233\120\175\121\231\122\055\123\063" +
    "\124\176\001\002\000\006\103\uff42\113\uff42\001\002\000" +
    "\062\006\uffe6\007\uffe6\014\uffe6\015\uffe6\016\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\042\uffe6\046\uffe6\047\uffe6\054" +
    "\uffe6\101\uffe6\107\uffe6\111\uffe6\115\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\001\002\000" +
    "\042\055\uff8c\056\uff8c\057\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\103\uff8c\104" +
    "\uff8c\105\uff8c\110\uff8c\113\uff8c\001\002\000\006\103\uff3f" +
    "\113\uff3f\001\002\000\112\037\240\040\257\041\236\042" +
    "\254\043\241\044\237\045\243\046\263\047\261\050\246" +
    "\051\251\052\253\053\235\055\uff8a\056\uff8a\057\uff8a\061" +
    "\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\071\247\072\242\073\255\074\245\075\252\100" +
    "\250\102\336\103\uff8a\104\uff8a\105\uff8a\110\uff8a\113\uff8a" +
    "\001\002\000\042\055\uff8b\056\uff8b\057\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\103\uff8b\104\uff8b\105\uff8b\110\uff8b\113\uff8b\001\002\000" +
    "\006\103\uff40\113\uff40\001\002\000\054\037\240\040\257" +
    "\041\236\042\254\043\241\044\237\045\243\046\263\047" +
    "\261\050\246\051\251\052\253\053\235\071\247\072\242" +
    "\073\255\074\245\075\252\100\250\103\uff43\113\uff43\001" +
    "\002\000\064\006\226\007\071\014\047\015\050\016\056" +
    "\035\221\036\232\037\214\040\210\042\205\046\222\047" +
    "\201\054\207\101\227\103\uff44\107\217\111\065\115\177" +
    "\116\204\117\233\120\175\121\231\122\055\123\063\124" +
    "\322\001\002\000\062\006\226\007\071\014\047\015\050" +
    "\016\056\035\221\036\232\037\214\040\210\042\205\046" +
    "\222\047\201\054\207\101\227\107\217\111\065\115\177" +
    "\116\204\117\233\120\175\121\231\122\055\123\063\124" +
    "\176\001\002\000\052\037\240\040\257\041\236\042\254" +
    "\043\241\044\237\045\243\046\263\047\261\050\246\051" +
    "\251\052\253\053\235\071\247\072\242\073\255\074\245" +
    "\075\252\100\250\113\uff09\001\002\000\004\113\270\001" +
    "\002\000\006\017\uff08\103\uff08\001\002\000\006\017\355" +
    "\103\uff01\001\002\000\006\025\327\113\uff03\001\002\000" +
    "\004\103\uff07\001\002\000\004\103\uff04\001\002\000\004" +
    "\113\270\001\002\000\004\103\uff02\001\002\000\004\103" +
    "\363\001\002\000\062\006\uff06\007\uff06\014\uff06\015\uff06" +
    "\016\uff06\035\uff06\036\uff06\037\uff06\040\uff06\042\uff06\046" +
    "\uff06\047\uff06\054\uff06\101\uff06\107\uff06\111\uff06\115\uff06" +
    "\116\uff06\117\uff06\120\uff06\121\uff06\122\uff06\123\uff06\124" +
    "\uff06\001\002\000\004\103\ufef1\001\002\000\004\103\ufef5" +
    "\001\002\000\130\017\uff2e\037\uff2e\040\uff2e\041\uff2e\042" +
    "\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e\050\uff2e" +
    "\051\uff2e\052\uff2e\053\uff2e\055\uff2e\056\uff2e\057\uff2e\061" +
    "\uff2e\062\uff2e\063\uff2e\064\uff2e\065\uff2e\066\uff2e\067\uff2e" +
    "\070\uff2e\071\uff2e\072\uff2e\073\uff2e\074\uff2e\075\uff2e\076" +
    "\uff2e\077\uff2e\100\uff2e\101\uff2e\102\uff2e\103\uff2e\104\uff2e" +
    "\105\uff2e\110\uff2e\111\uff2e\112\uff2e\113\uff2e\125\uff2e\001" +
    "\002\000\070\037\ufecb\040\ufecb\041\ufecb\042\ufecb\043\ufecb" +
    "\044\ufecb\045\ufecb\046\ufecb\047\ufecb\050\ufecb\051\ufecb\052" +
    "\ufecb\053\ufecb\066\000\071\ufecb\072\ufecb\073\ufecb\074\ufecb" +
    "\075\ufecb\100\ufecb\102\000\106\u0107\107\ufecb\111\ufecb\113" +
    "\ufecb\124\ufecb\125\ufecb\001\002\000\004\124\uff87\001\002" +
    "\000\004\124\u0105\001\002\000\006\066\ufed4\102\u0101\001" +
    "\002\000\066\037\ufecd\040\ufecd\041\ufecd\042\ufecd\043\ufecd" +
    "\044\ufecd\045\ufecd\046\ufecd\047\ufecd\050\ufecd\051\ufecd\052" +
    "\ufecd\053\ufecd\066\uffff\071\ufecd\072\ufecd\073\ufecd\074\ufecd" +
    "\075\ufecd\100\ufecd\102\uffff\107\ufecd\111\ufecd\113\ufecd\124" +
    "\ufecd\125\ufecd\001\002\000\006\103\uff45\113\uff45\001\002" +
    "\000\004\066\376\001\002\000\062\006\226\007\071\014" +
    "\047\015\050\016\056\035\221\036\232\037\214\040\210" +
    "\042\205\046\222\047\201\054\207\101\227\107\217\111" +
    "\065\115\177\116\204\117\233\120\175\121\231\122\055" +
    "\123\063\124\176\001\002\000\006\103\uff31\113\uff31\001" +
    "\002\000\064\037\240\040\257\041\236\042\254\043\241" +
    "\044\237\045\243\046\263\047\261\050\246\051\251\052" +
    "\253\053\235\071\247\072\242\073\255\074\245\075\252" +
    "\100\250\102\336\103\uff8a\104\uff8a\105\uff8a\110\uff8a\113" +
    "\uff8a\001\002\000\006\122\122\123\124\001\002\000\004" +
    "\066\ufed6\001\002\000\034\006\ufed4\007\ufed4\014\ufed4\015" +
    "\ufed4\016\ufed4\046\ufed4\066\ufed4\101\ufed4\102\u0101\107\ufed4" +
    "\111\ufed4\122\ufed4\123\ufed4\001\002\000\032\006\ufed5\007" +
    "\ufed5\014\ufed5\015\ufed5\016\ufed5\046\ufed5\066\ufed5\101\ufed5" +
    "\107\ufed5\111\ufed5\122\ufed5\123\ufed5\001\002\000\006\107" +
    "\uff85\124\uff85\001\002\000\134\037\ufece\040\ufece\041\ufece" +
    "\042\ufece\043\ufece\044\ufece\045\ufece\046\ufece\047\ufece\050" +
    "\ufece\051\ufece\052\ufece\053\ufece\055\ufece\056\ufece\057\ufece" +
    "\061\ufece\062\ufece\063\ufece\064\ufece\065\ufece\066\ufece\067" +
    "\ufece\070\ufece\071\ufece\072\ufece\073\ufece\074\ufece\075\ufece" +
    "\076\ufece\077\ufece\100\ufece\101\ufece\102\ufece\103\ufece\104" +
    "\ufece\105\ufece\107\ufece\110\ufece\111\ufece\112\ufece\113\ufece" +
    "\115\ufece\124\ufece\125\ufece\001\002\000\004\122\u0108\001" +
    "\002\000\134\037\ufecc\040\ufecc\041\ufecc\042\ufecc\043\ufecc" +
    "\044\ufecc\045\ufecc\046\ufecc\047\ufecc\050\ufecc\051\ufecc\052" +
    "\ufecc\053\ufecc\055\ufecc\056\ufecc\057\ufecc\061\ufecc\062\ufecc" +
    "\063\ufecc\064\ufecc\065\ufecc\066\ufecc\067\ufecc\070\ufecc\071" +
    "\ufecc\072\ufecc\073\ufecc\074\ufecc\075\ufecc\076\ufecc\077\ufecc" +
    "\100\ufecc\101\ufecc\102\ufecc\103\ufecc\104\ufecc\105\ufecc\107" +
    "\ufecc\110\ufecc\111\ufecc\112\ufecc\113\ufecc\115\ufecc\124\ufecc" +
    "\125\ufecc\001\002\000\004\103\ufef0\001\002\000\004\103" +
    "\ufeef\001\002\000\004\103\ufeed\001\002\000\030\055\u011f" +
    "\056\u0121\057\u0120\061\u011c\062\u011b\063\u0123\064\u0127\065" +
    "\u0124\066\u0125\067\u011d\070\u011e\001\002\000\004\113\uff2b" +
    "\001\002\000\004\113\270\001\002\000\004\026\u0118\001" +
    "\002\000\004\103\u0113\001\002\000\112\037\334\040\257" +
    "\041\236\042\340\043\241\044\237\045\243\046\263\047" +
    "\261\050\246\051\251\052\253\053\235\055\uff8a\056\uff8a" +
    "\057\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066" +
    "\uff8a\067\uff8a\070\uff8a\071\247\072\242\073\255\074\245" +
    "\075\252\076\337\077\333\100\250\101\332\102\336\103" +
    "\uff3e\113\uff2c\001\002\000\004\113\uff2a\001\002\000\064" +
    "\006\226\007\071\014\047\015\050\016\056\035\221\036" +
    "\232\037\214\040\210\042\205\046\222\047\201\054\207" +
    "\101\227\103\uff90\107\217\111\065\115\177\116\204\117" +
    "\233\120\175\121\231\122\055\123\063\124\176\001\002" +
    "\000\004\103\u0116\001\002\000\056\037\240\040\257\041" +
    "\236\042\254\043\241\044\237\045\243\046\263\047\261" +
    "\050\246\051\251\052\253\053\235\071\247\072\242\073" +
    "\255\074\245\075\252\100\250\103\uff91\112\uff91\113\uff91" +
    "\001\002\000\064\006\226\007\071\014\047\015\050\016" +
    "\056\035\221\036\232\037\214\040\210\042\205\046\222" +
    "\047\201\054\207\101\227\107\217\111\065\113\uff44\115" +
    "\177\116\204\117\233\120\175\121\231\122\055\123\063" +
    "\124\322\001\002\000\004\113\uff28\001\002\000\062\006" +
    "\226\007\071\014\047\015\050\016\056\035\221\036\232" +
    "\037\214\040\210\042\205\046\222\047\201\054\207\101" +
    "\227\107\217\111\065\115\177\116\204\117\233\120\175" +
    "\121\231\122\055\123\063\124\176\001\002\000\052\037" +
    "\240\040\257\041\236\042\254\043\241\044\237\045\243" +
    "\046\263\047\261\050\246\051\251\052\253\053\235\071" +
    "\247\072\242\073\255\074\245\075\252\100\250\113\uff1f" +
    "\001\002\000\004\103\uff2d\001\002\000\062\006\uff39\007" +
    "\uff39\014\uff39\015\uff39\016\uff39\035\uff39\036\uff39\037\uff39" +
    "\040\uff39\042\uff39\046\uff39\047\uff39\054\uff39\101\uff39\107" +
    "\uff39\111\uff39\115\uff39\116\uff39\117\uff39\120\uff39\121\uff39" +
    "\122\uff39\123\uff39\124\uff39\001\002\000\062\006\uff3b\007" +
    "\uff3b\014\uff3b\015\uff3b\016\uff3b\035\uff3b\036\uff3b\037\uff3b" +
    "\040\uff3b\042\uff3b\046\uff3b\047\uff3b\054\uff3b\101\uff3b\107" +
    "\uff3b\111\uff3b\115\uff3b\116\uff3b\117\uff3b\120\uff3b\121\uff3b" +
    "\122\uff3b\123\uff3b\124\uff3b\001\002\000\062\006\uff36\007" +
    "\uff36\014\uff36\015\uff36\016\uff36\035\uff36\036\uff36\037\uff36" +
    "\040\uff36\042\uff36\046\uff36\047\uff36\054\uff36\101\uff36\107" +
    "\uff36\111\uff36\115\uff36\116\uff36\117\uff36\120\uff36\121\uff36" +
    "\122\uff36\123\uff36\124\uff36\001\002\000\062\006\uff35\007" +
    "\uff35\014\uff35\015\uff35\016\uff35\035\uff35\036\uff35\037\uff35" +
    "\040\uff35\042\uff35\046\uff35\047\uff35\054\uff35\101\uff35\107" +
    "\uff35\111\uff35\115\uff35\116\uff35\117\uff35\120\uff35\121\uff35" +
    "\122\uff35\123\uff35\124\uff35\001\002\000\062\006\uff3a\007" +
    "\uff3a\014\uff3a\015\uff3a\016\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\040\uff3a\042\uff3a\046\uff3a\047\uff3a\054\uff3a\101\uff3a\107" +
    "\uff3a\111\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\121\uff3a" +
    "\122\uff3a\123\uff3a\124\uff3a\001\002\000\062\006\uff34\007" +
    "\uff34\014\uff34\015\uff34\016\uff34\035\uff34\036\uff34\037\uff34" +
    "\040\uff34\042\uff34\046\uff34\047\uff34\054\uff34\101\uff34\107" +
    "\uff34\111\uff34\115\uff34\116\uff34\117\uff34\120\uff34\121\uff34" +
    "\122\uff34\123\uff34\124\uff34\001\002\000\062\006\uff33\007" +
    "\uff33\014\uff33\015\uff33\016\uff33\035\uff33\036\uff33\037\uff33" +
    "\040\uff33\042\uff33\046\uff33\047\uff33\054\uff33\101\uff33\107" +
    "\uff33\111\uff33\115\uff33\116\uff33\117\uff33\120\uff33\121\uff33" +
    "\122\uff33\123\uff33\124\uff33\001\002\000\062\006\uff3d\007" +
    "\uff3d\014\uff3d\015\uff3d\016\uff3d\035\uff3d\036\uff3d\037\uff3d" +
    "\040\uff3d\042\uff3d\046\uff3d\047\uff3d\054\uff3d\101\uff3d\107" +
    "\uff3d\111\uff3d\115\uff3d\116\uff3d\117\uff3d\120\uff3d\121\uff3d" +
    "\122\uff3d\123\uff3d\124\uff3d\001\002\000\062\006\uff38\007" +
    "\uff38\014\uff38\015\uff38\016\uff38\035\uff38\036\uff38\037\uff38" +
    "\040\uff38\042\uff38\046\uff38\047\uff38\054\uff38\101\uff38\107" +
    "\uff38\111\uff38\115\uff38\116\uff38\117\uff38\120\uff38\121\uff38" +
    "\122\uff38\123\uff38\124\uff38\001\002\000\064\006\uff32\007" +
    "\uff32\014\uff32\015\uff32\016\uff32\026\uff21\035\uff32\036\uff32" +
    "\037\uff32\040\uff32\042\uff32\046\uff32\047\uff32\054\uff32\101" +
    "\uff32\107\uff32\111\uff32\115\uff32\116\uff32\117\uff32\120\uff32" +
    "\121\uff32\122\uff32\123\uff32\124\uff32\001\002\000\004\026" +
    "\uff20\001\002\000\004\026\uff23\001\002\000\062\006\uff37" +
    "\007\uff37\014\uff37\015\uff37\016\uff37\035\uff37\036\uff37\037" +
    "\uff37\040\uff37\042\uff37\046\uff37\047\uff37\054\uff37\101\uff37" +
    "\107\uff37\111\uff37\115\uff37\116\uff37\117\uff37\120\uff37\121" +
    "\uff37\122\uff37\123\uff37\124\uff37\001\002\000\062\006\226" +
    "\007\071\014\047\015\050\016\056\035\221\036\232\037" +
    "\214\040\210\042\205\046\222\047\201\054\207\101\227" +
    "\107\217\111\065\115\177\116\204\117\233\120\175\121" +
    "\231\122\055\123\063\124\176\001\002\000\006\103\uff3c" +
    "\113\uff3c\001\002\000\066\006\uff1b\007\uff1b\014\uff1b\015" +
    "\uff1b\016\uff1b\035\uff1b\036\uff1b\037\uff1b\040\uff1b\042\uff1b" +
    "\046\uff1b\047\uff1b\054\uff1b\101\uff1b\107\uff1b\111\uff1b\113" +
    "\uff1b\115\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b" +
    "\123\uff1b\124\uff1b\125\uff1b\001\002\000\004\103\uff1e\001" +
    "\002\000\004\103\u0175\001\002\000\066\006\226\007\071" +
    "\014\047\015\050\016\056\035\221\036\232\037\214\040" +
    "\210\042\205\046\222\047\201\054\207\101\227\107\217" +
    "\111\065\113\uff90\115\177\116\204\117\233\120\175\121" +
    "\231\122\367\123\373\124\176\125\u012f\001\002\000\004" +
    "\113\u016b\001\002\000\050\006\uff14\007\uff14\014\uff14\015" +
    "\uff14\016\uff14\035\uff14\036\uff14\046\uff14\101\uff14\107\uff14" +
    "\111\uff14\115\uff14\116\uff14\117\uff14\120\uff14\121\uff14\122" +
    "\uff14\123\uff14\124\uff14\001\002\000\004\113\u015c\001\002" +
    "\000\004\066\u015b\001\002\000\050\006\226\007\071\014" +
    "\047\015\050\016\056\035\221\036\232\046\074\101\046" +
    "\107\217\111\065\115\177\116\204\117\233\120\175\121" +
    "\231\122\055\123\063\124\176\001\002\000\004\103\uff1d" +
    "\001\002\000\006\111\u0135\125\u0136\001\002\000\064\006" +
    "\226\007\071\014\047\015\050\016\056\035\221\036\232" +
    "\037\214\040\210\042\205\046\222\047\201\054\207\101" +
    "\227\105\u014d\107\217\111\065\115\177\116\204\117\233" +
    "\120\175\121\231\122\055\123\063\124\176\001\002\000" +
    "\006\106\u013b\107\u013a\001\002\000\126\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9" +
    "\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9" +
    "\125\uffa9\001\002\000\126\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\125\uffa5\001" +
    "\002\000\126\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\110" +
    "\uffa6\111\uffa6\112\uffa6\113\uffa6\125\uffa6\001\002\000\064" +
    "\006\226\007\071\014\047\015\050\016\056\035\221\036" +
    "\232\037\214\040\210\042\205\046\222\047\201\054\207" +
    "\101\227\107\217\110\uffa1\111\065\115\177\116\204\117" +
    "\233\120\175\121\231\122\055\123\063\124\176\001\002" +
    "\000\004\107\u013c\001\002\000\032\006\064\007\071\014" +
    "\047\015\050\016\056\027\u013e\046\074\101\046\107\051" +
    "\111\065\122\055\123\063\001\002\000\004\110\u0140\001" +
    "\002\000\004\110\u013f\001\002\000\004\113\uff16\001\002" +
    "\000\126\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4" +
    "\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\110\uffa4" +
    "\111\uffa4\112\uffa4\113\uffa4\125\uffa4\001\002\000\012\102" +
    "\u0149\104\uff9d\107\uff86\110\uff9d\001\002\000\006\104\uffa0" +
    "\110\uffa0\001\002\000\006\104\u0147\110\uff92\001\002\000" +
    "\004\110\u0145\001\002\000\126\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104" +
    "\uffa3\105\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\125\uffa3" +
    "\001\002\000\004\110\uffa2\001\002\000\006\102\u0148\110" +
    "\uff94\001\002\000\004\110\uff93\001\002\000\062\006\226" +
    "\007\071\014\047\015\050\016\056\035\221\036\232\037" +
    "\214\040\210\042\205\046\222\047\201\054\207\101\227" +
    "\107\217\111\065\115\177\116\204\117\233\120\175\121" +
    "\231\122\055\123\063\124\176\001\002\000\006\104\uff9f" +
    "\110\uff9f\001\002\000\006\104\uff9e\110\uff9e\001\002\000" +
    "\126\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\110\uff9b\111" +
    "\uff9b\112\uff9b\113\uff9b\125\uff9b\001\002\000\064\006\226" +
    "\007\071\014\047\015\050\016\056\035\221\036\232\037" +
    "\214\040\210\042\205\046\222\047\201\054\207\101\227" +
    "\107\217\111\065\112\u0154\115\177\116\204\117\233\120" +
    "\175\121\231\122\055\123\063\124\176\001\002\000\054" +
    "\037\240\040\257\041\236\042\254\043\241\044\237\045" +
    "\243\046\263\047\261\050\246\051\251\052\253\053\235" +
    "\071\247\072\242\073\255\074\245\075\252\100\250\105" +
    "\u014f\112\u0150\001\002\000\064\006\226\007\071\014\047" +
    "\015\050\016\056\035\221\036\232\037\214\040\210\042" +
    "\205\046\222\047\201\054\207\101\227\107\217\111\065" +
    "\112\uff90\115\177\116\204\117\233\120\175\121\231\122" +
    "\055\123\063\124\176\001\002\000\126\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103" +
    "\uff9a\104\uff9a\105\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a" +
    "\125\uff9a\001\002\000\126\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\125\uff9c\001" +
    "\002\000\004\112\u0153\001\002\000\126\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\053\uff99\055\uff99\056\uff99" +
    "\057\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103" +
    "\uff99\104\uff99\105\uff99\110\uff99\111\uff99\112\uff99\113\uff99" +
    "\125\uff99\001\002\000\126\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98\057\uff98\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98" +
    "\105\uff98\110\uff98\111\uff98\112\uff98\113\uff98\125\uff98\001" +
    "\002\000\054\037\240\040\257\041\236\042\254\043\241" +
    "\044\237\045\243\046\263\047\261\050\246\051\251\052" +
    "\253\053\235\071\247\072\242\073\255\074\245\075\252" +
    "\100\250\105\u0156\112\u0157\001\002\000\062\006\226\007" +
    "\071\014\047\015\050\016\056\035\221\036\232\037\214" +
    "\040\210\042\205\046\222\047\201\054\207\101\227\107" +
    "\217\111\065\115\177\116\204\117\233\120\175\121\231" +
    "\122\055\123\063\124\176\001\002\000\126\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056" +
    "\uff95\057\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95" +
    "\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\110\uff95\111\uff95\112\uff95\113" +
    "\uff95\125\uff95\001\002\000\126\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\055\uff97\056\uff97\057\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97\104" +
    "\uff97\105\uff97\110\uff97\111\uff97\112\uff97\113\uff97\125\uff97" +
    "\001\002\000\052\037\240\040\257\041\236\042\254\043" +
    "\241\044\237\045\243\046\263\047\261\050\246\051\251" +
    "\052\253\053\235\071\247\072\242\073\255\074\245\075" +
    "\252\100\250\112\u015a\001\002\000\126\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96" +
    "\057\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96" +
    "\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103" +
    "\uff96\104\uff96\105\uff96\110\uff96\111\uff96\112\uff96\113\uff96" +
    "\125\uff96\001\002\000\050\006\uff15\007\uff15\014\uff15\015" +
    "\uff15\016\uff15\035\uff15\036\uff15\046\uff15\101\uff15\107\uff15" +
    "\111\uff15\115\uff15\116\uff15\117\uff15\120\uff15\121\uff15\122" +
    "\uff15\123\uff15\124\uff15\001\002\000\010\005\u015d\011\u015f" +
    "\114\uff12\001\002\000\004\105\uff10\001\002\000\004\114" +
    "\u016a\001\002\000\030\006\064\007\071\014\047\015\050" +
    "\016\056\046\074\101\046\107\051\111\065\122\055\123" +
    "\063\001\002\000\004\105\u0161\001\002\000\130\004\321" +
    "\005\uff2f\006\226\007\071\010\310\011\uff2f\012\276\013" +
    "\274\014\047\015\050\016\056\020\305\022\315\023\030" +
    "\024\312\025\327\027\023\030\326\031\316\033\320\034" +
    "\022\035\221\036\232\037\214\040\210\042\205\046\222" +
    "\047\201\054\207\101\227\103\uff44\107\217\111\065\113" +
    "\270\114\uff2f\115\177\116\204\117\233\120\175\121\231" +
    "\122\272\123\063\124\322\001\002\000\010\005\u015d\011" +
    "\u015f\114\uff12\001\002\000\004\114\uff13\001\002\000\004" +
    "\105\uff11\001\002\000\006\102\u0166\105\uff0b\001\002\000" +
    "\030\006\064\007\071\014\047\015\050\016\056\046\074" +
    "\101\046\107\051\111\065\122\055\123\063\001\002\000" +
    "\004\105\uff0d\001\002\000\006\102\u0166\105\uff0b\001\002" +
    "\000\004\105\uff0c\001\002\000\004\103\uff19\001\002\000" +
    "\010\005\u016c\011\u016e\114\uff17\001\002\000\004\105\uff0e" +
    "\001\002\000\004\114\u0174\001\002\000\062\006\226\007" +
    "\071\014\047\015\050\016\056\035\221\036\232\037\214" +
    "\040\210\042\205\046\222\047\201\054\207\101\227\107" +
    "\217\111\065\115\177\116\204\117\233\120\175\121\231" +
    "\122\055\123\063\124\176\001\002\000\004\105\u0170\001" +
    "\002\000\130\004\321\005\uff2f\006\226\007\071\010\310" +
    "\011\uff2f\012\276\013\274\014\047\015\050\016\056\020" +
    "\305\022\315\023\030\024\312\025\327\027\023\030\326" +
    "\031\316\033\320\034\022\035\221\036\232\037\214\040" +
    "\210\042\205\046\222\047\201\054\207\101\227\103\uff44" +
    "\107\217\111\065\113\270\114\uff2f\115\177\116\204\117" +
    "\233\120\175\121\231\122\272\123\063\124\322\001\002" +
    "\000\010\005\u016c\011\u016e\114\uff17\001\002\000\004\114" +
    "\uff18\001\002\000\004\105\uff0f\001\002\000\004\103\uff1a" +
    "\001\002\000\066\006\uff1c\007\uff1c\014\uff1c\015\uff1c\016" +
    "\uff1c\035\uff1c\036\uff1c\037\uff1c\040\uff1c\042\uff1c\046\uff1c" +
    "\047\uff1c\054\uff1c\101\uff1c\107\uff1c\111\uff1c\113\uff1c\115" +
    "\uff1c\116\uff1c\117\uff1c\120\uff1c\121\uff1c\122\uff1c\123\uff1c" +
    "\124\uff1c\125\uff1c\001\002\000\062\006\uff32\007\uff32\014" +
    "\uff32\015\uff32\016\uff32\035\uff32\036\uff32\037\uff32\040\uff32" +
    "\042\uff32\046\uff32\047\uff32\054\uff32\101\uff32\107\uff32\111" +
    "\uff32\115\uff32\116\uff32\117\uff32\120\uff32\121\uff32\122\uff32" +
    "\123\uff32\124\uff32\001\002\000\010\005\u0179\011\u017a\114" +
    "\ufefe\001\002\000\004\105\u0188\001\002\000\004\105\ufefc" +
    "\001\002\000\062\006\226\007\071\014\047\015\050\016" +
    "\056\035\221\036\232\037\214\040\210\042\205\046\222" +
    "\047\201\054\207\101\227\107\217\111\065\115\177\116" +
    "\204\117\233\120\175\121\231\122\055\123\063\124\176" +
    "\001\002\000\004\114\u017c\001\002\000\004\103\uff00\001" +
    "\002\000\062\006\226\007\071\014\047\015\050\016\056" +
    "\035\221\036\232\037\214\040\210\042\205\046\222\047" +
    "\201\054\207\101\227\107\217\111\065\115\177\116\204" +
    "\117\233\120\175\121\231\122\055\123\063\124\176\001" +
    "\002\000\006\065\u0186\066\u0184\001\002\000\004\105\ufefa" +
    "\001\002\000\060\037\240\040\257\041\236\042\254\043" +
    "\241\044\237\045\243\046\263\047\261\050\246\051\251" +
    "\052\253\053\235\065\uff8a\066\uff8a\071\247\072\242\073" +
    "\255\074\245\075\252\100\250\101\u0182\102\336\001\002" +
    "\000\004\105\ufefd\001\002\000\062\006\226\007\071\014" +
    "\047\015\050\016\056\035\221\036\232\037\214\040\210" +
    "\042\205\046\222\047\201\054\207\101\227\107\217\111" +
    "\065\115\177\116\204\117\233\120\175\121\231\122\055" +
    "\123\063\124\176\001\002\000\052\037\240\040\257\041" +
    "\236\042\254\043\241\044\237\045\243\046\263\047\261" +
    "\050\246\051\251\052\253\053\235\071\247\072\242\073" +
    "\255\074\245\075\252\100\250\105\ufefb\001\002\000\062" +
    "\006\ufef6\007\ufef6\014\ufef6\015\ufef6\016\ufef6\035\ufef6\036" +
    "\ufef6\037\ufef6\040\ufef6\042\ufef6\046\ufef6\047\ufef6\054\ufef6" +
    "\101\ufef6\107\ufef6\111\ufef6\115\ufef6\116\ufef6\117\ufef6\120" +
    "\ufef6\121\ufef6\122\ufef6\123\ufef6\124\ufef6\001\002\000\062" +
    "\006\ufef8\007\ufef8\014\ufef8\015\ufef8\016\ufef8\035\ufef8\036" +
    "\ufef8\037\ufef8\040\ufef8\042\ufef8\046\ufef8\047\ufef8\054\ufef8" +
    "\101\ufef8\107\ufef8\111\ufef8\115\ufef8\116\ufef8\117\ufef8\120" +
    "\ufef8\121\ufef8\122\ufef8\123\ufef8\124\ufef8\001\002\000\062" +
    "\006\ufef7\007\ufef7\014\ufef7\015\ufef7\016\ufef7\035\ufef7\036" +
    "\ufef7\037\ufef7\040\ufef7\042\ufef7\046\ufef7\047\ufef7\054\ufef7" +
    "\101\ufef7\107\ufef7\111\ufef7\115\ufef7\116\ufef7\117\ufef7\120" +
    "\ufef7\121\ufef7\122\ufef7\123\ufef7\124\ufef7\001\002\000\052" +
    "\037\240\040\257\041\236\042\254\043\241\044\237\045" +
    "\243\046\263\047\261\050\246\051\251\052\253\053\235" +
    "\071\247\072\242\073\255\074\245\075\252\100\250\105" +
    "\ufef9\001\002\000\130\004\321\005\uff2f\006\226\007\071" +
    "\010\310\011\uff2f\012\276\013\274\014\047\015\050\016" +
    "\056\020\305\022\315\023\030\024\312\025\327\027\023" +
    "\030\326\031\316\033\320\034\022\035\221\036\232\037" +
    "\214\040\210\042\205\046\222\047\201\054\207\101\227" +
    "\103\uff44\107\217\111\065\113\270\114\uff2f\115\177\116" +
    "\204\117\233\120\175\121\231\122\272\123\063\124\322" +
    "\001\002\000\010\005\u0179\011\u017a\114\ufefe\001\002\000" +
    "\004\114\ufeff\001\002\000\004\103\ufef2\001\002\000\052" +
    "\037\240\040\257\041\236\042\254\043\241\044\237\045" +
    "\243\046\263\047\261\050\246\051\251\052\253\053\235" +
    "\071\247\072\242\073\255\074\245\075\252\100\250\103" +
    "\uff0a\001\002\000\052\037\240\040\257\041\236\042\254" +
    "\043\241\044\237\045\243\046\263\047\261\050\246\051" +
    "\251\052\253\053\235\071\247\072\242\073\255\074\245" +
    "\075\252\100\250\103\ufeec\001\002\000\130\004\321\005" +
    "\uff2f\006\226\007\071\010\310\011\uff2f\012\276\013\274" +
    "\014\047\015\050\016\056\020\305\022\315\023\030\024" +
    "\312\025\327\027\023\030\326\031\316\033\320\034\022" +
    "\035\221\036\232\037\214\040\210\042\205\046\222\047" +
    "\201\054\207\101\227\103\uff44\107\217\111\065\113\270" +
    "\114\uff2f\115\177\116\204\117\233\120\175\121\231\122" +
    "\272\123\063\124\322\001\002\000\010\005\uff30\011\uff30" +
    "\114\uff30\001\002\000\122\004\321\006\226\007\071\010" +
    "\310\012\276\013\274\014\047\015\050\016\056\020\305" +
    "\022\315\023\030\024\312\025\327\027\023\030\326\031" +
    "\316\033\320\034\022\035\221\036\232\037\214\040\210" +
    "\042\205\046\222\047\201\054\207\101\227\103\uff44\107" +
    "\217\111\065\113\270\115\177\116\204\117\233\120\175" +
    "\121\231\122\272\123\063\124\322\001\002\000\004\103" +
    "\uff48\001\002\000\030\065\ufe94\102\ufe94\103\ufe94\104\ufe94" +
    "\105\ufe94\107\ufe94\110\ufe94\112\ufe94\113\ufe94\115\ufe94\124" +
    "\ufe94\001\002\000\062\006\226\007\071\014\047\015\050" +
    "\016\056\035\221\036\232\037\214\040\210\042\205\046" +
    "\222\047\201\054\207\101\227\107\217\111\065\115\177" +
    "\116\204\117\233\120\175\121\231\122\055\123\063\124" +
    "\176\001\002\000\126\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\055\uff89\056\uff89\057\uff89\061\uff89" +
    "\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89" +
    "\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105" +
    "\uff89\110\uff89\111\uff89\112\uff89\113\uff89\125\uff89\001\002" +
    "\000\054\037\240\040\257\041\236\042\254\043\241\044" +
    "\237\045\243\046\263\047\261\050\246\051\251\052\253" +
    "\053\235\071\247\072\242\073\255\074\245\075\252\100" +
    "\250\102\u0197\110\ufead\001\002\000\004\110\u0198\001\002" +
    "\000\004\110\ufeae\001\002\000\126\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\055\uff88\056\uff88\057" +
    "\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88" +
    "\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075" +
    "\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88" +
    "\104\uff88\105\uff88\110\uff88\111\uff88\112\uff88\113\uff88\125" +
    "\uff88\001\002\000\006\106\u019a\107\u013a\001\002\000\004" +
    "\107\u019b\001\002\000\030\006\064\007\071\014\047\015" +
    "\050\016\056\046\074\101\046\107\051\111\065\122\055" +
    "\123\063\001\002\000\052\037\240\040\257\041\236\042" +
    "\254\043\241\044\237\045\243\046\263\047\261\050\246" +
    "\051\251\052\253\053\235\071\247\072\242\073\255\074" +
    "\245\075\252\100\250\110\u019d\001\002\000\126\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\110\uffb1\111\uffb1\112\uffb1" +
    "\113\uffb1\125\uffb1\001\002\000\030\006\064\007\071\014" +
    "\047\015\050\016\056\046\074\101\046\107\051\111\065" +
    "\122\055\123\063\001\002\000\030\065\ufec1\102\ufec1\103" +
    "\ufec1\104\ufec1\105\ufec1\107\ufec1\110\ufec1\112\ufec1\113\ufec1" +
    "\115\ufec1\124\ufec1\001\002\000\122\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\055\uffac\056\uffac\057" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\110\uffac\112\uffac\113\uffac\001\002\000" +
    "\030\065\ufebd\102\ufebd\103\ufebd\104\ufebd\105\ufebd\107\ufebd" +
    "\110\ufebd\112\ufebd\113\ufebd\115\ufebd\124\ufebd\001\002\000" +
    "\030\006\ufe8f\007\ufe8f\014\ufe8f\015\ufe8f\016\ufe8f\046\ufe8f" +
    "\101\ufe8f\107\ufe8f\111\ufe8f\122\ufe8f\123\ufe8f\001\002\000" +
    "\062\006\226\007\071\014\047\015\050\016\056\035\221" +
    "\036\232\037\214\040\210\042\205\046\222\047\201\054" +
    "\207\101\227\107\217\111\065\115\177\116\204\117\233" +
    "\120\175\121\231\122\055\123\063\124\176\001\002\000" +
    "\004\103\uff78\001\002\000\004\110\u01a6\001\002\000\030" +
    "\065\ufecf\102\ufecf\103\ufecf\104\ufecf\105\ufecf\107\ufecf\110" +
    "\ufecf\112\ufecf\113\ufecf\115\ufecf\124\ufecf\001\002\000\012" +
    "\046\ufee5\114\ufee5\122\ufee5\123\ufee5\001\002\000\012\046" +
    "\u01ab\114\u01af\122\u01ac\123\u01ad\001\002\000\006\103\ufee1" +
    "\115\ufee1\001\002\000\006\103\ufedc\115\u01bc\001\002\000" +
    "\006\122\055\123\063\001\002\000\040\006\ufed4\007\ufed4" +
    "\014\ufed4\015\ufed4\016\ufed4\046\ufed4\101\ufed4\102\u0101\103" +
    "\ufede\106\u01b6\107\ufed4\111\ufed4\115\ufede\122\ufed4\123\ufed4" +
    "\001\002\000\032\006\ufed4\007\ufed4\014\ufed4\015\ufed4\016" +
    "\ufed4\046\ufed4\101\ufed4\102\u0101\107\ufed4\111\ufed4\122\ufed4" +
    "\123\ufed4\001\002\000\004\103\u01b0\001\002\000\030\065" +
    "\ufee7\102\ufee7\103\ufee7\104\ufee7\105\ufee7\107\ufee7\110\ufee7" +
    "\112\ufee7\113\ufee7\115\ufee7\124\ufee7\001\002\000\012\046" +
    "\ufee6\114\ufee6\122\ufee6\123\ufee6\001\002\000\030\006\064" +
    "\007\071\014\047\015\050\016\056\046\074\101\046\107" +
    "\051\111\065\122\055\123\063\001\002\000\006\103\ufee2" +
    "\115\ufee2\001\002\000\006\103\ufedd\115\ufedd\001\002\000" +
    "\030\006\064\007\071\014\047\015\050\016\056\046\074" +
    "\101\046\107\051\111\065\122\055\123\063\001\002\000" +
    "\006\103\ufee3\115\ufee3\001\002\000\004\122\u01b7\001\002" +
    "\000\006\103\ufedf\115\ufedf\001\002\000\006\103\ufee0\115" +
    "\ufee0\001\002\000\006\103\ufed9\115\ufed9\001\002\000\004" +
    "\103\ufee4\001\002\000\004\103\ufedb\001\002\000\004\103" +
    "\ufeda\001\002\000\030\006\064\007\071\014\047\015\050" +
    "\016\056\046\074\101\046\107\051\111\065\122\055\123" +
    "\063\001\002\000\004\112\u01c0\001\002\000\004\112\ufe92" +
    "\001\002\000\030\006\064\007\071\014\047\015\050\016" +
    "\056\046\074\101\046\107\051\111\065\122\055\123\063" +
    "\001\002\000\030\065\ufe93\102\ufe93\103\ufe93\104\ufe93\105" +
    "\ufe93\107\ufe93\110\ufe93\112\ufe93\113\ufe93\115\ufe93\124\ufe93" +
    "\001\002\000\014\002\uff62\006\015\023\030\027\023\034" +
    "\022\001\002\000\004\002\uff63\001\002\000\004\103\uff55" +
    "\001\002\000\006\110\uff52\122\uff52\001\002\000\032\006" +
    "\ufeea\007\ufeea\014\ufeea\015\ufeea\016\ufeea\046\ufeea\065\u01c9" +
    "\101\ufeea\107\ufeea\111\ufeea\122\ufeea\123\ufeea\001\002\000" +
    "\004\103\uff56\001\002\000\030\006\064\007\071\014\047" +
    "\015\050\016\056\046\074\101\046\107\051\111\065\122" +
    "\055\123\063\001\002\000\030\006\ufeeb\007\ufeeb\014\ufeeb" +
    "\015\ufeeb\016\ufeeb\046\ufeeb\101\ufeeb\107\ufeeb\111\ufeeb\122" +
    "\ufeeb\123\ufeeb\001\002\000\004\103\uff51\001\002\000\006" +
    "\110\u01cd\122\u01c6\001\002\000\004\103\u01ce\001\002\000" +
    "\004\103\uff54\001\002\000\006\110\uff53\122\uff53\001\002" +
    "\000\032\006\064\007\071\014\047\015\050\016\056\046" +
    "\074\065\u01d9\101\046\107\051\111\065\122\055\123\063" +
    "\001\002\000\004\103\uff50\001\002\000\006\110\uff4c\122" +
    "\uff4c\001\002\000\004\103\uff4f\001\002\000\006\110\u01d5" +
    "\122\035\001\002\000\004\103\u01d6\001\002\000\004\103" +
    "\uff4e\001\002\000\006\110\uff4d\122\uff4d\001\002\000\004" +
    "\103\uff4b\001\002\000\006\065\u01dc\103\ufee8\001\002\000" +
    "\062\006\226\007\071\014\047\015\050\016\056\035\221" +
    "\036\232\037\214\040\210\042\205\046\222\047\201\054" +
    "\207\101\227\107\217\111\065\115\177\116\204\117\233" +
    "\120\175\121\231\122\055\123\063\124\176\001\002\000" +
    "\004\103\uff49\001\002\000\004\103\uff4a\001\002\000\062" +
    "\006\226\007\071\014\047\015\050\016\056\035\221\036" +
    "\232\037\214\040\210\042\205\046\222\047\201\054\207" +
    "\101\227\107\217\111\065\115\177\116\204\117\233\120" +
    "\175\121\231\122\055\123\063\124\176\001\002\000\004" +
    "\103\ufee9\001\002\000\004\122\u01e4\001\002\000\004\107" +
    "\uff5e\001\002\000\004\107\115\001\002\000\006\103\uff5b" +
    "\113\270\001\002\000\004\103\uff5d\001\002\000\004\103" +
    "\uff5c\001\002\000\004\107\115\001\002\000\006\103\uff5b" +
    "\113\270\001\002\000\004\103\uff5a\001\002\000\016\002" +
    "\uffc0\006\uffc0\023\uffc0\027\uffc0\032\012\034\uffc0\001\002" +
    "\000\014\002\uffc1\006\uffc1\023\uffc1\027\uffc1\034\uffc1\001" +
    "\002\000\004\103\uffbf\001\002\000\004\115\u01f4\001\002" +
    "\000\004\103\uffbe\001\002\000\012\106\u01ee\110\uffbb\115" +
    "\uffb7\122\u01ed\001\002\000\004\115\uffb8\001\002\000\004" +
    "\115\uffb9\001\002\000\004\103\u01f2\001\002\000\004\110" +
    "\u01f1\001\002\000\004\103\uffbd\001\002\000\012\106\u01ee" +
    "\110\uffbb\115\uffb7\122\u01ed\001\002\000\004\110\uffbc\001" +
    "\002\000\004\103\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f2\000\006\143\005\144\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\145\012\146\013\001\001\000" +
    "\010\147\u01e8\150\u01ea\152\u01e9\001\001\000\002\001\001" +
    "\000\022\153\017\154\023\155\024\156\025\160\016\177" +
    "\026\223\015\231\020\001\001\000\004\035\u01dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\206\u01ce\232\u01cf\235\u01d1\001\001" +
    "\000\006\224\u01c6\226\u01c3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\200\032\203\030\206\031\001\001\000\002\001\001\000" +
    "\036\002\052\012\060\013\057\015\061\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\202" +
    "\075\210\051\001\001\000\002\001\001\000\004\201\041" +
    "\001\001\000\004\314\035\001\001\000\004\205\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\200\042\206\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\052\012\u01a4\013" +
    "\057\015\061\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\u01a0\035\111\001\001\000\060\002\052\013\202\015" +
    "\201\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\031\211\032\067\072\072\076\210\100\214\101\212\104" +
    "\205\111\227\113\215\114\217\117\224\121\222\161\233" +
    "\163\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\052\012\101\013\057\015\061\020\100\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\001\001\000\034\002\052\012\076\013\057\015\061\021" +
    "\065\022\077\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\103\001\001\000\004\047" +
    "\105\001\001\000\012\033\110\035\111\050\113\051\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\052\013\155\015\156" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\034\153\072\072\073\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\052\013\122\014\120\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\036\125\037\131\043\130\064\126\072\072\176\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\052" +
    "\012\151\013\057\015\061\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\001\001\000\004" +
    "\040\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\052\012\140\013\057\015\061" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\044\137\072\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\052\012\132\013\057\015\061\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\134\001\001\000\036\002\052\013\122\014\120" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\037\135\043\130\072\072\176\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\147\001\001\000\004\176\145\001\001" +
    "\000\032\002\052\012\143\013\057\015\061\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\001\001\000\004\040\144\001\001\000\002\001\001\000" +
    "\034\002\052\012\140\013\057\015\061\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\044\146\072" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\052\013\163\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\074\162\176\164\001\001\000\032\002\052\012\172\013" +
    "\057\015\061\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\166\075\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\176\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\052\013\202\015" +
    "\367\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\121\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\214\101" +
    "\212\104\205\113\u019f\114\217\117\224\121\222\161\233" +
    "\163\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\214\101" +
    "\212\104\205\111\u019b\113\215\114\217\117\224\121\222" +
    "\161\233\163\177\001\001\000\010\130\u0136\131\u0138\137" +
    "\u0137\001\001\000\002\001\001\000\034\002\052\012\076" +
    "\013\057\015\061\021\065\022\077\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\001\001\000\004" +
    "\120\u0193\001\001\000\034\002\052\012\101\013\057\015" +
    "\061\020\u0191\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\001\001\000\002\001\001\000" +
    "\006\033\265\035\111\001\001\000\002\001\001\000\012" +
    "\105\243\106\257\107\261\110\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\002\052\013\202\015\201\021\065" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\072" +
    "\072\076\210\100\214\101\212\104\205\111\263\113\215" +
    "\114\217\117\224\121\222\161\233\163\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\105\243\106\257\107" +
    "\261\110\255\001\001\000\002\001\001\000\004\245\266" +
    "\001\001\000\002\001\001\000\132\002\052\013\202\015" +
    "\201\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\076\210\100\214\101\212\104\205\111" +
    "\327\112\313\113\215\114\217\117\224\121\222\153\310" +
    "\161\233\163\177\177\026\211\272\212\322\214\270\217" +
    "\324\223\015\231\020\236\276\237\312\240\300\241\301" +
    "\242\277\243\323\244\330\245\302\246\303\247\306\256" +
    "\305\264\316\273\274\001\001\000\002\001\001\000\004" +
    "\016\u0105\001\001\000\002\001\001\000\056\002\052\013" +
    "\202\015\201\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\076\210\100\214\101\212\104" +
    "\205\111\u018c\113\215\114\217\117\224\121\222\161\233" +
    "\163\177\001\001\000\002\001\001\000\056\002\052\013" +
    "\202\015\201\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\076\210\100\214\101\212\104" +
    "\205\111\u018b\113\215\114\217\117\224\121\222\161\233" +
    "\163\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\u018a\176\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\220\u0121\001" +
    "\001\000\070\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\214\101\212\104\205\111\327\112\313\113\215" +
    "\114\217\117\224\121\222\161\233\163\177\214\u012b\217" +
    "\324\263\u012c\274\u012a\001\001\000\074\002\052\013\202" +
    "\015\201\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\076\210\100\214\101\212\104\205" +
    "\111\u0110\112\u010b\113\215\114\217\117\224\121\222\161" +
    "\233\163\177\214\u010f\217\324\265\u010d\266\u010c\267\u0111" +
    "\271\u010e\001\001\000\002\001\001\000\062\002\052\013" +
    "\202\015\201\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\076\210\100\214\101\212\104" +
    "\205\111\377\112\u0109\113\215\114\217\117\224\121\222" +
    "\161\233\163\177\207\u010a\001\001\000\006\055\u0108\176" +
    "\364\001\001\000\040\002\052\005\374\013\202\015\367" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\121\370\176\371\215\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\055" +
    "\363\176\364\001\001\000\004\260\347\001\001\000\016" +
    "\105\243\106\257\107\261\110\255\216\334\311\340\001" +
    "\001\000\002\001\001\000\056\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\214\101\212\104\205\111\345" +
    "\113\215\114\217\117\224\121\222\161\233\163\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\002\052\013\202\015\201\021\065\023\071\024" +
    "\066\025\056\026\074\030\053\032\067\072\072\076\210" +
    "\100\214\101\212\104\205\111\342\113\215\114\217\117" +
    "\224\121\222\161\233\163\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\105\243\106\257\107\261\110\255\311\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\105\243\106" +
    "\257\107\261\110\255\001\001\000\064\002\052\013\202" +
    "\015\201\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\076\210\100\214\101\212\104\205" +
    "\111\327\112\313\113\215\114\217\117\224\121\222\161" +
    "\233\163\177\214\361\217\324\001\001\000\056\002\052" +
    "\013\202\015\201\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\076\210\100\214\101\212" +
    "\104\205\111\350\113\215\114\217\117\224\121\222\161" +
    "\233\163\177\001\001\000\014\105\243\106\257\107\261" +
    "\110\255\317\351\001\001\000\004\245\352\001\001\000" +
    "\004\320\353\001\001\000\004\261\355\001\001\000\006" +
    "\256\356\321\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\245\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\214" +
    "\101\212\104\205\111\377\112\376\113\215\114\217\117" +
    "\224\121\222\161\233\163\177\001\001\000\002\001\001" +
    "\000\014\105\243\106\257\107\261\110\255\311\340\001" +
    "\001\000\004\176\u0102\001\001\000\002\001\001\000\004" +
    "\063\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\220" +
    "\u0121\272\u0125\001\001\000\002\001\001\000\004\245\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\105" +
    "\243\106\257\107\261\110\255\216\334\311\340\001\001" +
    "\000\002\001\001\000\060\002\052\013\202\015\201\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\076\210\100\214\101\212\104\205\111\u0114\113" +
    "\215\114\217\117\224\121\222\132\u0113\161\233\163\177" +
    "\001\001\000\002\001\001\000\012\105\243\106\257\107" +
    "\261\110\255\001\001\000\064\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\214\101\212\104\205\111\327" +
    "\112\313\113\215\114\217\117\224\121\222\161\233\163" +
    "\177\214\u0116\217\324\001\001\000\002\001\001\000\056" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\214" +
    "\101\212\104\205\111\u0118\113\215\114\217\117\224\121" +
    "\222\161\233\163\177\001\001\000\012\105\243\106\257" +
    "\107\261\110\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\316\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\214\101\212\104\205\111\377\112\u0128\113\215\114\217" +
    "\117\224\121\222\161\233\163\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\002\052\013\202\015\201\021\065\023\071\024" +
    "\066\025\056\026\074\030\053\032\067\072\072\076\210" +
    "\100\214\101\212\104\205\111\u0114\113\215\114\217\117" +
    "\224\121\222\132\u012d\161\233\163\177\176\u0130\275\u0132" +
    "\301\u012f\303\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\002\052" +
    "\013\202\015\201\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\076\210\100\214\101\212" +
    "\114\u0133\117\224\121\222\161\233\163\177\001\001\000" +
    "\002\001\001\000\010\130\u0136\131\u0138\137\u0137\001\001" +
    "\000\060\002\052\013\202\015\201\021\065\023\071\024" +
    "\066\025\056\026\074\030\053\032\067\072\072\076\210" +
    "\100\214\101\212\104\205\111\u014d\113\215\114\217\117" +
    "\224\121\222\135\u014b\161\233\163\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\002\052\013\u0140\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\214\101\212\104\205\111\377\112\u0141\113\215" +
    "\114\217\117\224\121\222\140\u0143\141\u0142\161\233\163" +
    "\177\001\001\000\002\001\001\000\032\002\052\012\u013c" +
    "\013\057\015\061\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\142\u0149\001\001\000\002\001\001\000\004\056\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\052" +
    "\013\202\015\201\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\076\210\100\214\101\212" +
    "\104\205\111\377\112\u014a\113\215\114\217\117\224\121" +
    "\222\161\233\163\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\002\052\013\202\015" +
    "\201\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\076\210\100\214\101\212\104\205\111" +
    "\u0154\113\215\114\217\117\224\121\222\161\233\163\177" +
    "\001\001\000\014\105\243\106\257\107\261\110\255\134" +
    "\u0150\001\001\000\060\002\052\013\202\015\201\021\065" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\072" +
    "\072\076\210\100\214\101\212\104\205\111\u0114\113\215" +
    "\114\217\117\224\121\222\132\u0151\161\233\163\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\105\243\106" +
    "\257\107\261\110\255\136\u0157\001\001\000\056\002\052" +
    "\013\202\015\201\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\076\210\100\214\101\212" +
    "\104\205\111\u0158\113\215\114\217\117\224\121\222\161" +
    "\233\163\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\105\243\106\257\107\261\110\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\302\u015d\304\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\052\012\u0164\013\057\015\061\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\306\u0163\001" +
    "\001\000\002\001\001\000\132\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\214\101\212\104\205\111\327" +
    "\112\313\113\215\114\217\117\224\121\222\153\310\161" +
    "\233\163\177\177\026\211\272\212\u0161\214\270\217\324" +
    "\223\015\231\020\236\276\237\312\240\300\241\301\242" +
    "\277\243\323\244\330\245\302\246\303\247\306\256\305" +
    "\264\316\273\274\001\001\000\006\302\u0162\304\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\305\u0166" +
    "\001\001\000\032\002\052\012\u0167\013\057\015\061\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\001\001\000\002\001\001\000\004\305\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\277\u016c" +
    "\300\u016e\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\214\101\212\104\205\111\377\112\u0172\113\215\114\217" +
    "\117\224\121\222\161\233\163\177\001\001\000\002\001" +
    "\001\000\132\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\214\101\212\104\205\111\327\112\313\113\215" +
    "\114\217\117\224\121\222\153\310\161\233\163\177\177" +
    "\026\211\272\212\u0170\214\270\217\324\223\015\231\020" +
    "\236\276\237\312\240\300\241\301\242\277\243\323\244" +
    "\330\245\302\246\303\247\306\256\305\264\316\273\274" +
    "\001\001\000\006\277\u0171\300\u016e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\250\u017a\251\u0177\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\002\052\013\202" +
    "\015\201\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\076\210\100\214\101\212\104\205" +
    "\111\u017f\112\u017d\113\215\114\217\117\224\121\222\161" +
    "\233\163\177\252\u0180\253\u017e\254\u017c\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\002\052\013\202\015" +
    "\201\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\076\210\100\214\101\212\104\205\111" +
    "\u0186\113\215\114\217\117\224\121\222\161\233\163\177" +
    "\001\001\000\004\255\u0184\001\001\000\002\001\001\000" +
    "\014\105\243\106\257\107\261\110\255\311\340\001\001" +
    "\000\002\001\001\000\056\002\052\013\202\015\201\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\076\210\100\214\101\212\104\205\111\u0182\113" +
    "\215\114\217\117\224\121\222\161\233\163\177\001\001" +
    "\000\012\105\243\106\257\107\261\110\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\105\243\106\257\107\261\110\255\001\001\000\132\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\214\101" +
    "\212\104\205\111\327\112\313\113\215\114\217\117\224" +
    "\121\222\153\310\161\233\163\177\177\026\211\272\212" +
    "\u0188\214\270\217\324\223\015\231\020\236\276\237\312" +
    "\240\300\241\301\242\277\243\323\244\330\245\302\246" +
    "\303\247\306\256\305\264\316\273\274\001\001\000\006" +
    "\250\u0189\251\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\105\243\106\257\107\261\110\255\001\001" +
    "\000\012\105\243\106\257\107\261\110\255\001\001\000" +
    "\132\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\214\101\212\104\205\111\327\112\313\113\215\114\217" +
    "\117\224\121\222\153\310\161\233\163\177\177\026\211" +
    "\272\212\u018e\214\270\217\324\223\015\231\020\236\276" +
    "\237\312\240\300\241\301\242\277\243\323\244\330\245" +
    "\302\246\303\247\306\256\305\264\316\273\274\001\001" +
    "\000\002\001\001\000\130\002\052\013\202\015\201\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\076\210\100\214\101\212\104\205\111\327\112" +
    "\313\113\215\114\217\117\224\121\222\153\310\161\233" +
    "\163\177\177\026\211\u0190\214\270\217\324\223\015\231" +
    "\020\236\276\237\312\240\300\241\301\242\277\243\323" +
    "\244\330\245\302\246\303\247\306\256\305\264\316\273" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\214" +
    "\101\212\104\205\111\u0194\113\215\114\217\117\224\121" +
    "\222\161\233\163\177\001\001\000\002\001\001\000\014" +
    "\053\u0195\105\243\106\257\107\261\110\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\052\012\u013c\013" +
    "\057\015\061\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\001\001\000\012\105\243\106" +
    "\257\107\261\110\255\001\001\000\002\001\001\000\034" +
    "\002\052\012\101\013\057\015\061\020\u019e\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\214\101\212\104\205\111\377" +
    "\112\u01a3\113\215\114\217\117\224\121\222\161\233\163" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u01a7\001\001\000\010\003\u01ad\010" +
    "\u01a8\057\u01a9\001\001\000\002\001\001\000\006\006\u01ba" +
    "\060\u01b9\001\001\000\004\015\u01b8\001\001\000\006\061" +
    "\u01b4\063\u01b3\001\001\000\006\062\u01b1\063\u01b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\052\012\u01b2\013\057\015\061\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\052" +
    "\012\u01b7\013\057\015\061\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\052\012\u01be\013\057\015" +
    "\061\021\065\023\071\024\066\025\056\026\074\027\u01bd" +
    "\030\053\032\067\072\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\052\012\101\013\057\015\061" +
    "\020\u01c0\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\001\001\000\002\001\001\000\022" +
    "\153\017\154\023\155\u01c2\156\025\160\016\177\026\223" +
    "\015\231\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\225\u01ca\001\001\000\004\227\u01c7\001\001\000" +
    "\002\001\001\000\032\002\052\012\u01c9\013\057\015\061" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\226\u01cb\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\052\012\u01d7\013\057" +
    "\015\061\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\234\u01d6\001\001\000\002\001\001" +
    "\000\004\233\u01d2\001\001\000\002\001\001\000\006\206" +
    "\u01ce\235\u01d3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\230\u01da\001" +
    "\001\000\060\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\214\101\212\104\205\111\377\112\u01d9\113\215" +
    "\114\217\117\224\121\222\161\233\163\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\052\013\202" +
    "\015\201\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\076\210\100\214\101\212\104\205" +
    "\111\377\112\u01dc\113\215\114\217\117\224\121\222\161" +
    "\233\163\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\315\u01df\001\001\000\006\033\u01e0\035\111\001" +
    "\001\000\006\157\u01e1\245\u01e2\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u01e4\035\111\001\001\000" +
    "\006\157\u01e5\245\u01e2\001\001\000\002\001\001\000\006" +
    "\145\012\146\u01e7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\150\u01ee" +
    "\151\u01ef\152\u01e9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\150\u01ee\151\u01f2\152\u01e9\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Syntax error: ");

        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            if(s.value != null) m.append( s.value.toString() );
            m.append( " - Line: " + s.getLeft().getLine() + " - Column: " + s.getLeft().getColumn() );
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("Error - " + message);
        System.exit(-1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Identifier ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;
		int bidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bid; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BasicLitStar ::= BasicLit BasicLitStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",198, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicLitStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",198, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicLit ::= INT_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression intLit = new Expression(Type.INT, i.toString());       RESULT = intLit;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicLit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression floatLit = new Expression(Type.FLOAT32, f.toString()); RESULT = floatLit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicLit ::= IMG_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicLit ::= RUNE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicLit ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression stringLit = new Expression(Type.STRING, s.toString()); RESULT = stringLit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BooleanLit ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression trueLit = new Expression(Type.BOOL, t.toString());  RESULT = trueLit;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLit",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BooleanLit ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression falseLit = new Expression(Type.BOOL, f.toString()); RESULT = falseLit;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLit",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnaryOp ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plus;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnaryOp ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minus; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryOp ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = not;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryOp ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xor;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOp ::= MUL 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mul;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UnaryOp ::= ADDRESS 
            {
              Object RESULT =null;
		int addrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addr;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UnaryOp ::= CHANNEL_OP 
            {
              Object RESULT =null;
		int copleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int copright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cop;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MulOp ::= MUL 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mul; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MulOp ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = div; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MulOp ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mod; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MulOp ::= LEFT_OP 
            {
              Object RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MulOp ::= RIGHT_OP 
            {
              Object RESULT =null;
		int ropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MulOp ::= ADDRESS 
            {
              Object RESULT =null;
		int addrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MulOp ::= AND_NOT_OP 
            {
              Object RESULT =null;
		int anopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object anop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = anop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOp ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plus;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AddOp ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minus; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AddOp ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = or;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AddOp ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xor;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= EQ_OP 
            {
              Object RESULT =null;
		int eqopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eqop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eqop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= NE_OP 
            {
              Object RESULT =null;
		int neopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object neop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = neop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= LTE 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = let;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelOp ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = gt;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RelOp ::= GTE 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = gte;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinOp ::= OR_OP 
            {
              Object RESULT =null;
		int oropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = orop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinOp ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = and;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinOp ::= RelOp 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = relop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BinOp ::= AddOp 
            {
              Object RESULT =null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BinOp ::= MulOp 
            {
              Object RESULT =null;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mulop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mulop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CompositeLit ::= LiteralType LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompositeLit",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LiteralType ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LiteralType ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LiteralType ::= SQRD_L ELLIPSIS SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LiteralType ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LiteralType ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LiteralType ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LiteralValue ::= CURLY_L LiteralValueAux1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LiteralValueAux1 ::= ElementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValueAux1",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LiteralValueAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValueAux1",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ElementList ::= KeyedElement ElementListAux1 OptComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ElementListAux1 ::= ElementListAux1 COMMA KeyedElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementListAux1",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ElementListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementListAux1",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // KeyedElement ::= KeyedElementAux1 KeyedElementAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // KeyedElementAux1 ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux1",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // KeyedElementAux1 ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux1",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // KeyedElementAux2 ::= KeyedElementAux3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux2",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // KeyedElementAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux2",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // KeyedElementAux3 ::= COLON Element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux3",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Element ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Element ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunctionLit ::= FUNC Signature Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionLit",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SourceFile ::= PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SourceFile",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ImportDeclStar ::= ImportDecl SEMICOLON ImportDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclStar",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ImportDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclStar",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ImportDecl ::= IMPORT ImportDeclAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDecl",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ImportDeclAux1 ::= ImportSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclAux1",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ImportDeclAux1 ::= PAR_L ImportSpecStar PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclAux1",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ImportSpecStar ::= ImportSpec SEMICOLON ImportSpecStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecStar",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ImportSpecStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecStar",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ImportSpec ::= ImportSpecAux1 STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpec",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ImportSpecAux1 ::= DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ImportSpecAux1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ImportSpecAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PackageClause ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageClause",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperandStar ::= OperandStar Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",200, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperandStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",200, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operand ::= Literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operand ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression expTn = new Expression(Type.UNKNOWN, tn.toString(), tn.toString()); RESULT = expTn;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Operand ::= PAR_L Expression PAR_R 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Expression exp = (Expression) e;
												  exp.setValue("(" + e.toString() + ")");
												  RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Literal ::= BasicLit 
            {
              Object RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = blit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Literal ::= FunctionLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Literal ::= BooleanLit 
            {
              Object RESULT =null;
		int bolitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bolitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bolit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bolit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // UnaryExpr ::= PrimaryExpr 
            {
              Object RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // UnaryExpr ::= UnaryOp UnaryExpr 
            {
              Object RESULT =null;
		int uopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object uop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object uexpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateUnaryExpr(uop.toString(), (Expression) uexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrimaryExpr ::= Operand 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PrimaryExpr ::= Conversion 
            {
              Object RESULT =null;
		 RESULT = "";   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PrimaryExpr ::= PrimaryExpr PrimaryExprOtherOptions 
            {
              Object RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pexp;  Semantic.getInstance().FunctionCheckParameters((Expression)pexp);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= UnaryExpr 
            {
              Object RESULT =null;
		int uexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object uexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = uexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression ::= Expression BinOp Expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, bop.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PrimaryExprOtherOptions ::= IndexAndSlice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PrimaryExprOtherOptions ::= Arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PrimaryExprOtherOptions ::= HASH DOT PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Arguments ::= HASH PAR_L ExpTypeEtc PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpTypeEtc ::= OptExpType OptEllipsisComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTypeEtc",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpTypeEtc ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTypeEtc",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptExpType ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpType",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OptExpType ::= TypeLit OptCommaExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpType",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OptCommaExp ::= COMMA ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptCommaExp",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OptCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptCommaExp",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IndexAndSlice ::= SQRD_L Expression PossibleClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IndexAndSlice",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IndexAndSlice ::= SQRD_L PossibleClose2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IndexAndSlice",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PossibleClose ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PossibleClose ::= COLON OptExpression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PossibleClose2 ::= COLON SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose2",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PossibleClose2 ::= COLON Expression PossibleClose3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose2",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PossibleClose3 ::= COLON Expression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose3",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PossibleClose3 ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose3",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptEllipsisComma ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptEllipsisComma ::= ELLIPSIS COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptEllipsisComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptExpression ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OptExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OptExpression2 ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression2",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptExpression2 ::= COLON OptExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression2",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Index ::= SQRD_L Expression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExpressionList ::= Expression ExpressionStar 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addExpression((Expression) exp); RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpressionStar ::= COMMA Expression ExpressionStar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addExpression((Expression) exp); RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",199, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpressionStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",199, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Conversion ::= TypeConv NextConversion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conversion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NextConversion ::= PAR_L Expression OptComma PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NextConversion",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TypeConv ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TypeConv ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TypeConv ::= INTERROGATION TypeConv INTERROGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OptDotIDENTIFIER ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptDotIDENTIFIER",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OptDotIDENTIFIER ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptDotIDENTIFIER",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ConstDecl ::= CONST AuxConstDecl1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AuxConstDecl1 ::= ConstSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AuxConstDecl1 ::= PAR_L AuxConstSpec PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ConstSpec ::= IdentifierListStar2 AuxConstSpec2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstSpec",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AuxConstSpec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // AuxCommaExp ::= AuxCommaExp COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AuxCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OptType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OptType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AuxConstSpec2 ::= OptType ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AuxConstSpec2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addVarName(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IdentifierListStarAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().addVarName(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",202, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IdentifierListStar2 ::= IDENTIFIER NT$0 IdentifierListStarAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStar2",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Statement ::= LabeledStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Statement ::= GoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Statement ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Statement ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Statement ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Statement ::= GotoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Statement ::= FallthroughStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Statement ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Statement ::= SelectStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Statement ::= SwitchStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Statement ::= DeferStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Statement ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TopLevelDeclStar ::= TopLevelDecl SEMICOLON TopLevelDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclStar",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TopLevelDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclStar",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TopLevelDecl ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TopLevelDecl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TopLevelDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().createNewFunction(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",203, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FunctionDecl ::= FUNC IDENTIFIER NT$1 Signature FunctionBodyOpt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Semantic.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FunctionBodyOpt ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyOpt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FunctionBodyOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyOpt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // MethodDecl ::= FUNC Parameters IDENTIFIER Signature FunctionBodyOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Declaration ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TypeDecl ::= TYPE TypeDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TypeDeclAux ::= TypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TypeDeclAux ::= PAR_L TypeSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TypeSpecAux ::= TypeSpecAux TypeSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TypeSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TypeSpec ::= IDENTIFIER OptAssign Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpec",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VarDecl ::= VAR VarDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VarDeclAux ::= VarSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // VarDeclAux ::= PAR_L VarSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VarSpecAux ::= VarSpecAux VarSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VarSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VarSpec ::= IdentifierListStar2 VarSpecAux2 
            {
              Object RESULT =null;
		 Semantic.getInstance().printVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VarSpecAux2 ::= Type OptAssignExpList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int optAssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int optAssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object optAss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().initializeVars(type, optAss.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VarSpecAux2 ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // LabeledStmt ::= IDENTIFIER COLON Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStmt",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SimpleStmt ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SimpleStmt ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SimpleStmt ::= INTERROGATION ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AuxExpression ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AuxExpression ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AuxExpression ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // AuxExpression ::= PLUS PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AuxExpression ::= MINUS MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AuxExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$2 ::= 
            {
              Object RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().transferExpBuffer();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",204, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Assignment ::= ExpressionList AssignOp NT$2 ExpressionList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().updateVars(ass.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // AssignOp ::= MUL_ASSIGN 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ma;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // AssignOp ::= ADD_ASSIGN 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aa;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AssignOp ::= XOR_ASSIGN 
            {
              Object RESULT =null;
		int xaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xa;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AssignOp ::= DIV_ASSIGN 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = da;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AssignOp ::= LEFT_ASSIGN 
            {
              Object RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = la;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AssignOp ::= RIGHT_ASSIGN 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ra;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // AssignOp ::= AND_NOT_ASSIGN 
            {
              Object RESULT =null;
		int analeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ana = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ana;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // AssignOp ::= MINUS_ASSIGN 
            {
              Object RESULT =null;
		int minusaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minusa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minusa; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // AssignOp ::= ADDRESS_ASSIGN 
            {
              Object RESULT =null;
		int addaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object adda = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = adda;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // AssignOp ::= ASSIGN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ShortVarDecl ::= IdentifierList CHANNEL_ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShortVarDecl",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // StatementList ::= Statement SEMICOLON StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Block ::= CURLY_L StatementList CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ForStmt ::= FOR ForStmtAux Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ForStmtAux ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ForStmtAux ::= ForClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ForStmtAux ::= RangeClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ForStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ForClause ::= SimpleStmt SEMICOLON OptExpression SEMICOLON SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForClause",180, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SimplesStmtStarAux ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SimplesStmtStarAux ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SimplesStmtStarAux ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SimplesStmtStarAux ::= AuxCommaExp AssignOp ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // RangeClauseAux ::= ExpressionList RangeClauseAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // RangeClauseAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // RangeClauseAux2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux2",184, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // RangeClauseAux2 ::= CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux2",184, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // RangeClause ::= RangeClauseAux RANGE Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClause",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SwitchStmt ::= SWITCH SwitchStmtAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SwitchStmtAux ::= SimpleStmtSc SwitchStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux",186, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SimpleStmtSc ::= SimpleStmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtSc",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SimpleStmtSc ::= HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtSc",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // SwitchStmtAux2 ::= OptExpression CURLY_L ExprCaseClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux2",187, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // SwitchStmtAux2 ::= TypeSwitchGuard CURLY_L TypeCaseClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux2",187, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // ExprCaseClause ::= ExprSwitchCase COLON StatementList ExprCaseClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprCaseClause",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ExprCaseClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprCaseClause",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TypeSwitchGuard ::= OptTypeSwitchGuard PrimaryExpr HASH DOT PAR_L TYPE PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchGuard",191, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OptTypeSwitchGuard ::= Identifier CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptTypeSwitchGuard",193, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OptTypeSwitchGuard ::= HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptTypeSwitchGuard",193, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TypeCaseClause ::= TypeSwitchCase COLON StatementList TypeCaseClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeCaseClause",192, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TypeCaseClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeCaseClause",192, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TypeSwitchCase ::= CASE TypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchCase",194, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TypeSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchCase",194, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ExprSwitchCase ::= CASE ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchCase",190, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ExprSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchCase",190, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TypeList ::= Type AuxTypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",196, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // AuxTypeList ::= COMMA Type AuxTypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeList",195, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // AuxTypeList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeList",195, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // DeferStmt ::= DEFER Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeferStmt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().createIf((Expression) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",205, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 Semantic.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",206, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // IfStmt ::= IF SimpleStmtAux Expression NT$3 Block NT$4 IfStmtAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",172, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // SimpleStmtAux ::= HASH SimpleStmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // SimpleStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // IfStmtAux ::= ELSE IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NT$5 ::= 
            {
              Object RESULT =null;
 Semantic.getInstance().createElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",207, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // IfStmtAux ::= ELSE NT$5 Block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Semantic.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // IfStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // SelectStmt ::= SELECT CURLY_L CommClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectStmt",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CommClause ::= CommCase COLON StatementList CommClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CommClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CommCase ::= CASE StmtOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CommCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // StmtOpt ::= Expression CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // StmtOpt ::= RecvStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // RecvStmt ::= RecvStmtAux Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmt",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // RecvStmtAux ::= ExpressionList RecvStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // RecvStmtAux2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux2",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // RecvStmtAux2 ::= CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux2",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // OptIdentifier ::= Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // OptIdentifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FallthroughStmt ::= FALLTHROUGH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FallthroughStmt",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // GotoStmt ::= GOTO OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GotoStmt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ContinueStmt ::= CONTINUE OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // BreakStmt ::= BREAK OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ExpressionListStar ::= ExpressionList 
            {
              Object RESULT =null;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = epl;               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ExpressionListStar ::= 
            {
              Object RESULT =null;
		 RESULT = new Expression();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ReturnStmt ::= RETURN ExpressionListStar 
            {
              Object RESULT =null;
		int eplsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddReturnedExpression((Expression)epls);	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // GoStmt ::= GO Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GoStmt",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // OptAssign ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // OptAssign ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // OptAssignExpList ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "Assigment"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OptAssignExpList ::= 
            {
              Object RESULT =null;
		 RESULT = "";          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FieldDeclStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // AuxFieldDecl1 ::= BLANK_IDENTIFIER AuxFieldDecl4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // AuxFieldDecl1 ::= EmbeddedField1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // AuxFieldDecl3 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // AuxFieldDecl3 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // AuxFieldDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // AuxFieldDecl4 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // AuxFieldDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // AuxFieldDecl2 ::= Tag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Tag ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // EmbeddedField1 ::= MUL TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmbeddedField1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // OptMul ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // OptMul ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // IdentifierList ::= Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // IdentifierStar1 ::= COMMA Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // IdentifierStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TypeStar ::= Type TypeStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",197, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TypeStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",197, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // Type ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // Type ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // Type ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TypeName ::= IDENTIFIER AuxTypeName1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dotidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dotidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dotid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.toString() + dotid.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TypeName ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // AuxTypeName1 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "." + id.toString();              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // AuxTypeName1 ::= 
            {
              Object RESULT =null;
		 RESULT = "";                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TypeLit ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TypeLit ::= PointerType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TypeLit ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TypeLit ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TypeLit ::= ChannelType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TypeLit ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TypeLit ::= InterfaceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TypeLit ::= FunctionType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ArrayLength ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ElementType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // PointerType ::= MUL BaseType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // BaseType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // FunctionType ::= FUNC Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionType",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // Signature ::= Parameters AuxResult 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // AuxResult ::= Result 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // AuxResult ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // Result ::= HASH PAR_L AuxResult2 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // Result ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // Result ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Type type = Type.convertToType(tn.toString()); Semantic.getInstance().FunctionAddReturnType(type); RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // AuxResult2 ::= Identifier AuxResult3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // AuxResult2 ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // AuxResult2 ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // AuxResult3 ::= IdentifierStar3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // AuxResult3 ::= DOT Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // Parameters ::= PAR_L AuxParameters1 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // AuxParameters1 ::= ParameterList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // AuxParameters1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // OptComma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // OptComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ParameterList ::= ParameterDecl 
            {
              Object RESULT =null;
		int pdeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pdecl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pdecl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TypeNoIdentifier ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNoIdentifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TypeNoIdentifier ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNoIdentifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ParameterDecl ::= IdentifierListParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ParameterDecl ::= ELLIPSIS Type ParameterDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ParameterDecl ::= TypeNoIdentifier ParameterDeclStar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().FunctionInitializeParameters(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ParameterDeclStar ::= COMMA ParameterDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ParameterDeclStar ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ParameterDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // IdentifierListParam ::= Identifier IdentifierStar2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddParameter(id.toString()); Semantic.getInstance().FunctionInitializeParameters((Type)t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListParam",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // IdentifierStar2 ::= COMMA Identifier IdentifierStar2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddParameter(id.toString()); Semantic.getInstance().FunctionInitializeParameters((Type)t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // IdentifierStar2 ::= ELLIPSIS Type ParameterDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // IdentifierStar2 ::= Type ParameterDeclStar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().FunctionInitializeParameters(type); RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // FuncIdentifierList ::= Identifier FuncIdentifierListAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // FuncIdentifierListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // InterfaceType ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AuxIntefaceType1 ::= AuxIntefaceType1 MethodSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AuxIntefaceType1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // MethodSpec ::= IDENTIFIER MethodSpecAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // MethodSpecAux1 ::= Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // MethodSpecAux1 ::= MethodSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // MethodSpecAux2 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // MethodSpecAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // SliceType ::= SQRD_L SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // MapType ::= MAP SQRD_L KeyType SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // KeyType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyType",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // ChannelType ::= AuxChannelType1 ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ChannelType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AuxChannelType1 ::= CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AuxChannelType1 ::= CHAN CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AuxChannelType1 ::= CHANNEL_OP CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
