
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 20 00:39:42 BRT 2018
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 20 00:39:42 BRT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\002\004\000\002\146\003\000\002\146" +
    "\003\000\002\150\004\000\002\150\002\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\152\004\000\002\152\002\000\002\144" +
    "\003\000\002\144\003\000\002\144\005\000\002\145\003" +
    "\000\002\070\003\000\002\070\003\000\002\067\003\000" +
    "\002\067\005\000\002\151\004\000\002\151\002\000\002" +
    "\100\005\000\002\100\002\000\002\116\004\000\002\104" +
    "\003\000\002\104\002\000\002\076\005\000\002\076\002" +
    "\000\002\101\005\000\002\101\002\000\002\102\004\000" +
    "\002\074\004\000\002\075\005\000\002\075\002\000\002" +
    "\077\003\000\002\077\005\000\002\073\004\000\002\111" +
    "\005\000\002\115\003\000\002\115\003\000\002\115\002" +
    "\000\002\114\004\000\002\113\005\000\002\112\004\000" +
    "\002\112\003\000\002\112\003\000\002\112\002\000\002" +
    "\110\004\000\002\110\003\000\002\110\003\000\002\110" +
    "\002\000\002\106\004\000\002\107\004\000\002\107\002" +
    "\000\002\142\005\000\002\143\004\000\002\141\003\000" +
    "\002\140\004\000\002\137\004\000\002\136\004\000\002" +
    "\103\003\000\002\103\002\000\002\135\004\000\002\134" +
    "\004\000\002\133\005\000\002\124\003\000\002\124\002" +
    "\000\002\125\004\000\002\125\002\000\002\131\004\000" +
    "\002\131\004\000\002\132\004\000\002\130\005\000\002" +
    "\130\002\000\002\127\003\000\002\127\005\000\002\126" +
    "\004\000\002\123\005\000\002\122\005\000\002\122\002" +
    "\000\002\121\003\000\002\121\005\000\002\120\004\000" +
    "\002\117\003\000\002\117\003\000\002\117\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\002\006\000\002\004\005\000\002" +
    "\004\002\000\002\003\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\003\000\002\052\004\000\002\052\004" +
    "\000\002\052\002\000\002\053\004\000\002\051\002\000" +
    "\002\051\003\000\002\006\003\000\002\010\004\000\002" +
    "\044\003\000\002\044\002\000\002\005\004\000\002\005" +
    "\002\000\002\054\005\000\002\054\002\000\002\147\004" +
    "\000\002\147\002\000\002\012\003\000\002\012\003\000" +
    "\002\012\005\000\002\014\004\000\002\015\004\000\002" +
    "\015\002\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\027\003\000\002\030\006\000\002\016\003\000" +
    "\002\017\004\000\002\020\003\000\002\021\004\000\002" +
    "\031\004\000\002\033\003\000\002\033\002\000\002\032" +
    "\003\000\002\032\003\000\002\034\005\000\002\055\004" +
    "\000\002\055\002\000\002\045\003\000\002\045\002\000" +
    "\002\035\004\000\002\056\005\000\002\056\002\000\002" +
    "\036\005\000\002\046\003\000\002\046\002\000\002\047" +
    "\003\000\002\047\002\000\002\037\004\000\002\040\005" +
    "\000\002\040\002\000\002\022\006\000\002\057\005\000" +
    "\002\057\002\000\002\041\004\000\002\042\003\000\002" +
    "\042\003\000\002\043\004\000\002\043\002\000\002\024" +
    "\005\000\002\023\007\000\002\025\003\000\002\026\004" +
    "\000\002\060\003\000\002\060\004\000\002\060\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\054\002\uffb1\004\027\012\012\013\054\020" +
    "\034\023\006\024\052\025\023\027\021\030\011\033\025" +
    "\034\051\035\022\036\020\040\013\044\026\045\007\052" +
    "\016\077\037\111\031\120\055\001\002\000\006\002\uff89" +
    "\101\uff89\001\002\000\006\002\uff8a\101\uff8a\001\002\000" +
    "\006\105\310\120\120\001\002\000\066\002\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\063\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\001\002\000\006" +
    "\002\uff86\101\uff86\001\002\000\006\120\215\121\216\001" +
    "\002\000\022\025\023\035\022\036\020\040\013\044\026" +
    "\045\007\052\016\077\037\001\002\000\066\002\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\063" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\001\002\000" +
    "\032\035\067\036\106\040\104\041\070\044\112\045\110" +
    "\050\102\051\064\063\uffbb\072\074\073\101\076\077\001" +
    "\002\000\066\002\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\063\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\001\002\000\066\002\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\063\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\100\ufff5\101\ufff5\001\002\000\004\064\273" +
    "\001\002\000\066\002\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\063\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\001\002\000\006\105\261\120\263\001" +
    "\002\000\066\002\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\063\ufff7\067\ufff7\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\001\002\000\066\002\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\063\uffd4\067\uffd4" +
    "\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\077\uffd4\100\uffd4\101\uffd4\001\002\000\066\002\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\063\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\001\002" +
    "\000\026\002\uffa6\025\023\035\022\036\020\040\013\044" +
    "\026\045\007\052\016\077\037\101\uffa6\001\002\000\066" +
    "\002\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\063\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3" +
    "\001\002\000\006\120\215\121\216\001\002\000\006\002" +
    "\uffb2\101\uffb2\001\002\000\054\004\027\012\012\013\054" +
    "\020\034\023\006\024\052\025\023\027\021\030\011\033" +
    "\025\034\051\035\022\036\020\040\013\044\026\045\007" +
    "\052\016\077\037\101\uffb1\111\031\120\055\001\002\000" +
    "\006\002\uff8b\101\uff8b\001\002\000\006\002\uffb3\101\uffb3" +
    "\001\002\000\004\120\250\001\002\000\006\002\uff85\101" +
    "\uff85\001\002\000\006\002\uff8f\101\uff8f\001\002\000\066" +
    "\002\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\063\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1" +
    "\001\002\000\004\002\247\001\002\000\066\002\uffb5\035" +
    "\067\036\106\037\065\040\104\041\070\042\066\043\072" +
    "\044\112\045\110\046\075\047\100\050\102\051\064\063" +
    "\uffcd\067\076\070\071\071\103\072\074\073\101\074\245" +
    "\075\243\076\077\077\242\100\uffcd\101\uffb5\001\002\000" +
    "\006\002\uff8e\101\uff8e\001\002\000\006\002\uff90\101\uff90" +
    "\001\002\000\006\002\uff8c\101\uff8c\001\002\000\006\002" +
    "\uff8d\101\uff8d\001\002\000\006\002\uff87\101\uff87\001\002" +
    "\000\006\002\uff83\101\uff83\001\002\000\006\002\uff88\101" +
    "\uff88\001\002\000\006\105\116\120\120\001\002\000\006" +
    "\002\uffab\101\uffab\001\002\000\006\002\uff84\101\uff84\001" +
    "\002\000\022\025\023\035\022\036\020\040\013\044\026" +
    "\045\007\052\016\077\037\001\002\000\010\064\uffc6\100" +
    "\uffc6\103\056\001\002\000\056\002\uffb1\004\027\012\012" +
    "\013\054\020\034\023\006\024\052\025\023\027\021\030" +
    "\011\033\025\034\051\035\022\036\020\040\013\044\026" +
    "\045\007\052\016\077\037\101\uffb1\111\031\120\055\001" +
    "\002\000\034\002\uffc5\014\uffc5\015\uffc5\016\uffc5\044\uffc5" +
    "\063\uffc5\064\uffc5\077\uffc5\100\060\101\uffc5\105\uffc5\107" +
    "\uffc5\120\uffc5\001\002\000\004\120\061\001\002\000\034" +
    "\002\uffc7\014\uffc7\015\uffc7\016\uffc7\044\uffc7\063\uffc7\064" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\105\uffc7\107\uffc7\120\uffc7" +
    "\001\002\000\006\002\uffa3\101\uffa3\001\002\000\054\002" +
    "\uffa4\035\067\036\106\037\065\040\104\041\070\042\066" +
    "\043\072\044\112\045\110\046\075\047\100\050\102\051" +
    "\064\067\076\070\071\071\103\072\074\073\101\076\077" +
    "\101\uffa4\001\002\000\024\025\uffee\035\uffee\036\uffee\040" +
    "\uffee\044\uffee\045\uffee\052\uffee\063\uffee\077\uffee\001\002" +
    "\000\022\025\uffde\035\uffde\036\uffde\040\uffde\044\uffde\045" +
    "\uffde\052\uffde\077\uffde\001\002\000\022\025\uffe3\035\uffe3" +
    "\036\uffe3\040\uffe3\044\uffe3\045\uffe3\052\uffe3\077\uffe3\001" +
    "\002\000\024\025\uffe9\035\uffe9\036\uffe9\040\uffe9\044\uffe9" +
    "\045\uffe9\052\uffe9\063\uffe9\077\uffe9\001\002\000\024\025" +
    "\uffe7\035\uffe7\036\uffe7\040\uffe7\044\uffe7\045\uffe7\052\uffe7" +
    "\063\uffe7\077\uffe7\001\002\000\022\025\uffe4\035\uffe4\036" +
    "\uffe4\040\uffe4\044\uffe4\045\uffe4\052\uffe4\077\uffe4\001\002" +
    "\000\022\025\uffe2\035\uffe2\036\uffe2\040\uffe2\044\uffe2\045" +
    "\uffe2\052\uffe2\077\uffe2\001\002\000\022\025\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\044\uffdb\045\uffdb\052\uffdb\077\uffdb\001" +
    "\002\000\024\025\uffed\035\uffed\036\uffed\040\uffed\044\uffed" +
    "\045\uffed\052\uffed\063\uffed\077\uffed\001\002\000\022\025" +
    "\uffe1\035\uffe1\036\uffe1\040\uffe1\044\uffe1\045\uffe1\052\uffe1" +
    "\077\uffe1\001\002\000\022\025\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\044\uffe5\045\uffe5\052\uffe5\077\uffe5\001\002\000\024" +
    "\025\uffea\035\uffea\036\uffea\040\uffea\044\uffea\045\uffea\052" +
    "\uffea\063\uffea\077\uffea\001\002\000\022\025\uffe0\035\uffe0" +
    "\036\uffe0\040\uffe0\044\uffe0\045\uffe0\052\uffe0\077\uffe0\001" +
    "\002\000\024\025\uffec\035\uffec\036\uffec\040\uffec\044\uffec" +
    "\045\uffec\052\uffec\063\uffec\077\uffec\001\002\000\024\025" +
    "\uffef\035\uffef\036\uffef\040\uffef\044\uffef\045\uffef\052\uffef" +
    "\063\uffef\077\uffef\001\002\000\022\025\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\044\uffdf\045\uffdf\052\uffdf\077\uffdf\001\002" +
    "\000\024\025\uffe8\035\uffe8\036\uffe8\040\uffe8\044\uffe8\045" +
    "\uffe8\052\uffe8\063\uffe8\077\uffe8\001\002\000\022\025\023" +
    "\035\022\036\020\040\013\044\026\045\007\052\016\077" +
    "\037\001\002\000\024\025\uffeb\035\uffeb\036\uffeb\040\uffeb" +
    "\044\uffeb\045\uffeb\052\uffeb\063\uffeb\077\uffeb\001\002\000" +
    "\022\025\uffdc\035\uffdc\036\uffdc\040\uffdc\044\uffdc\045\uffdc" +
    "\052\uffdc\077\uffdc\001\002\000\024\025\uffe6\035\uffe6\036" +
    "\uffe6\040\uffe6\044\uffe6\045\uffe6\052\uffe6\063\uffe6\077\uffe6" +
    "\001\002\000\022\025\uffdd\035\uffdd\036\uffdd\040\uffdd\044" +
    "\uffdd\045\uffdd\052\uffdd\077\uffdd\001\002\000\024\025\ufff0" +
    "\035\ufff0\036\ufff0\040\ufff0\044\ufff0\045\ufff0\052\ufff0\063" +
    "\ufff0\077\ufff0\001\002\000\066\002\uffd1\035\067\036\106" +
    "\037\065\040\104\041\070\042\066\043\072\044\112\045" +
    "\110\046\075\047\100\050\102\051\064\063\uffd1\067\076" +
    "\070\071\071\103\072\074\073\101\074\uffd1\075\uffd1\076" +
    "\077\077\uffd1\100\uffd1\101\uffd1\001\002\000\024\014\125" +
    "\015\131\016\135\044\150\063\145\077\126\105\130\107" +
    "\142\120\134\001\002\000\006\002\uff97\101\uff97\001\002" +
    "\000\006\106\uff9a\120\uff9a\001\002\000\006\002\uff99\101" +
    "\uff99\001\002\000\032\002\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\044\uffc6\063\uffc6\077\uffc6\100\uffc6\101\uffc6\105\uffc6\107" +
    "\uffc6\120\uffc6\001\002\000\006\106\123\120\120\001\002" +
    "\000\004\101\124\001\002\000\006\002\uff98\101\uff98\001" +
    "\002\000\006\106\uff9b\120\uff9b\001\002\000\004\107\235" +
    "\001\002\000\004\016\234\001\002\000\006\002\uff9c\101" +
    "\uff9c\001\002\000\022\014\125\015\131\016\135\044\150" +
    "\077\126\105\130\107\142\120\134\001\002\000\004\111" +
    "\177\001\002\000\016\002\uff60\063\uff60\101\uff60\106\uff60" +
    "\110\uff60\113\uff60\001\002\000\016\002\uff61\063\uff61\101" +
    "\uff61\106\uff61\110\uff61\113\uff61\001\002\000\020\002\uff66" +
    "\063\uff66\101\uff66\104\175\106\uff66\110\uff66\113\uff66\001" +
    "\002\000\022\014\uff38\015\uff38\016\uff38\044\uff38\077\173" +
    "\105\uff38\107\uff38\120\uff38\001\002\000\016\002\uff62\063" +
    "\uff62\101\uff62\106\uff62\110\uff62\113\uff62\001\002\000\016" +
    "\002\uff6a\063\uff6a\101\uff6a\106\uff6a\110\uff6a\113\uff6a\001" +
    "\002\000\010\002\uff9f\063\171\101\uff9f\001\002\000\016" +
    "\002\uff6b\063\uff6b\101\uff6b\106\uff6b\110\uff6b\113\uff6b\001" +
    "\002\000\006\110\164\115\163\001\002\000\016\002\uff64" +
    "\063\uff64\101\uff64\106\uff64\110\uff64\113\uff64\001\002\000" +
    "\016\002\uff65\063\uff65\101\uff65\106\uff65\110\uff65\113\uff65" +
    "\001\002\000\022\025\023\035\022\036\020\040\013\044" +
    "\026\045\007\052\016\077\037\001\002\000\016\002\uff63" +
    "\063\uff63\101\uff63\106\uff63\110\uff63\113\uff63\001\002\000" +
    "\022\014\125\015\131\016\135\044\150\077\126\105\130" +
    "\107\142\120\134\001\002\000\022\014\125\015\131\016" +
    "\135\044\150\077\126\105\130\107\142\120\134\001\002" +
    "\000\016\002\uff5b\063\uff5b\101\uff5b\106\uff5b\110\uff5b\113" +
    "\uff5b\001\002\000\016\002\uff5c\063\uff5c\101\uff5c\106\uff5c" +
    "\110\uff5c\113\uff5c\001\002\000\016\002\uff39\063\uff39\101" +
    "\uff39\106\uff39\110\uff39\113\uff39\001\002\000\016\002\uff5d" +
    "\063\uff5d\101\uff5d\106\uff5d\110\uff5d\113\uff5d\001\002\000" +
    "\006\002\uff9d\101\uff9d\001\002\000\056\002\uffcd\035\067" +
    "\036\106\037\065\040\104\041\070\042\066\043\072\044" +
    "\112\045\110\046\075\047\100\050\102\051\064\067\076" +
    "\070\071\071\103\072\074\073\101\076\077\100\uffcd\101" +
    "\uffcd\001\002\000\040\002\uffcc\035\uffcc\036\uffcc\040\uffcc" +
    "\041\uffcc\044\uffcc\045\uffcc\050\uffcc\051\uffcc\063\uffcc\072" +
    "\uffcc\073\uffcc\076\uffcc\100\160\101\uffcc\001\002\000\022" +
    "\025\023\035\022\036\020\040\013\044\026\045\007\052" +
    "\016\077\037\001\002\000\060\002\uffce\035\067\036\106" +
    "\037\065\040\104\041\070\042\066\043\072\044\112\045" +
    "\110\046\075\047\100\050\102\051\064\063\uffce\067\076" +
    "\070\071\071\103\072\074\073\101\076\077\100\uffce\101" +
    "\uffce\001\002\000\004\110\166\001\002\000\004\110\uff5f" +
    "\001\002\000\022\014\125\015\131\016\135\044\150\077" +
    "\126\105\130\107\142\120\134\001\002\000\016\002\uff3c" +
    "\063\uff3c\101\uff3c\106\uff3c\110\uff3c\113\uff3c\001\002\000" +
    "\022\014\125\015\131\016\135\044\150\077\126\105\130" +
    "\107\142\120\134\001\002\000\016\002\uff5e\063\uff5e\101" +
    "\uff5e\106\uff5e\110\uff5e\113\uff5e\001\002\000\006\002\uff9e" +
    "\101\uff9e\001\002\000\022\025\023\035\022\036\020\040" +
    "\013\044\026\045\007\052\016\077\037\001\002\000\006" +
    "\002\uffa0\101\uffa0\001\002\000\022\014\uff37\015\uff37\016" +
    "\uff37\044\uff37\077\uff37\105\uff37\107\uff37\120\uff37\001\002" +
    "\000\016\002\uff68\063\uff68\101\uff68\106\uff68\110\uff68\113" +
    "\uff68\001\002\000\004\120\176\001\002\000\016\002\uff67" +
    "\063\uff67\101\uff67\106\uff67\110\uff67\113\uff67\001\002\000" +
    "\012\044\uff80\112\uff80\120\uff80\121\uff80\001\002\000\012" +
    "\044\203\112\207\120\204\121\205\001\002\000\006\101" +
    "\uff7c\113\uff7c\001\002\000\006\101\uff77\113\231\001\002" +
    "\000\004\120\134\001\002\000\032\014\uff6e\015\uff6e\016" +
    "\uff6e\044\uff6e\077\uff6e\100\211\101\uff79\104\223\105\uff6e" +
    "\107\uff6e\113\uff79\120\uff6e\001\002\000\024\014\uff6e\015" +
    "\uff6e\016\uff6e\044\uff6e\077\uff6e\100\211\105\uff6e\107\uff6e" +
    "\120\uff6e\001\002\000\004\101\210\001\002\000\016\002" +
    "\uff82\063\uff82\101\uff82\106\uff82\110\uff82\113\uff82\001\002" +
    "\000\012\044\uff81\112\uff81\120\uff81\121\uff81\001\002\000" +
    "\006\120\215\121\216\001\002\000\022\014\125\015\131" +
    "\016\135\044\150\077\126\105\130\107\142\120\134\001" +
    "\002\000\006\101\uff7d\113\uff7d\001\002\000\006\101\uff78" +
    "\113\uff78\001\002\000\030\002\000\014\000\015\000\016" +
    "\000\044\000\077\000\100\000\101\000\105\000\107\000" +
    "\120\000\001\002\000\030\002\uffff\014\uffff\015\uffff\016" +
    "\uffff\044\uffff\077\uffff\100\uffff\101\uffff\105\uffff\107\uffff" +
    "\120\uffff\001\002\000\024\014\uff6e\015\uff6e\016\uff6e\044" +
    "\uff6e\077\uff6e\100\211\105\uff6e\107\uff6e\120\uff6e\001\002" +
    "\000\022\014\uff6f\015\uff6f\016\uff6f\044\uff6f\077\uff6f\105" +
    "\uff6f\107\uff6f\120\uff6f\001\002\000\022\014\125\015\131" +
    "\016\135\044\150\077\126\105\130\107\142\120\134\001" +
    "\002\000\006\101\uff7e\113\uff7e\001\002\000\004\120\224" +
    "\001\002\000\006\101\uff7a\113\uff7a\001\002\000\006\101" +
    "\uff7b\113\uff7b\001\002\000\006\101\uff74\113\uff74\001\002" +
    "\000\004\101\uff7f\001\002\000\004\101\uff76\001\002\000" +
    "\004\101\uff75\001\002\000\004\106\233\001\002\000\016" +
    "\002\uff69\063\uff69\101\uff69\106\uff69\110\uff69\113\uff69\001" +
    "\002\000\022\014\uff36\015\uff36\016\uff36\044\uff36\077\uff36" +
    "\105\uff36\107\uff36\120\uff36\001\002\000\022\014\125\015" +
    "\131\016\135\044\150\077\126\105\130\107\142\120\134" +
    "\001\002\000\004\110\240\001\002\000\004\110\uff3a\001" +
    "\002\000\022\014\125\015\131\016\135\044\150\077\126" +
    "\105\130\107\142\120\134\001\002\000\016\002\uff3b\063" +
    "\uff3b\101\uff3b\106\uff3b\110\uff3b\113\uff3b\001\002\000\022" +
    "\025\023\035\022\036\020\040\013\044\026\045\007\052" +
    "\016\077\037\001\002\000\006\002\uffb6\101\uffb6\001\002" +
    "\000\006\002\uffb4\101\uffb4\001\002\000\006\002\uffb7\101" +
    "\uffb7\001\002\000\054\002\uffb8\035\067\036\106\037\065" +
    "\040\104\041\070\042\066\043\072\044\112\045\110\046" +
    "\075\047\100\050\102\051\064\067\076\070\071\071\103" +
    "\072\074\073\101\076\077\101\uffb8\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffaa\101\uffaa\001\002\000\004" +
    "\112\254\001\002\000\004\101\253\001\002\000\004\112" +
    "\uffb0\001\002\000\006\002\uffad\101\uffad\001\002\000\006" +
    "\002\uffa8\101\uffa8\001\002\000\006\002\uffa7\101\uffa7\001" +
    "\002\000\006\002\uffa5\101\uffa5\001\002\000\006\002\uff93" +
    "\101\uff93\001\002\000\006\106\uff94\120\uff94\001\002\000" +
    "\006\002\uff91\101\uff91\001\002\000\024\014\uffa1\015\uffa1" +
    "\016\uffa1\044\uffa1\063\265\077\uffa1\105\uffa1\107\uffa1\120" +
    "\uffa1\001\002\000\022\014\125\015\131\016\135\044\150" +
    "\077\126\105\130\107\142\120\134\001\002\000\022\014" +
    "\uffa2\015\uffa2\016\uffa2\044\uffa2\077\uffa2\105\uffa2\107\uffa2" +
    "\120\uffa2\001\002\000\006\002\uff96\101\uff96\001\002\000" +
    "\006\106\271\120\263\001\002\000\004\101\272\001\002" +
    "\000\006\002\uff92\101\uff92\001\002\000\006\106\uff95\120" +
    "\uff95\001\002\000\022\025\023\035\022\036\020\040\013" +
    "\044\026\045\007\052\016\077\037\001\002\000\006\002" +
    "\uffbe\101\uffbe\001\002\000\022\025\023\035\022\036\020" +
    "\040\013\044\026\045\007\052\016\077\037\001\002\000" +
    "\004\063\301\001\002\000\004\063\uffbd\001\002\000\004" +
    "\063\uffbc\001\002\000\022\025\uffba\035\uffba\036\uffba\040" +
    "\uffba\044\uffba\045\uffba\052\uffba\077\uffba\001\002\000\006" +
    "\002\uffb9\101\uffb9\001\002\000\054\002\uffac\035\067\036" +
    "\106\037\065\040\104\041\070\042\066\043\072\044\112" +
    "\045\110\046\075\047\100\050\102\051\064\067\076\070" +
    "\071\071\103\072\074\073\101\076\077\101\uffac\001\002" +
    "\000\006\002\uffa9\101\uffa9\001\002\000\006\002\uffbf\101" +
    "\uffbf\001\002\000\030\002\uffc8\014\125\015\131\016\135" +
    "\044\150\063\uffca\077\126\101\uffc8\105\130\107\142\120" +
    "\134\001\002\000\006\002\uffc1\101\uffc1\001\002\000\006" +
    "\106\uffc2\120\uffc2\001\002\000\006\106\313\120\120\001" +
    "\002\000\004\101\314\001\002\000\006\002\uffc0\101\uffc0" +
    "\001\002\000\006\106\uffc3\120\uffc3\001\002\000\004\063" +
    "\320\001\002\000\004\063\uffcb\001\002\000\006\002\uffc4" +
    "\101\uffc4\001\002\000\022\025\023\035\022\036\020\040" +
    "\013\044\026\045\007\052\016\077\037\001\002\000\006" +
    "\002\uffc9\101\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\056\062\014\067\040\070\023\073\042\102" +
    "\016\105\037\110\031\111\027\113\032\116\013\117\044" +
    "\120\035\126\041\133\043\134\004\135\003\136\047\137" +
    "\045\140\007\141\034\142\052\143\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\074\306\077\304\102" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\146\303\001\001\000\010\062\014\067\302\070\023\001" +
    "\001\000\002\001\001\000\012\063\277\064\276\114\274" +
    "\115\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\121\261\123\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\062\014\067\155\070\023\103\256\116\255" +
    "\001\001\000\002\001\001\000\004\146\254\001\001\000" +
    "\002\001\001\000\060\062\014\067\040\070\023\073\042" +
    "\102\016\105\251\106\250\110\031\111\027\113\032\116" +
    "\013\117\044\120\035\126\041\133\043\134\004\135\003" +
    "\136\047\137\045\140\007\141\034\142\052\143\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\063\072\064\106\065\110\066\104" +
    "\100\156\112\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\102\113\127" +
    "\114\132\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\062\014\067\062\070\023\001\001\000\004\101" +
    "\056\001\001\000\056\062\014\067\040\070\023\073\042" +
    "\102\016\105\061\110\031\111\027\113\032\116\013\117" +
    "\044\120\035\126\041\133\043\134\004\135\003\136\047" +
    "\137\045\140\007\141\034\142\052\143\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\063\072\064\106\065\110\066\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\062\014\067\112\070\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\063\072\064" +
    "\106\065\110\066\104\001\001\000\030\002\131\012\137" +
    "\013\136\014\140\017\142\023\135\024\145\026\132\030" +
    "\143\060\146\131\126\001\001\000\002\001\001\000\004" +
    "\130\120\001\001\000\002\001\001\000\004\101\056\001" +
    "\001\000\006\102\113\132\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\131\012\231" +
    "\013\136\014\140\017\142\023\135\024\145\026\132\030" +
    "\143\060\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\167" +
    "\001\001\000\002\001\001\000\004\027\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\062\014\067\155" +
    "\070\023\116\154\001\001\000\002\001\001\000\030\002" +
    "\131\012\153\013\136\014\140\016\152\017\142\023\135" +
    "\024\145\026\132\030\143\060\146\001\001\000\030\002" +
    "\131\012\150\013\136\014\140\017\142\020\151\023\135" +
    "\024\145\026\132\030\143\060\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\063\072\064\106\065\110\066" +
    "\104\100\156\001\001\000\002\001\001\000\010\062\014" +
    "\067\160\070\023\001\001\000\012\063\072\064\106\065" +
    "\110\066\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\131\012\153\013\136\014\140\016\164\017" +
    "\142\023\135\024\145\026\132\030\143\060\146\001\001" +
    "\000\002\001\001\000\030\002\131\012\153\013\136\014" +
    "\140\016\166\017\142\023\135\024\145\026\132\030\143" +
    "\060\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\062\014\067\155\070\023\116\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\177\001\001\000\010" +
    "\003\205\010\200\050\201\001\001\000\002\001\001\000" +
    "\006\006\227\051\226\001\001\000\004\014\225\001\001" +
    "\000\006\052\221\054\220\001\001\000\006\053\212\054" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\146\216\001\001\000\026\002\131\012" +
    "\213\013\136\014\140\017\142\023\135\024\145\026\132" +
    "\030\143\060\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\217" +
    "\001\001\000\002\001\001\000\026\002\131\012\224\013" +
    "\136\014\140\017\142\023\135\024\145\026\132\030\143" +
    "\060\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\131" +
    "\012\236\013\136\014\140\017\142\023\135\024\145\025" +
    "\235\026\132\030\143\060\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\131\012\153\013\136\014" +
    "\140\016\240\017\142\023\135\024\145\026\132\030\143" +
    "\060\146\001\001\000\002\001\001\000\010\062\014\067" +
    "\245\070\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\063\072\064\106\065\110\066" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\266\001\001\000\002\001" +
    "\001\000\004\124\263\001\001\000\026\002\131\012\265" +
    "\013\136\014\140\017\142\023\135\024\145\026\132\030" +
    "\143\060\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\123\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\062\014\067\155\070\023" +
    "\116\273\001\001\000\002\001\001\000\012\062\014\067" +
    "\155\070\023\116\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\063\072\064\106\065\110\066\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\131\012" +
    "\315\013\136\014\140\017\142\023\135\024\145\026\132" +
    "\030\143\060\146\076\316\104\314\001\001\000\002\001" +
    "\001\000\004\075\310\001\001\000\006\074\311\102\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\062\014\067\155\070\023\116\320\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info){
       StringBuffer m = new StringBuffer("ERRO SINTÁTICO EM: ");

       if (info instanceof ComplexSymbol){
         ComplexSymbol s = (ComplexSymbol) info;
         if(s.value != null) m.append( s.value.toString() );
         m.append( " - Linha: " + s.getLeft().getLine() + " - Coluna: "+s.getLeft().getColumn() );
         }

       m.append(" : "+message);

       System.err.println(m);
     }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AuxChannelType1 ::= CHANNEL_OP CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AuxChannelType1 ::= CHAN CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AuxChannelType1 ::= CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ChannelType ::= AuxChannelType1 ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ChannelType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // KeyType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // MapType ::= MAP SQRD_L KeyType SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapType",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SliceType ::= SQRD_L SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // MethodSpecAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // MethodSpecAux2 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // MethodSpecAux1 ::= MethodSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // MethodSpecAux1 ::= Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // MethodSpec ::= IDENTIFIER MethodSpecAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AuxIntefaceType1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AuxIntefaceType1 ::= AuxIntefaceType1 MethodSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // InterfaceType ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // FuncIdentifierListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FuncIdentifierList ::= Identifier FuncIdentifierListAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OptEllipsis ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsis",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OptEllipsis ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsis",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OptIdentifierList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OptIdentifierList ::= FuncIdentifierList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ParameterDecl ::= OptIdentifierList OptEllipsis Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AuxParameterList1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameterList1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AuxParameterList1 ::= AuxParameterList1 COMMA ParameterDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameterList1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ParameterList ::= ParameterDecl AuxParameterList1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OptComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OptComma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AuxParameters1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AuxParameters1 ::= ParameterList OptComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Parameters ::= PAR_L AuxParameters1 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Result ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Result ::= Parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AuxResult ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AuxResult ::= Result 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Signature ::= Parameters AuxResult 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FunctionType ::= FUNC Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // BaseType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PointerType ::= MUL BaseType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ElementType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ArrayLength ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TypeLit ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TypeLit ::= ChannelType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TypeLit ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TypeLit ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TypeLit ::= PointerType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TypeLit ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // AuxTypeName1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // AuxTypeName1 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TypeName ::= IDENTIFIER AuxTypeName1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Type ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Type ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Type ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TypeStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TypeStar ::= Type TypeStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IdentifierStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IdentifierStar1 ::= COMMA Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IdentifierList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IdentifierList ::= Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OptMul ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OptMul ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EmbeddedField1 ::= MUL TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmbeddedField1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Tag ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AuxFieldDecl2 ::= Tag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AuxFieldDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AuxFieldDecl4 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl4",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AuxFieldDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AuxFieldDecl3 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AuxFieldDecl3 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // AuxFieldDecl1 ::= EmbeddedField1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AuxFieldDecl1 ::= BLANK_IDENTIFIER AuxFieldDecl4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FieldDeclStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Statement ::= DeferStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Statement ::= FallthroughStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Statement ::= GotoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Statement ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Statement ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Statement ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Statement ::= GoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Statement ::= LabeledStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Declaration ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TypeDecl ::= TYPE TypeDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TypeDeclAux ::= PAR_L TypeSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TypeDeclAux ::= TypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TypeSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TypeSpecAux ::= TypeSpecAux TypeSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TypeSpec ::= IDENTIFIER OptAssign Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpec",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VarDecl ::= VAR VarDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VarDeclAux ::= PAR_L VarSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VarDeclAux ::= VarSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VarSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VarSpecAux ::= VarSpecAux VarSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VarSpec ::= IdentifierListStar2 VarSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VarSpecAux2 ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VarSpecAux2 ::= Type OptAssignExpList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OptAssignExpList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptAssignExpList ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OptAssign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OptAssign ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LabeledStmt ::= IDENTIFIER COLON Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStmt",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // GoStmt ::= GO Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GoStmt",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ReturnStmt ::= RETURN ExpressionListStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpressionListStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpressionListStar ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BreakStmt ::= BREAK Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ContinueStmt ::= CONTINUE Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GotoStmt ::= GOTO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GotoStmt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FallthroughStmt ::= FALLTHROUGH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FallthroughStmt",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DeferStmt ::= DEFER Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeferStmt",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Block ::= CURLY_L StatementList CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StatementListAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementListAux",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementListAux ::= StatementListAux StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementListAux",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementList ::= Statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SimpleStmt ::= ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SimpleStmt ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SimpleStmt ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AuxExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AuxExpression ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AuxExpression ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AuxExpression ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Assignment ::= ExpressionList AssignOp ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AssignOp ::= AuxOp ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AuxOp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AuxOp ::= MulOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AuxOp ::= AddOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ShortVarDecl ::= IdentifierListStar2 CHANNEL_ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShortVarDecl",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ConstDecl ::= CONST AuxConstDecl1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AuxConstDecl1 ::= PAR_L AuxConstSpec PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AuxConstDecl1 ::= ConstSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AuxConstSpec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ConstSpec ::= IdentifierListStar2 AuxConstSpec2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstSpec",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IdentifierListStar2 ::= IDENTIFIER IdentifierListStarAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStar2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IdentifierListStarAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AuxConstSpec2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AuxConstSpec2 ::= OptType ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OptType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OptType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionList ::= Expression AuxCommaExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AuxCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AuxCommaExp ::= AuxCommaExp COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionStar ::= ExpressionStar Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression BinOp Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= UnaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnaryExpr ::= UnaryOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // UnaryExpr ::= IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Literal ::= BasicLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Operand ::= PAR_L Expression PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Operand ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operand ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OperandStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OperandStar ::= OperandStar Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinOp ::= MulOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinOp ::= AddOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinOp ::= RelOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BinOp ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BinOp ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= GTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= LTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AddOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOp ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AddOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AddOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MulOp ::= AND_NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MulOp ::= ADDRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MulOp ::= RIGHT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MulOp ::= LEFT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MulOp ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MulOp ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MulOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOp ::= CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryOp ::= ADDRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnaryOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnaryOp ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnaryOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // UnaryOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicLit ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicLit ::= RUNE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicLit ::= IMG_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicLit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicLit ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicLitStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BasicLitStar ::= BasicLit BasicLitStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Identifier ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

