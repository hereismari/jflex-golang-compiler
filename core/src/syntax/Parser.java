
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 19 18:00:42 BRT 2018
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 19 18:00:42 BRT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\265\000\002\002\004\000\002\132\003\000\002\132" +
    "\003\000\002\134\004\000\002\134\002\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\136\004\000\002\136\002\000\002\130" +
    "\003\000\002\130\003\000\002\130\005\000\002\131\003" +
    "\000\002\070\003\000\002\070\003\000\002\067\003\000" +
    "\002\067\005\000\002\135\004\000\002\135\002\000\002" +
    "\100\005\000\002\100\002\000\002\113\004\000\002\103" +
    "\003\000\002\103\002\000\002\076\005\000\002\076\002" +
    "\000\002\101\005\000\002\101\002\000\002\102\004\000" +
    "\002\074\004\000\002\075\005\000\002\075\002\000\002" +
    "\077\003\000\002\077\005\000\002\073\004\000\002\106" +
    "\005\000\002\112\003\000\002\112\003\000\002\112\002" +
    "\000\002\111\004\000\002\110\005\000\002\107\004\000" +
    "\002\107\003\000\002\107\003\000\002\107\002\000\002" +
    "\105\004\000\002\105\003\000\002\105\003\000\002\105" +
    "\002\000\002\121\003\000\002\121\002\000\002\122\004" +
    "\000\002\122\002\000\002\126\004\000\002\126\004\000" +
    "\002\127\004\000\002\125\005\000\002\125\002\000\002" +
    "\124\003\000\002\124\005\000\002\123\004\000\002\120" +
    "\005\000\002\117\005\000\002\117\002\000\002\116\003" +
    "\000\002\116\005\000\002\115\004\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\104\003\000\002" +
    "\104\003\000\002\002\006\000\002\004\005\000\002\004" +
    "\002\000\002\003\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\003\000\002\052\004\000\002\052\004\000" +
    "\002\052\002\000\002\053\004\000\002\051\002\000\002" +
    "\051\003\000\002\006\003\000\002\010\004\000\002\044" +
    "\003\000\002\044\002\000\002\005\004\000\002\005\002" +
    "\000\002\054\005\000\002\054\002\000\002\133\004\000" +
    "\002\133\002\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\014\004\000\002\015\004\000\002\015" +
    "\002\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\027\003\000\002\030\006\000\002\016\003\000\002" +
    "\017\004\000\002\020\003\000\002\021\004\000\002\031" +
    "\004\000\002\033\003\000\002\033\002\000\002\032\003" +
    "\000\002\032\003\000\002\034\005\000\002\055\004\000" +
    "\002\055\002\000\002\045\003\000\002\045\002\000\002" +
    "\035\004\000\002\056\005\000\002\056\002\000\002\036" +
    "\005\000\002\046\003\000\002\046\002\000\002\047\003" +
    "\000\002\047\002\000\002\037\004\000\002\040\005\000" +
    "\002\040\002\000\002\022\006\000\002\057\005\000\002" +
    "\057\002\000\002\041\004\000\002\042\003\000\002\042" +
    "\003\000\002\043\004\000\002\043\002\000\002\024\005" +
    "\000\002\023\007\000\002\025\003\000\002\026\004\000" +
    "\002\060\003\000\002\060\004\000\002\060\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\034\002\uffb1\023\023\025\015\027\016\034" +
    "\033\035\007\036\026\040\022\044\032\045\027\052\013" +
    "\077\004\120\014\001\002\000\066\002\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\063\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\076\ufff1\077\ufff1\100\ufff1\101\ufff1\001\002\000\066\002" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\063\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\001" +
    "\002\000\004\002\uffb3\001\002\000\066\002\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\063\ufff7" +
    "\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\001\002\000\004" +
    "\002\uff9e\001\002\000\004\064\261\001\002\000\004\002" +
    "\uff9b\001\002\000\066\002\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\063\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\001\002\000\034\002\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\044\uffc6\063\uffc6\064\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\105\uffc6\107\uffc6\120\uffc6\001\002\000\066" +
    "\002\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\063\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4" +
    "\001\002\000\006\105\244\120\246\001\002\000\004\002" +
    "\uff9c\001\002\000\004\002\uffb2\001\002\000\004\002\uff9d" +
    "\001\002\000\066\002\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\063\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6" +
    "\100\ufff6\101\ufff6\001\002\000\006\105\231\120\014\001" +
    "\002\000\004\002\225\001\002\000\066\002\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\063\uffd3" +
    "\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\001\002\000\066" +
    "\002\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\063\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\001\002\000\066\002\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\063\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\100\ufff4\101\ufff4\001\002\000\032\035\042\036\064\040" +
    "\062\041\044\044\070\045\066\050\060\051\036\063\uffbb" +
    "\072\047\073\055\076\052\001\002\000\004\002\uff9a\001" +
    "\002\000\066\002\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047" +
    "\ufff3\050\ufff3\051\ufff3\063\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100" +
    "\ufff3\101\ufff3\001\002\000\006\105\077\120\014\001\002" +
    "\000\064\002\uffb5\035\042\036\064\037\040\040\062\041" +
    "\044\042\041\043\045\044\070\045\066\046\050\047\053" +
    "\050\060\051\036\063\uffcd\067\051\070\043\071\061\072" +
    "\047\073\055\074\057\075\037\076\052\077\035\100\uffcd" +
    "\001\002\000\022\025\015\035\007\036\026\040\022\044" +
    "\032\045\027\052\013\077\004\001\002\000\024\025\uffee" +
    "\035\uffee\036\uffee\040\uffee\044\uffee\045\uffee\052\uffee\063" +
    "\uffee\077\uffee\001\002\000\004\002\uffb6\001\002\000\022" +
    "\025\uffde\035\uffde\036\uffde\040\uffde\044\uffde\045\uffde\052" +
    "\uffde\077\uffde\001\002\000\022\025\uffe3\035\uffe3\036\uffe3" +
    "\040\uffe3\044\uffe3\045\uffe3\052\uffe3\077\uffe3\001\002\000" +
    "\024\025\uffe9\035\uffe9\036\uffe9\040\uffe9\044\uffe9\045\uffe9" +
    "\052\uffe9\063\uffe9\077\uffe9\001\002\000\022\025\uffe4\035" +
    "\uffe4\036\uffe4\040\uffe4\044\uffe4\045\uffe4\052\uffe4\077\uffe4" +
    "\001\002\000\024\025\uffe7\035\uffe7\036\uffe7\040\uffe7\044" +
    "\uffe7\045\uffe7\052\uffe7\063\uffe7\077\uffe7\001\002\000\022" +
    "\025\uffe2\035\uffe2\036\uffe2\040\uffe2\044\uffe2\045\uffe2\052" +
    "\uffe2\077\uffe2\001\002\000\022\025\uffdb\035\uffdb\036\uffdb" +
    "\040\uffdb\044\uffdb\045\uffdb\052\uffdb\077\uffdb\001\002\000" +
    "\024\025\uffed\035\uffed\036\uffed\040\uffed\044\uffed\045\uffed" +
    "\052\uffed\063\uffed\077\uffed\001\002\000\022\025\uffe1\035" +
    "\uffe1\036\uffe1\040\uffe1\044\uffe1\045\uffe1\052\uffe1\077\uffe1" +
    "\001\002\000\022\025\uffe5\035\uffe5\036\uffe5\040\uffe5\044" +
    "\uffe5\045\uffe5\052\uffe5\077\uffe5\001\002\000\024\025\uffea" +
    "\035\uffea\036\uffea\040\uffea\044\uffea\045\uffea\052\uffea\063" +
    "\uffea\077\uffea\001\002\000\022\025\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\044\uffe0\045\uffe0\052\uffe0\077\uffe0\001\002\000" +
    "\040\002\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\044\uffcc" +
    "\045\uffcc\050\uffcc\051\uffcc\063\uffcc\072\uffcc\073\uffcc\076" +
    "\uffcc\100\072\101\uffcc\001\002\000\024\025\uffec\035\uffec" +
    "\036\uffec\040\uffec\044\uffec\045\uffec\052\uffec\063\uffec\077" +
    "\uffec\001\002\000\004\002\uffb4\001\002\000\004\002\uffb7" +
    "\001\002\000\024\025\uffef\035\uffef\036\uffef\040\uffef\044" +
    "\uffef\045\uffef\052\uffef\063\uffef\077\uffef\001\002\000\022" +
    "\025\uffdf\035\uffdf\036\uffdf\040\uffdf\044\uffdf\045\uffdf\052" +
    "\uffdf\077\uffdf\001\002\000\024\025\uffe8\035\uffe8\036\uffe8" +
    "\040\uffe8\044\uffe8\045\uffe8\052\uffe8\063\uffe8\077\uffe8\001" +
    "\002\000\022\025\015\035\007\036\026\040\022\044\032" +
    "\045\027\052\013\077\004\001\002\000\024\025\uffeb\035" +
    "\uffeb\036\uffeb\040\uffeb\044\uffeb\045\uffeb\052\uffeb\063\uffeb" +
    "\077\uffeb\001\002\000\022\025\uffdc\035\uffdc\036\uffdc\040" +
    "\uffdc\044\uffdc\045\uffdc\052\uffdc\077\uffdc\001\002\000\024" +
    "\025\uffe6\035\uffe6\036\uffe6\040\uffe6\044\uffe6\045\uffe6\052" +
    "\uffe6\063\uffe6\077\uffe6\001\002\000\022\025\uffdd\035\uffdd" +
    "\036\uffdd\040\uffdd\044\uffdd\045\uffdd\052\uffdd\077\uffdd\001" +
    "\002\000\024\025\ufff0\035\ufff0\036\ufff0\040\ufff0\044\ufff0" +
    "\045\ufff0\052\ufff0\063\ufff0\077\ufff0\001\002\000\066\002" +
    "\uffd1\035\042\036\064\037\040\040\062\041\044\042\041" +
    "\043\045\044\070\045\066\046\050\047\053\050\060\051" +
    "\036\063\uffd1\067\051\070\043\071\061\072\047\073\055" +
    "\074\uffd1\075\uffd1\076\052\077\uffd1\100\uffd1\101\uffd1\001" +
    "\002\000\022\025\015\035\007\036\026\040\022\044\032" +
    "\045\027\052\013\077\004\001\002\000\060\002\uffce\035" +
    "\042\036\064\037\040\040\062\041\044\042\041\043\045" +
    "\044\070\045\066\046\050\047\053\050\060\051\036\063" +
    "\uffce\067\051\070\043\071\061\072\047\073\055\076\052" +
    "\100\uffce\101\uffce\001\002\000\052\002\uffb8\035\042\036" +
    "\064\037\040\040\062\041\044\042\041\043\045\044\070" +
    "\045\066\046\050\047\053\050\060\051\036\067\051\070" +
    "\043\071\061\072\047\073\055\076\052\001\002\000\024" +
    "\014\105\015\111\016\115\044\126\063\125\077\106\105" +
    "\110\107\122\120\114\001\002\000\004\002\uffa5\001\002" +
    "\000\006\106\uffa8\120\uffa8\001\002\000\004\002\uffa7\001" +
    "\002\000\006\106\103\120\014\001\002\000\004\101\104" +
    "\001\002\000\004\002\uffa6\001\002\000\006\106\uffa9\120" +
    "\uffa9\001\002\000\004\107\212\001\002\000\004\016\211" +
    "\001\002\000\006\002\uffaa\101\uffaa\001\002\000\022\014" +
    "\105\015\111\016\115\044\126\077\106\105\110\107\122" +
    "\120\114\001\002\000\004\111\154\001\002\000\016\002" +
    "\uff77\063\uff77\101\uff77\106\uff77\110\uff77\113\uff77\001\002" +
    "\000\016\002\uff78\063\uff78\101\uff78\106\uff78\110\uff78\113" +
    "\uff78\001\002\000\020\002\uff7d\063\uff7d\101\uff7d\104\152" +
    "\106\uff7d\110\uff7d\113\uff7d\001\002\000\022\014\uff4f\015" +
    "\uff4f\016\uff4f\044\uff4f\077\150\105\uff4f\107\uff4f\120\uff4f" +
    "\001\002\000\016\002\uff79\063\uff79\101\uff79\106\uff79\110" +
    "\uff79\113\uff79\001\002\000\016\002\uff81\063\uff81\101\uff81" +
    "\106\uff81\110\uff81\113\uff81\001\002\000\010\002\uffad\063" +
    "\146\101\uffad\001\002\000\016\002\uff82\063\uff82\101\uff82" +
    "\106\uff82\110\uff82\113\uff82\001\002\000\006\110\141\115" +
    "\140\001\002\000\016\002\uff7b\063\uff7b\101\uff7b\106\uff7b" +
    "\110\uff7b\113\uff7b\001\002\000\016\002\uff7c\063\uff7c\101" +
    "\uff7c\106\uff7c\110\uff7c\113\uff7c\001\002\000\022\025\015" +
    "\035\007\036\026\040\022\044\032\045\027\052\013\077" +
    "\004\001\002\000\022\014\105\015\111\016\115\044\126" +
    "\077\106\105\110\107\122\120\114\001\002\000\022\014" +
    "\105\015\111\016\115\044\126\077\106\105\110\107\122" +
    "\120\114\001\002\000\016\002\uff7a\063\uff7a\101\uff7a\106" +
    "\uff7a\110\uff7a\113\uff7a\001\002\000\016\002\uff50\063\uff50" +
    "\101\uff50\106\uff50\110\uff50\113\uff50\001\002\000\016\002" +
    "\uff74\063\uff74\101\uff74\106\uff74\110\uff74\113\uff74\001\002" +
    "\000\016\002\uff72\063\uff72\101\uff72\106\uff72\110\uff72\113" +
    "\uff72\001\002\000\016\002\uff73\063\uff73\101\uff73\106\uff73" +
    "\110\uff73\113\uff73\001\002\000\006\002\uffab\101\uffab\001" +
    "\002\000\056\002\uffcd\035\042\036\064\037\040\040\062" +
    "\041\044\042\041\043\045\044\070\045\066\046\050\047" +
    "\053\050\060\051\036\067\051\070\043\071\061\072\047" +
    "\073\055\076\052\100\uffcd\101\uffcd\001\002\000\004\110" +
    "\143\001\002\000\004\110\uff76\001\002\000\022\014\105" +
    "\015\111\016\115\044\126\077\106\105\110\107\122\120" +
    "\114\001\002\000\016\002\uff53\063\uff53\101\uff53\106\uff53" +
    "\110\uff53\113\uff53\001\002\000\022\014\105\015\111\016" +
    "\115\044\126\077\106\105\110\107\122\120\114\001\002" +
    "\000\016\002\uff75\063\uff75\101\uff75\106\uff75\110\uff75\113" +
    "\uff75\001\002\000\006\002\uffac\101\uffac\001\002\000\022" +
    "\025\015\035\007\036\026\040\022\044\032\045\027\052" +
    "\013\077\004\001\002\000\006\002\uffae\101\uffae\001\002" +
    "\000\022\014\uff4e\015\uff4e\016\uff4e\044\uff4e\077\uff4e\105" +
    "\uff4e\107\uff4e\120\uff4e\001\002\000\016\002\uff7f\063\uff7f" +
    "\101\uff7f\106\uff7f\110\uff7f\113\uff7f\001\002\000\004\120" +
    "\153\001\002\000\016\002\uff7e\063\uff7e\101\uff7e\106\uff7e" +
    "\110\uff7e\113\uff7e\001\002\000\012\044\uff97\112\uff97\120" +
    "\uff97\121\uff97\001\002\000\012\044\160\112\164\120\161" +
    "\121\162\001\002\000\006\101\uff93\113\uff93\001\002\000" +
    "\006\101\uff8e\113\206\001\002\000\004\120\114\001\002" +
    "\000\032\014\uff85\015\uff85\016\uff85\044\uff85\077\uff85\100" +
    "\166\101\uff90\104\200\105\uff85\107\uff85\113\uff90\120\uff85" +
    "\001\002\000\024\014\uff85\015\uff85\016\uff85\044\uff85\077" +
    "\uff85\100\166\105\uff85\107\uff85\120\uff85\001\002\000\004" +
    "\101\165\001\002\000\016\002\uff99\063\uff99\101\uff99\106" +
    "\uff99\110\uff99\113\uff99\001\002\000\012\044\uff98\112\uff98" +
    "\120\uff98\121\uff98\001\002\000\006\120\172\121\173\001" +
    "\002\000\022\014\105\015\111\016\115\044\126\077\106" +
    "\105\110\107\122\120\114\001\002\000\006\101\uff94\113" +
    "\uff94\001\002\000\006\101\uff8f\113\uff8f\001\002\000\024" +
    "\014\000\015\000\016\000\044\000\077\000\100\000\105" +
    "\000\107\000\120\000\001\002\000\024\014\uffff\015\uffff" +
    "\016\uffff\044\uffff\077\uffff\100\uffff\105\uffff\107\uffff\120" +
    "\uffff\001\002\000\024\014\uff85\015\uff85\016\uff85\044\uff85" +
    "\077\uff85\100\166\105\uff85\107\uff85\120\uff85\001\002\000" +
    "\022\014\uff86\015\uff86\016\uff86\044\uff86\077\uff86\105\uff86" +
    "\107\uff86\120\uff86\001\002\000\022\014\105\015\111\016" +
    "\115\044\126\077\106\105\110\107\122\120\114\001\002" +
    "\000\006\101\uff95\113\uff95\001\002\000\004\120\201\001" +
    "\002\000\006\101\uff91\113\uff91\001\002\000\006\101\uff92" +
    "\113\uff92\001\002\000\006\101\uff8b\113\uff8b\001\002\000" +
    "\004\101\uff96\001\002\000\004\101\uff8d\001\002\000\004" +
    "\101\uff8c\001\002\000\004\106\210\001\002\000\016\002" +
    "\uff80\063\uff80\101\uff80\106\uff80\110\uff80\113\uff80\001\002" +
    "\000\022\014\uff4d\015\uff4d\016\uff4d\044\uff4d\077\uff4d\105" +
    "\uff4d\107\uff4d\120\uff4d\001\002\000\022\014\105\015\111" +
    "\016\115\044\126\077\106\105\110\107\122\120\114\001" +
    "\002\000\004\110\215\001\002\000\004\110\uff51\001\002" +
    "\000\022\014\105\015\111\016\115\044\126\077\106\105" +
    "\110\107\122\120\114\001\002\000\016\002\uff52\063\uff52" +
    "\101\uff52\106\uff52\110\uff52\113\uff52\001\002\000\022\025" +
    "\015\035\007\036\026\040\022\044\032\045\027\052\013" +
    "\077\004\001\002\000\004\063\223\001\002\000\004\063" +
    "\uffbd\001\002\000\004\063\uffbc\001\002\000\022\025\uffba" +
    "\035\uffba\036\uffba\040\uffba\044\uffba\045\uffba\052\uffba\077" +
    "\uffba\001\002\000\004\002\uffb9\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffbf\001\002\000\030\002\uffc8\014" +
    "\105\015\111\016\115\044\126\063\uffca\077\106\101\uffc8" +
    "\105\110\107\122\120\114\001\002\000\004\002\uffc1\001" +
    "\002\000\006\106\uffc2\120\uffc2\001\002\000\006\106\234" +
    "\120\014\001\002\000\004\101\235\001\002\000\004\002" +
    "\uffc0\001\002\000\006\106\uffc3\120\uffc3\001\002\000\004" +
    "\063\241\001\002\000\004\063\uffcb\001\002\000\006\002" +
    "\uffc4\101\uffc4\001\002\000\022\025\015\035\007\036\026" +
    "\040\022\044\032\045\027\052\013\077\004\001\002\000" +
    "\006\002\uffc9\101\uffc9\001\002\000\004\002\uffa1\001\002" +
    "\000\006\106\uffa2\120\uffa2\001\002\000\004\002\uff9f\001" +
    "\002\000\024\014\uffaf\015\uffaf\016\uffaf\044\uffaf\063\250" +
    "\077\uffaf\105\uffaf\107\uffaf\120\uffaf\001\002\000\022\014" +
    "\105\015\111\016\115\044\126\077\106\105\110\107\122" +
    "\120\114\001\002\000\022\014\uffb0\015\uffb0\016\uffb0\044" +
    "\uffb0\077\uffb0\105\uffb0\107\uffb0\120\uffb0\001\002\000\006" +
    "\002\uffa4\101\uffa4\001\002\000\006\106\254\120\246\001" +
    "\002\000\004\101\255\001\002\000\004\002\uffa0\001\002" +
    "\000\006\106\uffa3\120\uffa3\001\002\000\034\002\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\044\uffc5\063\uffc5\064\uffc5\077\uffc5" +
    "\100\257\101\uffc5\105\uffc5\107\uffc5\120\uffc5\001\002\000" +
    "\004\120\260\001\002\000\034\002\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\044\uffc7\063\uffc7\064\uffc7\077\uffc7\100\uffc7\101" +
    "\uffc7\105\uffc7\107\uffc7\120\uffc7\001\002\000\022\025\015" +
    "\035\007\036\026\040\022\044\032\045\027\052\013\077" +
    "\004\001\002\000\004\002\uffbe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\034\062\024\067\033\070\004\073\007\102" +
    "\010\104\023\105\030\106\017\110\005\113\027\114\011" +
    "\115\020\123\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\255\001\001\000\002\001\001\000\006\116\244" +
    "\120\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\074\227\077\225" +
    "\102\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\063\221\064\220" +
    "\111\216\112\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\102\074\124\075\127\077\001\001\000\016" +
    "\063\045\064\064\065\066\066\062\100\053\107\055\001" +
    "\001\000\010\062\024\067\073\070\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\062\024\067\070\070\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\063\045\064" +
    "\064\065\066\066\062\001\001\000\010\062\024\067\072" +
    "\070\004\001\001\000\012\063\045\064\064\065\066\066" +
    "\062\001\001\000\012\063\045\064\064\065\066\066\062" +
    "\001\001\000\030\002\111\012\117\013\116\014\120\017" +
    "\122\023\115\024\127\026\112\030\123\060\126\126\106" +
    "\001\001\000\002\001\001\000\004\125\100\001\001\000" +
    "\002\001\001\000\006\102\074\127\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\111" +
    "\012\206\013\116\014\120\017\122\023\115\024\127\026" +
    "\112\030\123\060\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\122\144\001\001\000\002\001\001\000\004\027\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\062\024" +
    "\067\135\070\004\113\134\001\001\000\030\002\111\012" +
    "\132\013\116\014\120\017\122\020\133\023\115\024\127" +
    "\026\112\030\123\060\126\001\001\000\030\002\111\012" +
    "\131\013\116\014\120\016\130\017\122\023\115\024\127" +
    "\026\112\030\123\060\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\063\045\064\064\065" +
    "\066\066\062\100\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\111\012\131\013\116\014\120\016" +
    "\141\017\122\023\115\024\127\026\112\030\123\060\126" +
    "\001\001\000\002\001\001\000\030\002\111\012\131\013" +
    "\116\014\120\016\143\017\122\023\115\024\127\026\112" +
    "\030\123\060\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\062\024\067\135\070\004\113\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\154\001\001" +
    "\000\010\003\162\010\155\050\156\001\001\000\002\001" +
    "\001\000\006\006\204\051\203\001\001\000\004\014\202" +
    "\001\001\000\006\052\176\054\175\001\001\000\006\053" +
    "\167\054\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\132\173\001\001\000\026\002" +
    "\111\012\170\013\116\014\120\017\122\023\115\024\127" +
    "\026\112\030\123\060\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\174\001\001\000\002\001\001\000\026\002\111\012" +
    "\201\013\116\014\120\017\122\023\115\024\127\026\112" +
    "\030\123\060\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\111\012\213\013\116\014\120\017\122\023\115\024" +
    "\127\025\212\026\112\030\123\060\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\111\012\131\013" +
    "\116\014\120\016\215\017\122\023\115\024\127\026\112" +
    "\030\123\060\126\001\001\000\002\001\001\000\012\062" +
    "\024\067\135\070\004\113\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\111\012\236\013\116\014\120\017\122\023\115\024" +
    "\127\026\112\030\123\060\126\076\237\103\235\001\001" +
    "\000\002\001\001\000\004\075\231\001\001\000\006\074" +
    "\232\102\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\062\024\067\135\070\004\113\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\251\001\001\000\002\001\001\000\004\121\246\001\001" +
    "\000\026\002\111\012\250\013\116\014\120\017\122\023" +
    "\115\024\127\026\112\030\123\060\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\120\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\062" +
    "\024\067\135\070\004\113\261\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info){
       StringBuffer m = new StringBuffer("ERRO SINTÁTICO EM: ");

       if (info instanceof ComplexSymbol){
         ComplexSymbol s = (ComplexSymbol) info;
         if(s.value != null) m.append( s.value.toString() );
         m.append( " - Linha: " + s.getLeft().getLine() + " - Coluna: "+s.getLeft().getColumn() );
         }

       m.append(" : "+message);

       System.err.println(m);
     }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AuxChannelType1 ::= CHANNEL_OP CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AuxChannelType1 ::= CHAN CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AuxChannelType1 ::= CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ChannelType ::= AuxChannelType1 ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ChannelType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // KeyType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MapType ::= MAP SQRD_L KeyType SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapType",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SliceType ::= SQRD_L SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // MethodSpecAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // MethodSpecAux2 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // MethodSpecAux1 ::= MethodSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MethodSpecAux1 ::= Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // MethodSpec ::= IDENTIFIER MethodSpecAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AuxIntefaceType1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AuxIntefaceType1 ::= AuxIntefaceType1 MethodSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // InterfaceType ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FuncIdentifierListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FuncIdentifierList ::= Identifier FuncIdentifierListAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OptEllipsis ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsis",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OptEllipsis ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsis",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OptIdentifierList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OptIdentifierList ::= FuncIdentifierList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ParameterDecl ::= OptIdentifierList OptEllipsis Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AuxParameterList1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameterList1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AuxParameterList1 ::= AuxParameterList1 COMMA ParameterDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameterList1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ParameterList ::= ParameterDecl AuxParameterList1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OptComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OptComma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AuxParameters1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AuxParameters1 ::= ParameterList OptComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Parameters ::= PAR_L AuxParameters1 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Result ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Result ::= Parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AuxResult ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AuxResult ::= Result 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Signature ::= Parameters AuxResult 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FunctionType ::= FUNC Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BaseType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PointerType ::= MUL BaseType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ElementType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ArrayLength ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TypeLit ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TypeLit ::= ChannelType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TypeLit ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TypeLit ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TypeLit ::= PointerType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TypeLit ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AuxTypeName1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AuxTypeName1 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TypeName ::= IDENTIFIER AuxTypeName1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Type ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Type ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Type ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TypeStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TypeStar ::= Type TypeStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IdentifierStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IdentifierStar1 ::= COMMA Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IdentifierList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IdentifierList ::= Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OptMul ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OptMul ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EmbeddedField1 ::= MUL TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmbeddedField1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Tag ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AuxFieldDecl2 ::= Tag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AuxFieldDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AuxFieldDecl4 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl4",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // AuxFieldDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AuxFieldDecl3 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AuxFieldDecl3 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // AuxFieldDecl1 ::= EmbeddedField1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // AuxFieldDecl1 ::= BLANK_IDENTIFIER AuxFieldDecl4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FieldDeclStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Declaration ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TypeDecl ::= TYPE TypeDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TypeDeclAux ::= PAR_L TypeSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TypeDeclAux ::= TypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TypeSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TypeSpecAux ::= TypeSpecAux TypeSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TypeSpec ::= IDENTIFIER OptAssign Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpec",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VarDecl ::= VAR VarDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VarDeclAux ::= PAR_L VarSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VarDeclAux ::= VarSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VarSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VarSpecAux ::= VarSpecAux VarSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VarSpec ::= IdentifierListStar2 VarSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VarSpecAux2 ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VarSpecAux2 ::= Type OptAssignExpList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OptAssignExpList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OptAssignExpList ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptAssign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptAssign ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SimpleStmt ::= ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SimpleStmt ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SimpleStmt ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AuxExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AuxExpression ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AuxExpression ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AuxExpression ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Assignment ::= ExpressionList AssignOp ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AssignOp ::= AuxOp ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AuxOp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AuxOp ::= MulOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AuxOp ::= AddOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ShortVarDecl ::= IdentifierListStar2 CHANNEL_ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShortVarDecl",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ConstDecl ::= CONST AuxConstDecl1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AuxConstDecl1 ::= PAR_L AuxConstSpec PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AuxConstDecl1 ::= ConstSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AuxConstSpec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ConstSpec ::= IdentifierListStar2 AuxConstSpec2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstSpec",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IdentifierListStar2 ::= IDENTIFIER IdentifierListStarAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStar2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IdentifierListStarAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AuxConstSpec2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AuxConstSpec2 ::= OptType ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OptType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OptType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionList ::= Expression AuxCommaExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AuxCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AuxCommaExp ::= AuxCommaExp COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionStar ::= ExpressionStar Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression BinOp Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= UnaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnaryExpr ::= UnaryOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // UnaryExpr ::= IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Literal ::= BasicLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Operand ::= PAR_L Expression PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Operand ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operand ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OperandStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OperandStar ::= OperandStar Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinOp ::= MulOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinOp ::= AddOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinOp ::= RelOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BinOp ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BinOp ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= GTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= LTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AddOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOp ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AddOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AddOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MulOp ::= AND_NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MulOp ::= ADDRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MulOp ::= RIGHT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MulOp ::= LEFT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MulOp ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MulOp ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MulOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOp ::= CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryOp ::= ADDRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnaryOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnaryOp ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnaryOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // UnaryOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicLit ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicLit ::= RUNE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicLit ::= IMG_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicLit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicLit ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicLitStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BasicLitStar ::= BasicLit BasicLitStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Identifier ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

