
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package syntax;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import semantic.*;
import semantic.models.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\002\002\004\000\002\203\003\000\002\203" +
    "\003\000\002\316\004\000\002\316\002\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\101\003\000\002\101\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\077" +
    "\004\000\002\171\003\000\002\171\003\000\002\171\006" +
    "\000\002\171\003\000\002\171\003\000\002\171\003\000" +
    "\002\172\005\000\002\173\003\000\002\173\002\000\002" +
    "\175\005\000\002\176\005\000\002\176\002\000\002\177" +
    "\004\000\002\200\003\000\002\200\003\000\002\201\003" +
    "\000\002\201\002\000\002\202\004\000\002\174\003\000" +
    "\002\174\003\000\002\100\005\000\002\150\006\000\002" +
    "\153\005\000\002\153\002\000\002\152\004\000\002\154" +
    "\003\000\002\154\005\000\002\156\005\000\002\156\002" +
    "\000\002\155\004\000\002\157\003\000\002\157\003\000" +
    "\002\157\002\000\002\151\004\000\002\320\004\000\002" +
    "\320\002\000\002\166\003\000\002\166\003\000\002\166" +
    "\005\000\002\170\003\000\002\170\003\000\002\170\003" +
    "\000\002\113\003\000\002\113\004\000\002\114\003\000" +
    "\002\114\003\000\002\114\004\000\002\111\003\000\002" +
    "\115\005\000\002\115\003\000\002\116\005\000\002\116" +
    "\003\000\002\117\005\000\002\117\003\000\002\121\005" +
    "\000\002\121\003\000\002\120\005\000\002\120\003\000" +
    "\002\135\003\000\002\135\003\000\002\135\007\000\002" +
    "\144\006\000\002\145\004\000\002\145\002\000\002\146" +
    "\003\000\002\146\004\000\002\147\004\000\002\147\002" +
    "\000\002\136\005\000\002\136\004\000\002\141\003\000" +
    "\002\141\005\000\002\142\004\000\002\142\005\000\002" +
    "\143\005\000\002\143\003\000\002\056\003\000\002\056" +
    "\004\000\002\056\002\000\002\137\003\000\002\137\002" +
    "\000\002\140\003\000\002\140\004\000\002\134\005\000" +
    "\002\112\004\000\002\317\005\000\002\317\002\000\002" +
    "\124\004\000\002\125\006\000\002\126\003\000\002\126" +
    "\003\000\002\126\005\000\002\127\004\000\002\127\002" +
    "\000\002\204\004\000\002\210\003\000\002\210\005\000" +
    "\002\205\004\000\002\206\005\000\002\206\002\000\002" +
    "\211\005\000\002\211\002\000\002\215\003\000\002\215" +
    "\002\000\002\207\005\000\002\207\002\000\002\212\005" +
    "\000\002\212\002\000\002\322\002\000\002\213\005\000" +
    "\002\216\003\000\002\216\003\000\002\216\003\000\002" +
    "\216\003\000\002\216\003\000\002\216\003\000\002\216" +
    "\003\000\002\216\003\000\002\216\003\000\002\216\003" +
    "\000\002\216\003\000\002\216\003\000\002\216\003\000" +
    "\002\216\003\000\002\216\003\000\002\162\005\000\002" +
    "\162\002\000\002\161\003\000\002\161\003\000\002\161" +
    "\003\000\002\323\002\000\002\163\007\000\002\164\003" +
    "\000\002\164\002\000\002\165\007\000\002\160\003\000" +
    "\002\160\003\000\002\160\003\000\002\230\004\000\002" +
    "\231\003\000\002\231\005\000\002\232\005\000\002\232" +
    "\002\000\002\233\005\000\002\236\004\000\002\237\003" +
    "\000\002\237\005\000\002\240\005\000\002\240\002\000" +
    "\002\242\004\000\002\241\004\000\002\241\004\000\002" +
    "\243\005\000\002\221\004\000\002\221\003\000\002\221" +
    "\004\000\002\221\002\000\002\223\004\000\002\223\003" +
    "\000\002\223\003\000\002\223\004\000\002\223\004\000" +
    "\002\223\002\000\002\324\002\000\002\224\006\000\002" +
    "\225\003\000\002\225\003\000\002\225\003\000\002\225" +
    "\003\000\002\225\003\000\002\225\003\000\002\225\003" +
    "\000\002\225\003\000\002\225\003\000\002\225\003\000" +
    "\002\222\005\000\002\217\005\000\002\217\002\000\002" +
    "\252\005\000\002\272\005\000\002\273\003\000\002\273" +
    "\003\000\002\273\003\000\002\273\002\000\002\274\007" +
    "\000\002\276\004\000\002\276\003\000\002\276\003\000" +
    "\002\276\005\000\002\277\004\000\002\277\002\000\002" +
    "\300\003\000\002\300\003\000\002\275\005\000\002\301" +
    "\004\000\002\302\004\000\002\271\004\000\002\271\003" +
    "\000\002\303\006\000\002\303\006\000\002\305\006\000" +
    "\002\305\002\000\002\307\011\000\002\311\004\000\002" +
    "\311\003\000\002\310\006\000\002\310\002\000\002\312" +
    "\004\000\002\312\003\000\002\306\004\000\002\306\003" +
    "\000\002\314\004\000\002\313\005\000\002\313\002\000" +
    "\002\253\004\000\002\325\002\000\002\326\002\000\002" +
    "\263\011\000\002\266\005\000\002\266\002\000\002\267" +
    "\004\000\002\327\002\000\002\267\005\000\002\267\002" +
    "\000\002\254\006\000\002\255\006\000\002\255\002\000" +
    "\002\256\004\000\002\256\003\000\002\257\005\000\002" +
    "\257\003\000\002\260\004\000\002\261\004\000\002\262" +
    "\003\000\002\262\003\000\002\055\003\000\002\055\002" +
    "\000\002\251\003\000\002\250\004\000\002\247\004\000" +
    "\002\246\004\000\002\214\003\000\002\214\002\000\002" +
    "\245\004\000\002\244\004\000\002\234\003\000\002\234" +
    "\002\000\002\235\004\000\002\235\002\000\002\002\006" +
    "\000\002\004\005\000\002\004\002\000\002\003\004\000" +
    "\002\057\004\000\002\057\004\000\002\057\003\000\002" +
    "\061\004\000\002\061\004\000\002\061\002\000\002\062" +
    "\004\000\002\060\002\000\002\060\003\000\002\006\003" +
    "\000\002\010\004\000\002\052\003\000\002\052\002\000" +
    "\002\005\004\000\002\063\005\000\002\063\002\000\002" +
    "\315\004\000\002\315\002\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\015\004\000\002\015\003" +
    "\000\002\016\004\000\002\016\002\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\031\003\000\002\032\006\000\002\020\003" +
    "\000\002\021\004\000\002\022\003\000\002\023\004\000" +
    "\002\033\004\000\002\073\003\000\002\073\002\000\002" +
    "\034\006\000\002\034\003\000\002\034\003\000\002\074" +
    "\004\000\002\074\003\000\002\074\005\000\002\075\003" +
    "\000\002\075\004\000\002\035\005\000\002\064\003\000" +
    "\002\064\002\000\002\053\003\000\002\053\002\000\002" +
    "\036\003\000\002\014\003\000\002\014\005\000\002\037" +
    "\003\000\002\037\005\000\002\037\004\000\002\040\004" +
    "\000\002\040\003\000\002\040\002\000\002\043\004\000" +
    "\002\044\005\000\002\044\005\000\002\044\004\000\002" +
    "\041\004\000\002\042\005\000\002\042\002\000\002\024" +
    "\006\000\002\071\005\000\002\071\002\000\002\047\004" +
    "\000\002\050\003\000\002\050\003\000\002\051\004\000" +
    "\002\051\002\000\002\026\005\000\002\025\007\000\002" +
    "\027\003\000\002\030\004\000\002\072\003\000\002\072" +
    "\004\000\002\072\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fa\000\004\021\005\001\002\000\004\103\011\001" +
    "\002\000\004\122\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\103\uffb6\001\002\000" +
    "\016\002\uffc0\006\uffc0\023\uffc0\027\uffc0\032\012\034\uffc0" +
    "\001\002\000\012\106\u01f6\107\u01f4\115\uffb7\122\u01f5\001" +
    "\002\000\004\103\u01ef\001\002\000\014\002\uff59\006\015" +
    "\023\030\027\023\034\022\001\002\000\006\107\115\122" +
    "\u01e7\001\002\000\004\103\uff4f\001\002\000\004\103\uff56" +
    "\001\002\000\004\103\uff58\001\002\000\004\103\uff4e\001" +
    "\002\000\006\107\u01d9\122\035\001\002\000\006\107\u01cd" +
    "\122\u01ce\001\002\000\004\103\u01ca\001\002\000\004\002" +
    "\uffc2\001\002\000\004\103\uff57\001\002\000\004\103\uff50" +
    "\001\002\000\006\107\034\122\035\001\002\000\004\103" +
    "\uff79\001\002\000\034\006\066\007\070\014\046\015\050" +
    "\016\056\046\073\065\uff70\101\047\103\uff6e\107\051\111" +
    "\065\122\055\123\063\001\002\000\004\103\uff78\001\002" +
    "\000\006\110\uff74\122\uff74\001\002\000\036\006\uff6b\007" +
    "\uff6b\014\uff6b\015\uff6b\016\uff6b\046\uff6b\065\uff6b\101\uff6b" +
    "\102\uff6b\103\uff6b\107\uff6b\111\uff6b\122\uff6b\123\uff6b\001" +
    "\002\000\036\006\uff6c\007\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\046\uff6c\065\uff6c\101\uff6c\102\uff6c\103\uff6c\107\uff6c\111" +
    "\uff6c\122\uff6c\123\uff6c\001\002\000\036\006\uff6a\007\uff6a" +
    "\014\uff6a\015\uff6a\016\uff6a\046\uff6a\065\uff6a\101\uff6a\102" +
    "\040\103\uff6a\107\uff6a\111\uff6a\122\uff6a\123\uff6a\001\002" +
    "\000\004\122\041\001\002\000\036\006\uff6d\007\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\046\uff6d\065\uff6d\101\uff6d\102\uff6d" +
    "\103\uff6d\107\uff6d\111\uff6d\122\uff6d\123\uff6d\001\002\000" +
    "\006\110\044\122\035\001\002\000\004\103\045\001\002" +
    "\000\004\103\uff77\001\002\000\006\110\uff75\122\uff75\001" +
    "\002\000\004\111\u01c5\001\002\000\004\016\262\001\002" +
    "\000\004\113\u01af\001\002\000\030\006\066\007\070\014" +
    "\046\015\050\016\056\046\073\101\047\107\051\111\065" +
    "\122\055\123\063\001\002\000\004\065\u01ab\001\002\000" +
    "\030\065\ufebc\102\ufebc\103\ufebc\104\ufebc\105\ufebc\107\ufebc" +
    "\110\ufebc\112\ufebc\113\ufebc\115\ufebc\124\ufebc\001\002\000" +
    "\030\065\ufebd\102\ufebd\103\ufebd\104\ufebd\105\ufebd\107\ufebd" +
    "\110\ufebd\112\ufebd\113\ufebd\115\ufebd\124\ufebd\001\002\000" +
    "\136\037\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2\044\ufec2" +
    "\045\ufec2\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052\ufec2\053" +
    "\ufec2\055\ufec2\056\ufec2\057\ufec2\061\ufec2\062\ufec2\063\ufec2" +
    "\064\ufec2\065\ufec2\066\ufec2\067\ufec2\070\ufec2\071\ufec2\072" +
    "\ufec2\073\ufec2\074\ufec2\075\ufec2\076\ufec2\077\ufec2\100\ufec2" +
    "\101\ufec2\102\ufec2\103\ufec2\104\ufec2\105\ufec2\106\u0104\107" +
    "\ufec2\110\ufec2\111\ufec2\112\ufec2\113\ufec2\115\ufec2\124\ufec2" +
    "\125\ufec2\001\002\000\030\006\ufe87\007\ufe87\014\ufe87\015" +
    "\ufe87\016\ufe87\046\ufe87\101\u01aa\107\ufe87\111\ufe87\122\ufe87" +
    "\123\ufe87\001\002\000\030\065\ufebe\102\ufebe\103\ufebe\104" +
    "\ufebe\105\ufebe\107\ufebe\110\ufebe\112\ufebe\113\ufebe\115\ufebe" +
    "\124\ufebe\001\002\000\030\065\ufec7\102\ufec7\103\ufec7\104" +
    "\ufec7\105\ufec7\107\ufec7\110\ufec7\112\ufec7\113\ufec7\115\ufec7" +
    "\124\ufec7\001\002\000\004\065\uff71\001\002\000\030\065" +
    "\ufec8\102\ufec8\103\ufec8\104\ufec8\105\ufec8\107\ufec8\110\ufec8" +
    "\112\ufec8\113\ufec8\115\ufec8\124\ufec8\001\002\000\134\037" +
    "\ufec4\040\ufec4\041\ufec4\042\ufec4\043\ufec4\044\ufec4\045\ufec4" +
    "\046\ufec4\047\ufec4\050\ufec4\051\ufec4\052\ufec4\053\ufec4\055" +
    "\ufec4\056\ufec4\057\ufec4\061\ufec4\062\ufec4\063\ufec4\064\ufec4" +
    "\065\ufec4\066\ufec4\067\ufec4\070\ufec4\071\ufec4\072\ufec4\073" +
    "\ufec4\074\ufec4\075\ufec4\076\ufec4\077\ufec4\100\ufec4\101\ufec4" +
    "\102\ufec4\103\ufec4\104\ufec4\105\ufec4\107\ufec4\110\ufec4\111" +
    "\ufec4\112\ufec4\113\ufec4\115\ufec4\124\ufec4\125\ufec4\001\002" +
    "\000\030\065\ufec0\102\ufec0\103\ufec0\104\ufec0\105\ufec0\107" +
    "\ufec0\110\ufec0\112\ufec0\113\ufec0\115\ufec0\124\ufec0\001\002" +
    "\000\064\006\233\007\070\014\046\015\050\016\056\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\107\224\111\065\112\231\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\004\107\115\001\002\000\030\065\ufebb\102" +
    "\ufebb\103\ufebb\104\ufebb\105\ufebb\107\ufebb\110\ufebb\112\ufebb" +
    "\113\ufebb\115\ufebb\124\ufebb\001\002\000\004\113\103\001" +
    "\002\000\030\065\ufec1\102\ufec1\103\ufec1\104\ufec1\105\ufec1" +
    "\107\ufec1\110\ufec1\112\ufec1\113\ufec1\115\ufec1\124\ufec1\001" +
    "\002\000\030\065\ufeba\102\ufeba\103\ufeba\104\ufeba\105\ufeba" +
    "\107\ufeba\110\ufeba\112\ufeba\113\ufeba\115\ufeba\124\ufeba\001" +
    "\002\000\030\006\066\007\070\014\046\015\050\016\056" +
    "\046\073\101\047\107\051\111\065\122\055\123\063\001" +
    "\002\000\030\006\066\007\070\014\046\015\050\016\056" +
    "\046\073\101\047\107\051\111\065\122\055\123\063\001" +
    "\002\000\030\065\ufebf\102\ufebf\103\ufebf\104\ufebf\105\ufebf" +
    "\107\ufebf\110\ufebf\112\ufebf\113\ufebf\115\ufebf\124\ufebf\001" +
    "\002\000\004\103\uff76\001\002\000\030\065\ufe88\102\ufe88" +
    "\103\ufe88\104\ufe88\105\ufe88\107\ufe88\110\ufe88\112\ufe88\113" +
    "\ufe88\115\ufe88\124\ufe88\001\002\000\030\065\ufeb7\102\ufeb7" +
    "\103\ufeb7\104\ufeb7\105\ufeb7\107\ufeb7\110\ufeb7\112\ufeb7\113" +
    "\ufeb7\115\ufeb7\124\ufeb7\001\002\000\030\065\ufeb5\102\ufeb5" +
    "\103\ufeb5\104\ufeb5\105\ufeb5\107\ufeb5\110\ufeb5\112\ufeb5\113" +
    "\ufeb5\115\ufeb5\124\ufeb5\001\002\000\030\065\ufeb6\102\ufeb6" +
    "\103\ufeb6\104\ufeb6\105\ufeb6\107\ufeb6\110\ufeb6\112\ufeb6\113" +
    "\ufeb6\115\ufeb6\124\ufeb6\001\002\000\006\114\ufe91\122\ufe91" +
    "\001\002\000\006\114\107\122\105\001\002\000\010\103" +
    "\ufe8c\106\116\107\115\001\002\000\004\103\110\001\002" +
    "\000\030\065\ufe93\102\ufe93\103\ufe93\104\ufe93\105\ufe93\107" +
    "\ufe93\110\ufe93\112\ufe93\113\ufe93\115\ufe93\124\ufe93\001\002" +
    "\000\006\114\ufe92\122\ufe92\001\002\000\004\103\ufe8f\001" +
    "\002\000\056\006\066\007\070\014\046\015\050\016\056" +
    "\046\073\065\ufeb1\101\047\102\ufeb1\103\ufeb1\104\ufeb1\105" +
    "\ufeb1\107\ufeb1\110\ufeb1\111\065\112\ufeb1\113\ufeb1\115\ufeb1" +
    "\122\055\123\063\124\ufeb1\125\155\001\002\000\004\103" +
    "\ufe8e\001\002\000\004\103\ufe90\001\002\000\034\006\066" +
    "\007\070\014\046\015\050\016\056\046\073\101\047\104" +
    "\130\107\120\110\ufea6\111\065\122\122\123\125\001\002" +
    "\000\004\122\117\001\002\000\004\103\ufe8d\001\002\000" +
    "\030\006\066\007\070\014\046\015\050\016\056\046\073" +
    "\101\047\107\051\111\065\122\055\123\063\001\002\000" +
    "\006\102\134\110\ufe9b\001\002\000\044\006\000\007\000" +
    "\014\000\015\000\016\000\046\000\066\000\101\000\102" +
    "\000\103\000\104\000\106\000\107\000\110\000\111\000" +
    "\122\000\123\000\001\002\000\006\102\ufea2\110\ufea2\001" +
    "\002\000\004\110\ufea7\001\002\000\044\006\uffff\007\uffff" +
    "\014\uffff\015\uffff\016\uffff\046\uffff\066\uffff\101\uffff\102" +
    "\uffff\103\uffff\104\uffff\106\uffff\107\uffff\110\uffff\111\uffff" +
    "\122\uffff\123\uffff\001\002\000\034\006\066\007\070\014" +
    "\046\015\050\016\056\046\073\101\047\102\142\104\143" +
    "\107\051\111\065\122\055\123\063\001\002\000\004\110" +
    "\137\001\002\000\030\006\066\007\070\014\046\015\050" +
    "\016\056\046\073\101\047\107\051\111\065\122\055\123" +
    "\063\001\002\000\004\110\ufea0\001\002\000\004\110\ufea3" +
    "\001\002\000\006\102\134\110\ufe9b\001\002\000\034\006" +
    "\066\007\070\014\046\015\050\016\056\046\073\101\047" +
    "\104\130\107\120\110\ufe9c\111\065\122\122\123\125\001" +
    "\002\000\004\110\ufe9f\001\002\000\004\110\ufe9d\001\002" +
    "\000\056\006\ufea8\007\ufea8\014\ufea8\015\ufea8\016\ufea8\046" +
    "\ufea8\065\ufea8\101\ufea8\102\ufea8\103\ufea8\104\ufea8\105\ufea8" +
    "\107\ufea8\110\ufea8\111\ufea8\112\ufea8\113\ufea8\115\ufea8\122" +
    "\ufea8\123\ufea8\124\ufea8\125\ufea8\001\002\000\004\110\ufe9a" +
    "\001\002\000\006\102\134\110\ufe9b\001\002\000\006\122" +
    "\122\123\125\001\002\000\030\006\066\007\070\014\046" +
    "\015\050\016\056\046\073\101\047\107\051\111\065\122" +
    "\055\123\063\001\002\000\006\102\134\110\ufe9b\001\002" +
    "\000\004\110\ufe98\001\002\000\034\006\066\007\070\014" +
    "\046\015\050\016\056\046\073\101\047\102\142\104\143" +
    "\107\051\111\065\122\055\123\063\001\002\000\004\110" +
    "\ufe99\001\002\000\004\110\ufe97\001\002\000\004\110\ufe9e" +
    "\001\002\000\004\110\153\001\002\000\006\102\ufea1\110" +
    "\ufea1\001\002\000\030\065\ufeb2\102\ufeb2\103\ufeb2\104\ufeb2" +
    "\105\ufeb2\107\ufeb2\110\ufeb2\112\ufeb2\113\ufeb2\115\ufeb2\124" +
    "\ufeb2\001\002\000\004\107\161\001\002\000\030\065\ufeaf" +
    "\102\ufeaf\103\ufeaf\104\ufeaf\105\ufeaf\107\ufeaf\110\ufeaf\112" +
    "\ufeaf\113\ufeaf\115\ufeaf\124\ufeaf\001\002\000\030\065\ufeae" +
    "\102\ufeae\103\ufeae\104\ufeae\105\ufeae\107\ufeae\110\ufeae\112" +
    "\ufeae\113\ufeae\115\ufeae\124\ufeae\001\002\000\030\065\ufeb3" +
    "\102\ufeb3\103\ufeb3\104\ufeb3\105\ufeb3\107\ufeb3\110\ufeb3\112" +
    "\ufeb3\113\ufeb3\115\ufeb3\124\ufeb3\001\002\000\030\006\066" +
    "\007\070\014\046\015\050\016\056\046\073\101\047\107" +
    "\162\111\065\122\122\123\125\001\002\000\030\006\066" +
    "\007\070\014\046\015\050\016\056\046\073\101\047\107" +
    "\051\111\065\122\055\123\063\001\002\000\004\110\172" +
    "\001\002\000\004\110\ufeac\001\002\000\004\106\167\001" +
    "\002\000\004\110\ufead\001\002\000\006\122\122\123\125" +
    "\001\002\000\004\110\ufeaa\001\002\000\004\110\ufea9\001" +
    "\002\000\030\065\ufeb0\102\ufeb0\103\ufeb0\104\ufeb0\105\ufeb0" +
    "\107\ufeb0\110\ufeb0\112\ufeb0\113\ufeb0\115\ufeb0\124\ufeb0\001" +
    "\002\000\004\110\174\001\002\000\004\110\ufeab\001\002" +
    "\000\030\065\ufeb4\102\ufeb4\103\ufeb4\104\ufeb4\105\ufeb4\107" +
    "\ufeb4\110\ufeb4\112\ufeb4\113\ufeb4\115\ufeb4\124\ufeb4\001\002" +
    "\000\122\037\uffa0\040\255\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\254\047\uffa0\050\uffa0\051\uffa0\052\257" +
    "\053\251\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\074\252\075\253\076\uffa0\077\uffa0\100" +
    "\256\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\110\uffa0" +
    "\112\uffa0\113\uffa0\001\002\000\126\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9" +
    "\104\ufff9\105\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\125" +
    "\ufff9\001\002\000\030\006\066\007\070\014\046\015\050" +
    "\016\056\046\073\101\047\111\065\122\055\123\063\124" +
    "\200\001\002\000\126\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105" +
    "\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\125\ufff8\001\002" +
    "\000\100\037\uffa4\041\uffa4\042\uffa4\044\u01a1\045\u01a5\050" +
    "\u01a4\051\u01a2\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071" +
    "\u01a0\072\u01a3\073\uffa4\076\uffa4\077\uffa4\101\uffa4\102\uffa4" +
    "\103\uffa4\104\uffa4\105\uffa4\110\uffa4\112\uffa4\113\uffa4\001" +
    "\002\000\126\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\113\uffb3\125\uffb3\001\002\000\062" +
    "\006\ufff2\007\ufff2\014\ufff2\015\ufff2\016\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\042\ufff2\046\ufff2\047\ufff2\054\ufff2" +
    "\101\ufff2\107\ufff2\111\ufff2\115\ufff2\116\ufff2\117\ufff2\120" +
    "\ufff2\121\ufff2\122\ufff2\123\ufff2\124\ufff2\001\002\000\062" +
    "\037\uffa8\042\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\073\u01a8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\110\uffa8\112\uffa8\113\uffa8\001\002\000\130" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\107\uff7e\110\uffb2" +
    "\111\uffb2\112\uffb2\113\uffb2\125\uffb2\001\002\000\006\107" +
    "\uff7d\124\uff7d\001\002\000\126\037\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104" +
    "\ufffa\105\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\125\ufffa" +
    "\001\002\000\062\006\ufff4\007\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4\046\ufff4" +
    "\047\ufff4\054\ufff4\101\ufff4\107\ufff4\111\ufff4\115\ufff4\116" +
    "\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\124\ufff4" +
    "\001\002\000\062\006\233\007\070\014\046\015\050\016" +
    "\056\035\226\036\237\037\221\040\215\042\211\046\227" +
    "\047\204\054\213\101\234\107\224\111\065\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\062\006\ufff3\007\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3\046\ufff3" +
    "\047\ufff3\054\ufff3\101\ufff3\107\ufff3\111\ufff3\115\ufff3\116" +
    "\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3" +
    "\001\002\000\064\037\uffa6\041\u019d\042\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\073\uffa6\076\uffa6\077\uffa6\101" +
    "\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\110\uffa6\112\uffa6" +
    "\113\uffa6\001\002\000\062\006\ufff0\007\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0" +
    "\046\ufff0\047\ufff0\054\ufff0\101\ufff0\107\ufff0\111\ufff0\115" +
    "\ufff0\116\ufff0\117\ufff0\120\ufff0\121\ufff0\122\ufff0\123\ufff0" +
    "\124\ufff0\001\002\000\126\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\105\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\125\uffb0\001" +
    "\002\000\004\112\u019b\001\002\000\126\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\055\uffae\056\uffae" +
    "\057\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\110\uffae\111\uffae\112\uffae\113\uffae" +
    "\125\uffae\001\002\000\062\006\ufff5\007\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5" +
    "\046\ufff5\047\ufff5\054\ufff5\101\ufff5\107\ufff5\111\ufff5\115" +
    "\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122\ufff5\123\ufff5" +
    "\124\ufff5\001\002\000\126\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\105\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\125\uffaf\001" +
    "\002\000\122\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\055\uff9e\056\uff9e\057\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\110" +
    "\uff9e\112\uff9e\113\uff9e\001\002\000\062\006\233\007\070" +
    "\014\046\015\050\016\056\035\226\036\237\037\221\040" +
    "\215\042\211\046\227\047\204\054\213\101\234\107\224" +
    "\111\065\115\201\116\210\117\241\120\177\121\236\122" +
    "\055\123\063\124\200\001\002\000\126\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad" +
    "\057\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066" +
    "\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad" +
    "\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103" +
    "\uffad\104\uffad\105\uffad\110\uffad\111\u0132\112\uffad\113\uffad" +
    "\125\u0196\001\002\000\126\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076" +
    "\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7" +
    "\105\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\125\ufff7\001" +
    "\002\000\062\006\ufff1\007\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\046\ufff1\047" +
    "\ufff1\054\ufff1\101\ufff1\107\ufff1\111\ufff1\115\ufff1\116\ufff1" +
    "\117\ufff1\120\ufff1\121\ufff1\122\ufff1\123\ufff1\124\ufff1\001" +
    "\002\000\004\107\u0190\001\002\000\030\006\066\007\070" +
    "\014\046\015\050\016\056\046\073\101\047\107\051\111" +
    "\065\122\055\123\063\001\002\000\126\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa" +
    "\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\125\uffaa\001\002\000\004\107\115\001\002\000\062\006" +
    "\uffef\007\uffef\014\uffef\015\uffef\016\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\042\uffef\046\uffef\047\uffef\054\uffef\101" +
    "\uffef\107\uffef\111\uffef\115\uffef\116\uffef\117\uffef\120\uffef" +
    "\121\uffef\122\uffef\123\uffef\124\uffef\001\002\000\004\112" +
    "\ufeb9\001\002\000\126\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105" +
    "\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\125\ufffb\001\002" +
    "\000\126\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\055\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\110\ufff6" +
    "\111\ufff6\112\ufff6\113\ufff6\125\ufff6\001\002\000\104\037" +
    "\243\041\uffa2\042\244\043\245\044\uffa2\045\uffa2\047\246" +
    "\050\uffa2\051\uffa2\055\uffa2\056\uffa2\057\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\076\uffa2\077\uffa2\101\uffa2\102" +
    "\uffa2\103\uffa2\104\uffa2\105\uffa2\110\uffa2\112\uffa2\113\uffa2" +
    "\001\002\000\126\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077" +
    "\ufffc\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc" +
    "\110\ufffc\111\ufffc\112\ufffc\113\ufffc\125\ufffc\001\002\000" +
    "\126\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\055\uffab\056\uffab\057\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\110\uffab\111" +
    "\uffab\112\uffab\113\uffab\125\uffab\001\002\000\062\006\uffe7" +
    "\007\uffe7\014\uffe7\015\uffe7\016\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\042\uffe7\046\uffe7\047\uffe7\054\uffe7\101\uffe7" +
    "\107\uffe7\111\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121" +
    "\uffe7\122\uffe7\123\uffe7\124\uffe7\001\002\000\062\006\uffe6" +
    "\007\uffe6\014\uffe6\015\uffe6\016\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\046\uffe6\047\uffe6\054\uffe6\101\uffe6" +
    "\107\uffe6\111\uffe6\115\uffe6\116\uffe6\117\uffe6\120\uffe6\121" +
    "\uffe6\122\uffe6\123\uffe6\124\uffe6\001\002\000\062\006\uffe5" +
    "\007\uffe5\014\uffe5\015\uffe5\016\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\046\uffe5\047\uffe5\054\uffe5\101\uffe5" +
    "\107\uffe5\111\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121" +
    "\uffe5\122\uffe5\123\uffe5\124\uffe5\001\002\000\062\006\uffe4" +
    "\007\uffe4\014\uffe4\015\uffe4\016\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\042\uffe4\046\uffe4\047\uffe4\054\uffe4\101\uffe4" +
    "\107\uffe4\111\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121" +
    "\uffe4\122\uffe4\123\uffe4\124\uffe4\001\002\000\062\006\233" +
    "\007\070\014\046\015\050\016\056\035\226\036\237\037" +
    "\221\040\215\042\211\046\227\047\204\054\213\101\234" +
    "\107\224\111\065\115\201\116\210\117\241\120\177\121" +
    "\236\122\055\123\063\124\200\001\002\000\122\037\uffa1" +
    "\040\255\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\254\047\uffa1\050\uffa1\051\uffa1\052\257\053\251\055\uffa1" +
    "\056\uffa1\057\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\252\075\253\076\uffa1\077\uffa1\100\256\101\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\110\uffa1\112\uffa1\113\uffa1" +
    "\001\002\000\062\006\uffec\007\uffec\014\uffec\015\uffec\016" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\046\uffec" +
    "\047\uffec\054\uffec\101\uffec\107\uffec\111\uffec\115\uffec\116" +
    "\uffec\117\uffec\120\uffec\121\uffec\122\uffec\123\uffec\124\uffec" +
    "\001\002\000\062\006\uffeb\007\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\046\uffeb" +
    "\047\uffeb\054\uffeb\101\uffeb\107\uffeb\111\uffeb\115\uffeb\116" +
    "\uffeb\117\uffeb\120\uffeb\121\uffeb\122\uffeb\123\uffeb\124\uffeb" +
    "\001\002\000\062\006\uffea\007\uffea\014\uffea\015\uffea\016" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\046\uffea" +
    "\047\uffea\054\uffea\101\uffea\107\uffea\111\uffea\115\uffea\116" +
    "\uffea\117\uffea\120\uffea\121\uffea\122\uffea\123\uffea\124\uffea" +
    "\001\002\000\062\006\uffee\007\uffee\014\uffee\015\uffee\016" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee\046\uffee" +
    "\047\uffee\054\uffee\101\uffee\107\uffee\111\uffee\115\uffee\116" +
    "\uffee\117\uffee\120\uffee\121\uffee\122\uffee\123\uffee\124\uffee" +
    "\001\002\000\062\006\uffe9\007\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\046\uffe9" +
    "\047\uffe9\054\uffe9\101\uffe9\107\uffe9\111\uffe9\115\uffe9\116" +
    "\uffe9\117\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9" +
    "\001\002\000\062\006\uffe8\007\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\046\uffe8" +
    "\047\uffe8\054\uffe8\101\uffe8\107\uffe8\111\uffe8\115\uffe8\116" +
    "\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8" +
    "\001\002\000\062\006\uffed\007\uffed\014\uffed\015\uffed\016" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042\uffed\046\uffed" +
    "\047\uffed\054\uffed\101\uffed\107\uffed\111\uffed\115\uffed\116" +
    "\uffed\117\uffed\120\uffed\121\uffed\122\uffed\123\uffed\124\uffed" +
    "\001\002\000\062\006\233\007\070\014\046\015\050\016" +
    "\056\035\226\036\237\037\221\040\215\042\211\046\227" +
    "\047\204\054\213\101\234\107\224\111\065\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\122\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f" +
    "\110\uff9f\112\uff9f\113\uff9f\001\002\000\030\006\ufe85\007" +
    "\ufe85\014\ufe85\015\ufe85\016\ufe85\046\ufe85\101\ufe85\107\ufe85" +
    "\111\ufe85\122\ufe85\123\ufe85\001\002\000\014\102\ufeb4\104" +
    "\ufeb4\107\ufeb4\110\ufeb4\113\265\001\002\000\126\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\104\uffc3\105\uffc3\110\uffc3\111\uffc3\112\uffc3" +
    "\113\uffc3\125\uffc3\001\002\000\124\004\316\006\233\007" +
    "\070\010\305\012\273\013\271\014\046\015\050\016\056" +
    "\020\302\022\312\023\030\024\307\025\324\027\023\030" +
    "\323\031\313\033\315\034\022\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\103" +
    "\uff3b\107\224\111\065\113\265\114\uff26\115\201\116\210" +
    "\117\241\120\177\121\236\122\267\123\063\124\317\001" +
    "\002\000\004\103\uff67\001\002\000\120\037\ufec2\040\ufec2" +
    "\041\ufec2\042\ufec2\043\ufec2\044\ufec2\045\ufec2\046\ufec2\047" +
    "\ufec2\050\ufec2\051\ufec2\052\ufec2\053\ufec2\055\ufec2\056\ufec2" +
    "\057\ufec2\061\ufec2\062\ufec2\063\ufec2\064\ufec2\065\ufec2\067" +
    "\ufec2\070\ufec2\071\ufec2\072\ufec2\073\ufec2\074\ufec2\075\ufec2" +
    "\076\ufec2\077\ufec2\100\ufec2\101\ufec2\102\ufec2\103\ufec2\105" +
    "\u018d\106\u0104\107\ufec2\111\ufec2\125\ufec2\001\002\000\004" +
    "\103\u018b\001\002\000\062\006\233\007\070\014\046\015" +
    "\050\016\056\035\226\036\237\037\221\040\215\042\211" +
    "\046\227\047\204\054\213\101\234\107\224\111\065\115" +
    "\201\116\210\117\241\120\177\121\236\122\055\123\063" +
    "\124\200\001\002\000\004\103\uff5d\001\002\000\062\006" +
    "\233\007\070\014\046\015\050\016\056\035\226\036\237" +
    "\037\221\040\215\042\211\046\227\047\204\054\213\101" +
    "\234\107\224\111\065\115\201\116\210\117\241\120\177" +
    "\121\236\122\055\123\063\124\200\001\002\000\004\103" +
    "\uff68\001\002\000\004\103\uff63\001\002\000\004\103\uff65" +
    "\001\002\000\004\103\uff64\001\002\000\004\103\uff60\001" +
    "\002\000\004\103\uff5c\001\002\000\010\103\ufeeb\122\122" +
    "\123\125\001\002\000\004\103\uff5f\001\002\000\004\103" +
    "\uff5e\001\002\000\004\113\u0174\001\002\000\004\103\uff69" +
    "\001\002\000\004\103\ufeea\001\002\000\004\103\uff66\001" +
    "\002\000\026\055\u011c\056\u011f\057\u011d\061\u0119\062\u0118" +
    "\063\u011e\064\u0124\065\u0173\067\u011a\070\u011b\001\002\000" +
    "\066\006\233\007\070\014\046\015\050\016\056\035\226" +
    "\036\237\037\221\040\215\042\211\046\227\047\204\054" +
    "\213\101\234\103\uff3b\107\224\111\065\115\201\116\210" +
    "\117\241\120\177\121\236\122\055\123\063\124\317\125" +
    "\u0127\001\002\000\070\006\233\007\070\014\046\015\050" +
    "\016\056\026\uff19\035\226\036\237\037\221\040\215\042" +
    "\211\046\227\047\204\054\213\101\234\103\uff3b\107\224" +
    "\111\065\113\uff20\115\201\116\210\117\241\120\177\121" +
    "\236\122\055\123\063\124\317\001\002\000\004\103\uff5b" +
    "\001\002\000\064\006\233\007\070\014\046\015\050\016" +
    "\056\035\226\036\237\037\221\040\215\042\211\046\227" +
    "\047\204\054\213\101\234\103\ufee5\107\224\111\065\115" +
    "\201\116\210\117\241\120\177\121\236\122\055\123\063" +
    "\124\200\001\002\000\010\103\ufeeb\122\122\123\125\001" +
    "\002\000\030\006\066\007\070\014\046\015\050\016\056" +
    "\046\073\101\047\111\065\122\364\123\370\124\200\001" +
    "\002\000\004\114\363\001\002\000\004\103\uff62\001\002" +
    "\000\006\103\uff3d\113\uff3d\001\002\000\010\103\ufeeb\122" +
    "\122\123\125\001\002\000\064\006\uff00\007\uff00\014\uff00" +
    "\015\uff00\016\uff00\035\uff00\036\uff00\037\uff00\040\uff00\042" +
    "\uff00\046\uff00\047\uff00\054\uff00\101\uff00\107\uff00\111\uff00" +
    "\115\uff00\116\uff00\117\uff00\120\uff00\121\uff00\122\uff00\123" +
    "\uff00\124\uff00\125\uff00\001\002\000\046\037\332\042\334" +
    "\055\uff81\056\uff81\057\uff81\061\uff81\062\uff81\063\uff81\064" +
    "\uff81\065\uff81\067\uff81\070\uff81\076\331\077\333\101\336" +
    "\102\327\103\uff35\113\uff35\001\002\000\004\103\uff61\001" +
    "\002\000\062\006\233\007\070\014\046\015\050\016\056" +
    "\035\226\036\237\037\221\040\215\042\211\046\227\047" +
    "\204\054\213\101\234\107\224\111\065\115\201\116\210" +
    "\117\241\120\177\121\236\122\055\123\063\124\200\001" +
    "\002\000\006\103\uff3e\113\uff3e\001\002\000\006\103\uff39" +
    "\113\uff39\001\002\000\004\037\341\001\002\000\006\103" +
    "\uff38\113\uff38\001\002\000\004\042\340\001\002\000\042" +
    "\055\uff83\056\uff83\057\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\065\uff83\066\uff83\067\uff83\070\uff83\103\uff83\104\uff83" +
    "\105\uff83\110\uff83\113\uff83\001\002\000\062\006\233\007" +
    "\070\014\046\015\050\016\056\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\107" +
    "\224\111\065\115\201\116\210\117\241\120\177\121\236" +
    "\122\055\123\063\124\200\001\002\000\006\103\uff3a\113" +
    "\uff3a\001\002\000\006\103\uff36\113\uff36\001\002\000\006" +
    "\103\uff37\113\uff37\001\002\000\044\055\uff81\056\uff81\057" +
    "\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81" +
    "\067\uff81\070\uff81\102\327\103\uff81\104\uff81\105\uff81\110" +
    "\uff81\113\uff81\001\002\000\042\055\uff82\056\uff82\057\uff82" +
    "\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\070\uff82\103\uff82\104\uff82\105\uff82\110\uff82\113\uff82" +
    "\001\002\000\064\006\ufefc\007\ufefc\014\ufefc\015\ufefc\016" +
    "\ufefc\035\ufefc\036\ufefc\037\ufefc\040\ufefc\042\ufefc\046\ufefc" +
    "\047\ufefc\054\ufefc\101\ufefc\107\ufefc\111\ufefc\115\ufefc\116" +
    "\ufefc\117\ufefc\120\ufefc\121\ufefc\122\ufefc\123\ufefc\124\ufefc" +
    "\125\345\001\002\000\064\006\233\007\070\014\046\015" +
    "\050\016\056\035\226\036\237\037\221\040\215\042\211" +
    "\046\227\047\204\054\213\101\234\103\uff3b\107\224\111" +
    "\065\115\201\116\210\117\241\120\177\121\236\122\055" +
    "\123\063\124\317\001\002\000\062\006\233\007\070\014" +
    "\046\015\050\016\056\035\226\036\237\037\221\040\215" +
    "\042\211\046\227\047\204\054\213\101\234\107\224\111" +
    "\065\115\201\116\210\117\241\120\177\121\236\122\055" +
    "\123\063\124\200\001\002\000\004\113\ufeff\001\002\000" +
    "\004\113\265\001\002\000\006\017\352\103\ufef8\001\002" +
    "\000\006\025\324\113\ufefa\001\002\000\004\103\ufefe\001" +
    "\002\000\004\103\ufefb\001\002\000\004\113\265\001\002" +
    "\000\004\103\ufef9\001\002\000\004\103\360\001\002\000" +
    "\062\006\ufefd\007\ufefd\014\ufefd\015\ufefd\016\ufefd\035\ufefd" +
    "\036\ufefd\037\ufefd\040\ufefd\042\ufefd\046\ufefd\047\ufefd\054" +
    "\ufefd\101\ufefd\107\ufefd\111\ufefd\115\ufefd\116\ufefd\117\ufefd" +
    "\120\ufefd\121\ufefd\122\ufefd\123\ufefd\124\ufefd\001\002\000" +
    "\004\103\ufee8\001\002\000\004\103\ufeec\001\002\000\130" +
    "\017\uff25\037\uff25\040\uff25\041\uff25\042\uff25\043\uff25\044" +
    "\uff25\045\uff25\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25" +
    "\053\uff25\055\uff25\056\uff25\057\uff25\061\uff25\062\uff25\063" +
    "\uff25\064\uff25\065\uff25\066\uff25\067\uff25\070\uff25\071\uff25" +
    "\072\uff25\073\uff25\074\uff25\075\uff25\076\uff25\077\uff25\100" +
    "\uff25\101\uff25\102\uff25\103\uff25\104\uff25\105\uff25\110\uff25" +
    "\111\uff25\112\uff25\113\uff25\125\uff25\001\002\000\070\037" +
    "\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2\044\ufec2\045\ufec2" +
    "\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052\ufec2\053\ufec2\066" +
    "\000\071\ufec2\072\ufec2\073\ufec2\074\ufec2\075\ufec2\100\ufec2" +
    "\102\000\106\u0104\107\ufec2\111\ufec2\113\ufec2\124\ufec2\125" +
    "\ufec2\001\002\000\004\124\uff7e\001\002\000\004\124\u0102" +
    "\001\002\000\006\066\ufecb\102\376\001\002\000\066\037" +
    "\ufec4\040\ufec4\041\ufec4\042\ufec4\043\ufec4\044\ufec4\045\ufec4" +
    "\046\ufec4\047\ufec4\050\ufec4\051\ufec4\052\ufec4\053\ufec4\066" +
    "\uffff\071\ufec4\072\ufec4\073\ufec4\074\ufec4\075\ufec4\100\ufec4" +
    "\102\uffff\107\ufec4\111\ufec4\113\ufec4\124\ufec4\125\ufec4\001" +
    "\002\000\006\103\uff3c\113\uff3c\001\002\000\004\066\373" +
    "\001\002\000\062\006\233\007\070\014\046\015\050\016" +
    "\056\035\226\036\237\037\221\040\215\042\211\046\227" +
    "\047\204\054\213\101\234\107\224\111\065\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\006\103\uff28\113\uff28\001\002\000\016\102" +
    "\327\103\uff81\104\uff81\105\uff81\110\uff81\113\uff81\001\002" +
    "\000\006\122\122\123\125\001\002\000\004\066\ufecd\001" +
    "\002\000\034\006\ufecb\007\ufecb\014\ufecb\015\ufecb\016\ufecb" +
    "\046\ufecb\066\ufecb\101\ufecb\102\376\107\ufecb\111\ufecb\122" +
    "\ufecb\123\ufecb\001\002\000\032\006\ufecc\007\ufecc\014\ufecc" +
    "\015\ufecc\016\ufecc\046\ufecc\066\ufecc\101\ufecc\107\ufecc\111" +
    "\ufecc\122\ufecc\123\ufecc\001\002\000\006\107\uff7c\124\uff7c" +
    "\001\002\000\134\037\ufec5\040\ufec5\041\ufec5\042\ufec5\043" +
    "\ufec5\044\ufec5\045\ufec5\046\ufec5\047\ufec5\050\ufec5\051\ufec5" +
    "\052\ufec5\053\ufec5\055\ufec5\056\ufec5\057\ufec5\061\ufec5\062" +
    "\ufec5\063\ufec5\064\ufec5\065\ufec5\066\ufec5\067\ufec5\070\ufec5" +
    "\071\ufec5\072\ufec5\073\ufec5\074\ufec5\075\ufec5\076\ufec5\077" +
    "\ufec5\100\ufec5\101\ufec5\102\ufec5\103\ufec5\104\ufec5\105\ufec5" +
    "\107\ufec5\110\ufec5\111\ufec5\112\ufec5\113\ufec5\115\ufec5\124" +
    "\ufec5\125\ufec5\001\002\000\004\122\u0105\001\002\000\134" +
    "\037\ufec3\040\ufec3\041\ufec3\042\ufec3\043\ufec3\044\ufec3\045" +
    "\ufec3\046\ufec3\047\ufec3\050\ufec3\051\ufec3\052\ufec3\053\ufec3" +
    "\055\ufec3\056\ufec3\057\ufec3\061\ufec3\062\ufec3\063\ufec3\064" +
    "\ufec3\065\ufec3\066\ufec3\067\ufec3\070\ufec3\071\ufec3\072\ufec3" +
    "\073\ufec3\074\ufec3\075\ufec3\076\ufec3\077\ufec3\100\ufec3\101" +
    "\ufec3\102\ufec3\103\ufec3\104\ufec3\105\ufec3\107\ufec3\110\ufec3" +
    "\111\ufec3\112\ufec3\113\ufec3\115\ufec3\124\ufec3\125\ufec3\001" +
    "\002\000\004\103\ufee7\001\002\000\004\103\ufee6\001\002" +
    "\000\004\103\ufee4\001\002\000\030\055\u011c\056\u011f\057" +
    "\u011d\061\u0119\062\u0118\063\u011e\064\u0124\065\u0121\066\u0122" +
    "\067\u011a\070\u011b\001\002\000\004\113\uff22\001\002\000" +
    "\004\113\265\001\002\000\004\026\u0115\001\002\000\004" +
    "\103\u0110\001\002\000\004\113\uff21\001\002\000\050\037" +
    "\332\042\334\055\uff81\056\uff81\057\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\076" +
    "\331\077\333\101\336\102\327\103\uff35\113\uff23\001\002" +
    "\000\064\006\233\007\070\014\046\015\050\016\056\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\103\uff87\107\224\111\065\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\004\103\u0113\001\002\000\010\103\uff88\112" +
    "\uff88\113\uff88\001\002\000\064\006\233\007\070\014\046" +
    "\015\050\016\056\035\226\036\237\037\221\040\215\042" +
    "\211\046\227\047\204\054\213\101\234\107\224\111\065" +
    "\113\uff3b\115\201\116\210\117\241\120\177\121\236\122" +
    "\055\123\063\124\317\001\002\000\004\113\uff1f\001\002" +
    "\000\062\006\233\007\070\014\046\015\050\016\056\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\107\224\111\065\115\201\116\210\117" +
    "\241\120\177\121\236\122\055\123\063\124\200\001\002" +
    "\000\004\113\uff16\001\002\000\004\103\uff24\001\002\000" +
    "\062\006\uff30\007\uff30\014\uff30\015\uff30\016\uff30\035\uff30" +
    "\036\uff30\037\uff30\040\uff30\042\uff30\046\uff30\047\uff30\054" +
    "\uff30\101\uff30\107\uff30\111\uff30\115\uff30\116\uff30\117\uff30" +
    "\120\uff30\121\uff30\122\uff30\123\uff30\124\uff30\001\002\000" +
    "\062\006\uff32\007\uff32\014\uff32\015\uff32\016\uff32\035\uff32" +
    "\036\uff32\037\uff32\040\uff32\042\uff32\046\uff32\047\uff32\054" +
    "\uff32\101\uff32\107\uff32\111\uff32\115\uff32\116\uff32\117\uff32" +
    "\120\uff32\121\uff32\122\uff32\123\uff32\124\uff32\001\002\000" +
    "\062\006\uff2d\007\uff2d\014\uff2d\015\uff2d\016\uff2d\035\uff2d" +
    "\036\uff2d\037\uff2d\040\uff2d\042\uff2d\046\uff2d\047\uff2d\054" +
    "\uff2d\101\uff2d\107\uff2d\111\uff2d\115\uff2d\116\uff2d\117\uff2d" +
    "\120\uff2d\121\uff2d\122\uff2d\123\uff2d\124\uff2d\001\002\000" +
    "\062\006\uff2c\007\uff2c\014\uff2c\015\uff2c\016\uff2c\035\uff2c" +
    "\036\uff2c\037\uff2c\040\uff2c\042\uff2c\046\uff2c\047\uff2c\054" +
    "\uff2c\101\uff2c\107\uff2c\111\uff2c\115\uff2c\116\uff2c\117\uff2c" +
    "\120\uff2c\121\uff2c\122\uff2c\123\uff2c\124\uff2c\001\002\000" +
    "\062\006\uff31\007\uff31\014\uff31\015\uff31\016\uff31\035\uff31" +
    "\036\uff31\037\uff31\040\uff31\042\uff31\046\uff31\047\uff31\054" +
    "\uff31\101\uff31\107\uff31\111\uff31\115\uff31\116\uff31\117\uff31" +
    "\120\uff31\121\uff31\122\uff31\123\uff31\124\uff31\001\002\000" +
    "\062\006\uff2b\007\uff2b\014\uff2b\015\uff2b\016\uff2b\035\uff2b" +
    "\036\uff2b\037\uff2b\040\uff2b\042\uff2b\046\uff2b\047\uff2b\054" +
    "\uff2b\101\uff2b\107\uff2b\111\uff2b\115\uff2b\116\uff2b\117\uff2b" +
    "\120\uff2b\121\uff2b\122\uff2b\123\uff2b\124\uff2b\001\002\000" +
    "\062\006\uff2f\007\uff2f\014\uff2f\015\uff2f\016\uff2f\035\uff2f" +
    "\036\uff2f\037\uff2f\040\uff2f\042\uff2f\046\uff2f\047\uff2f\054" +
    "\uff2f\101\uff2f\107\uff2f\111\uff2f\115\uff2f\116\uff2f\117\uff2f" +
    "\120\uff2f\121\uff2f\122\uff2f\123\uff2f\124\uff2f\001\002\000" +
    "\062\006\uff2a\007\uff2a\014\uff2a\015\uff2a\016\uff2a\035\uff2a" +
    "\036\uff2a\037\uff2a\040\uff2a\042\uff2a\046\uff2a\047\uff2a\054" +
    "\uff2a\101\uff2a\107\uff2a\111\uff2a\115\uff2a\116\uff2a\117\uff2a" +
    "\120\uff2a\121\uff2a\122\uff2a\123\uff2a\124\uff2a\001\002\000" +
    "\062\006\uff34\007\uff34\014\uff34\015\uff34\016\uff34\035\uff34" +
    "\036\uff34\037\uff34\040\uff34\042\uff34\046\uff34\047\uff34\054" +
    "\uff34\101\uff34\107\uff34\111\uff34\115\uff34\116\uff34\117\uff34" +
    "\120\uff34\121\uff34\122\uff34\123\uff34\124\uff34\001\002\000" +
    "\064\006\uff29\007\uff29\014\uff29\015\uff29\016\uff29\026\uff18" +
    "\035\uff29\036\uff29\037\uff29\040\uff29\042\uff29\046\uff29\047" +
    "\uff29\054\uff29\101\uff29\107\uff29\111\uff29\115\uff29\116\uff29" +
    "\117\uff29\120\uff29\121\uff29\122\uff29\123\uff29\124\uff29\001" +
    "\002\000\004\026\uff17\001\002\000\004\026\uff1a\001\002" +
    "\000\062\006\uff2e\007\uff2e\014\uff2e\015\uff2e\016\uff2e\035" +
    "\uff2e\036\uff2e\037\uff2e\040\uff2e\042\uff2e\046\uff2e\047\uff2e" +
    "\054\uff2e\101\uff2e\107\uff2e\111\uff2e\115\uff2e\116\uff2e\117" +
    "\uff2e\120\uff2e\121\uff2e\122\uff2e\123\uff2e\124\uff2e\001\002" +
    "\000\062\006\233\007\070\014\046\015\050\016\056\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\107\224\111\065\115\201\116\210\117" +
    "\241\120\177\121\236\122\055\123\063\124\200\001\002" +
    "\000\006\103\uff33\113\uff33\001\002\000\066\006\uff12\007" +
    "\uff12\014\uff12\015\uff12\016\uff12\035\uff12\036\uff12\037\uff12" +
    "\040\uff12\042\uff12\046\uff12\047\uff12\054\uff12\101\uff12\107" +
    "\uff12\111\uff12\113\uff12\115\uff12\116\uff12\117\uff12\120\uff12" +
    "\121\uff12\122\uff12\123\uff12\124\uff12\125\uff12\001\002\000" +
    "\004\103\uff15\001\002\000\004\103\u0172\001\002\000\066" +
    "\006\233\007\070\014\046\015\050\016\056\035\226\036" +
    "\237\037\221\040\215\042\211\046\227\047\204\054\213" +
    "\101\234\107\224\111\065\113\uff87\115\201\116\210\117" +
    "\241\120\177\121\236\122\364\123\370\124\200\125\u012c" +
    "\001\002\000\004\113\u0168\001\002\000\050\006\uff0b\007" +
    "\uff0b\014\uff0b\015\uff0b\016\uff0b\035\uff0b\036\uff0b\046\uff0b" +
    "\101\uff0b\107\uff0b\111\uff0b\115\uff0b\116\uff0b\117\uff0b\120" +
    "\uff0b\121\uff0b\122\uff0b\123\uff0b\124\uff0b\001\002\000\004" +
    "\113\u0159\001\002\000\004\066\u0158\001\002\000\050\006" +
    "\233\007\070\014\046\015\050\016\056\035\226\036\237" +
    "\046\073\101\047\107\224\111\065\115\201\116\210\117" +
    "\241\120\177\121\236\122\055\123\063\124\200\001\002" +
    "\000\004\103\uff14\001\002\000\006\111\u0132\125\u0133\001" +
    "\002\000\064\006\233\007\070\014\046\015\050\016\056" +
    "\035\226\036\237\037\221\040\215\042\211\046\227\047" +
    "\204\054\213\101\234\105\u014a\107\224\111\065\115\201" +
    "\116\210\117\241\120\177\121\236\122\055\123\063\124" +
    "\200\001\002\000\006\106\u0138\107\u0137\001\002\000\126" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\110\uffa9\111\uffa9" +
    "\112\uffa9\113\uffa9\125\uffa9\001\002\000\126\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c" +
    "\103\uff9c\104\uff9c\105\uff9c\110\uff9c\111\uff9c\112\uff9c\113" +
    "\uff9c\125\uff9c\001\002\000\126\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d" +
    "\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104" +
    "\uff9d\105\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\125\uff9d" +
    "\001\002\000\064\006\233\007\070\014\046\015\050\016" +
    "\056\035\226\036\237\037\221\040\215\042\211\046\227" +
    "\047\204\054\213\101\234\107\224\110\uff98\111\065\115" +
    "\201\116\210\117\241\120\177\121\236\122\055\123\063" +
    "\124\200\001\002\000\004\107\u0139\001\002\000\032\006" +
    "\066\007\070\014\046\015\050\016\056\027\u013b\046\073" +
    "\101\047\107\051\111\065\122\055\123\063\001\002\000" +
    "\004\110\u013d\001\002\000\004\110\u013c\001\002\000\004" +
    "\113\uff0d\001\002\000\126\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056\uff9b\057\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b" +
    "\105\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\125\uff9b\001" +
    "\002\000\012\102\u0146\104\uff94\107\uff7d\110\uff94\001\002" +
    "\000\006\104\uff97\110\uff97\001\002\000\006\104\u0144\110" +
    "\uff89\001\002\000\004\110\u0142\001\002\000\126\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\110\uff9a\111\uff9a\112\uff9a" +
    "\113\uff9a\125\uff9a\001\002\000\004\110\uff99\001\002\000" +
    "\006\102\u0145\110\uff8b\001\002\000\004\110\uff8a\001\002" +
    "\000\062\006\233\007\070\014\046\015\050\016\056\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\107\224\111\065\115\201\116\210\117" +
    "\241\120\177\121\236\122\055\123\063\124\200\001\002" +
    "\000\006\104\uff96\110\uff96\001\002\000\006\104\uff95\110" +
    "\uff95\001\002\000\126\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\055\uff92\056\uff92\057\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105" +
    "\uff92\110\uff92\111\uff92\112\uff92\113\uff92\125\uff92\001\002" +
    "\000\064\006\233\007\070\014\046\015\050\016\056\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\107\224\111\065\112\u0151\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\006\105\u014e\112\u014d\001\002\000\126\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\055" +
    "\uff93\056\uff93\057\uff93\061\uff93\062\uff93\063\uff93\064\uff93" +
    "\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073" +
    "\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93" +
    "\102\uff93\103\uff93\104\uff93\105\uff93\110\uff93\111\uff93\112" +
    "\uff93\113\uff93\125\uff93\001\002\000\126\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056\uff91" +
    "\057\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103" +
    "\uff91\104\uff91\105\uff91\110\uff91\111\uff91\112\uff91\113\uff91" +
    "\125\uff91\001\002\000\064\006\233\007\070\014\046\015" +
    "\050\016\056\035\226\036\237\037\221\040\215\042\211" +
    "\046\227\047\204\054\213\101\234\107\224\111\065\112" +
    "\uff87\115\201\116\210\117\241\120\177\121\236\122\055" +
    "\123\063\124\200\001\002\000\004\112\u0150\001\002\000" +
    "\126\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\055\uff90\056\uff90\057\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\110\uff90\111" +
    "\uff90\112\uff90\113\uff90\125\uff90\001\002\000\126\037\uff8f" +
    "\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f" +
    "\056\uff8f\057\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\103\uff8f\104\uff8f\105\uff8f\110\uff8f\111\uff8f\112\uff8f" +
    "\113\uff8f\125\uff8f\001\002\000\006\105\u0154\112\u0153\001" +
    "\002\000\126\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\110" +
    "\uff8c\111\uff8c\112\uff8c\113\uff8c\125\uff8c\001\002\000\062" +
    "\006\233\007\070\014\046\015\050\016\056\035\226\036" +
    "\237\037\221\040\215\042\211\046\227\047\204\054\213" +
    "\101\234\107\224\111\065\115\201\116\210\117\241\120" +
    "\177\121\236\122\055\123\063\124\200\001\002\000\126" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\057\uff8e\061\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e" +
    "\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\110\uff8e\111\uff8e" +
    "\112\uff8e\113\uff8e\125\uff8e\001\002\000\004\112\u0157\001" +
    "\002\000\126\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\061\uff8d\062\uff8d" +
    "\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071" +
    "\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d" +
    "\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\110" +
    "\uff8d\111\uff8d\112\uff8d\113\uff8d\125\uff8d\001\002\000\050" +
    "\006\uff0c\007\uff0c\014\uff0c\015\uff0c\016\uff0c\035\uff0c\036" +
    "\uff0c\046\uff0c\101\uff0c\107\uff0c\111\uff0c\115\uff0c\116\uff0c" +
    "\117\uff0c\120\uff0c\121\uff0c\122\uff0c\123\uff0c\124\uff0c\001" +
    "\002\000\010\005\u015a\011\u015c\114\uff09\001\002\000\004" +
    "\105\uff07\001\002\000\004\114\u0167\001\002\000\030\006" +
    "\066\007\070\014\046\015\050\016\056\046\073\101\047" +
    "\107\051\111\065\122\055\123\063\001\002\000\004\105" +
    "\u015e\001\002\000\130\004\316\005\uff26\006\233\007\070" +
    "\010\305\011\uff26\012\273\013\271\014\046\015\050\016" +
    "\056\020\302\022\312\023\030\024\307\025\324\027\023" +
    "\030\323\031\313\033\315\034\022\035\226\036\237\037" +
    "\221\040\215\042\211\046\227\047\204\054\213\101\234" +
    "\103\uff3b\107\224\111\065\113\265\114\uff26\115\201\116" +
    "\210\117\241\120\177\121\236\122\267\123\063\124\317" +
    "\001\002\000\010\005\u015a\011\u015c\114\uff09\001\002\000" +
    "\004\114\uff0a\001\002\000\004\105\uff08\001\002\000\006" +
    "\102\u0163\105\uff02\001\002\000\030\006\066\007\070\014" +
    "\046\015\050\016\056\046\073\101\047\107\051\111\065" +
    "\122\055\123\063\001\002\000\004\105\uff04\001\002\000" +
    "\006\102\u0163\105\uff02\001\002\000\004\105\uff03\001\002" +
    "\000\004\103\uff10\001\002\000\010\005\u0169\011\u016c\114" +
    "\uff0e\001\002\000\004\105\uff05\001\002\000\004\114\u0171" +
    "\001\002\000\004\105\u016e\001\002\000\062\006\233\007" +
    "\070\014\046\015\050\016\056\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\107" +
    "\224\111\065\115\201\116\210\117\241\120\177\121\236" +
    "\122\055\123\063\124\200\001\002\000\004\105\uff06\001" +
    "\002\000\130\004\316\005\uff26\006\233\007\070\010\305" +
    "\011\uff26\012\273\013\271\014\046\015\050\016\056\020" +
    "\302\022\312\023\030\024\307\025\324\027\023\030\323" +
    "\031\313\033\315\034\022\035\226\036\237\037\221\040" +
    "\215\042\211\046\227\047\204\054\213\101\234\103\uff3b" +
    "\107\224\111\065\113\265\114\uff26\115\201\116\210\117" +
    "\241\120\177\121\236\122\267\123\063\124\317\001\002" +
    "\000\010\005\u0169\011\u016c\114\uff0e\001\002\000\004\114" +
    "\uff0f\001\002\000\004\103\uff11\001\002\000\066\006\uff13" +
    "\007\uff13\014\uff13\015\uff13\016\uff13\035\uff13\036\uff13\037" +
    "\uff13\040\uff13\042\uff13\046\uff13\047\uff13\054\uff13\101\uff13" +
    "\107\uff13\111\uff13\113\uff13\115\uff13\116\uff13\117\uff13\120" +
    "\uff13\121\uff13\122\uff13\123\uff13\124\uff13\125\uff13\001\002" +
    "\000\062\006\uff29\007\uff29\014\uff29\015\uff29\016\uff29\035" +
    "\uff29\036\uff29\037\uff29\040\uff29\042\uff29\046\uff29\047\uff29" +
    "\054\uff29\101\uff29\107\uff29\111\uff29\115\uff29\116\uff29\117" +
    "\uff29\120\uff29\121\uff29\122\uff29\123\uff29\124\uff29\001\002" +
    "\000\010\005\u0176\011\u0177\114\ufef5\001\002\000\004\105" +
    "\u0185\001\002\000\004\105\ufef3\001\002\000\062\006\233" +
    "\007\070\014\046\015\050\016\056\035\226\036\237\037" +
    "\221\040\215\042\211\046\227\047\204\054\213\101\234" +
    "\107\224\111\065\115\201\116\210\117\241\120\177\121" +
    "\236\122\055\123\063\124\200\001\002\000\004\114\u0179" +
    "\001\002\000\004\103\ufef7\001\002\000\062\006\233\007" +
    "\070\014\046\015\050\016\056\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\107" +
    "\224\111\065\115\201\116\210\117\241\120\177\121\236" +
    "\122\055\123\063\124\200\001\002\000\006\065\u0183\066" +
    "\u0181\001\002\000\004\105\ufef1\001\002\000\012\065\uff81" +
    "\066\uff81\101\u017f\102\327\001\002\000\004\105\ufef4\001" +
    "\002\000\062\006\233\007\070\014\046\015\050\016\056" +
    "\035\226\036\237\037\221\040\215\042\211\046\227\047" +
    "\204\054\213\101\234\107\224\111\065\115\201\116\210" +
    "\117\241\120\177\121\236\122\055\123\063\124\200\001" +
    "\002\000\004\105\ufef2\001\002\000\062\006\ufeed\007\ufeed" +
    "\014\ufeed\015\ufeed\016\ufeed\035\ufeed\036\ufeed\037\ufeed\040" +
    "\ufeed\042\ufeed\046\ufeed\047\ufeed\054\ufeed\101\ufeed\107\ufeed" +
    "\111\ufeed\115\ufeed\116\ufeed\117\ufeed\120\ufeed\121\ufeed\122" +
    "\ufeed\123\ufeed\124\ufeed\001\002\000\062\006\ufeef\007\ufeef" +
    "\014\ufeef\015\ufeef\016\ufeef\035\ufeef\036\ufeef\037\ufeef\040" +
    "\ufeef\042\ufeef\046\ufeef\047\ufeef\054\ufeef\101\ufeef\107\ufeef" +
    "\111\ufeef\115\ufeef\116\ufeef\117\ufeef\120\ufeef\121\ufeef\122" +
    "\ufeef\123\ufeef\124\ufeef\001\002\000\062\006\ufeee\007\ufeee" +
    "\014\ufeee\015\ufeee\016\ufeee\035\ufeee\036\ufeee\037\ufeee\040" +
    "\ufeee\042\ufeee\046\ufeee\047\ufeee\054\ufeee\101\ufeee\107\ufeee" +
    "\111\ufeee\115\ufeee\116\ufeee\117\ufeee\120\ufeee\121\ufeee\122" +
    "\ufeee\123\ufeee\124\ufeee\001\002\000\004\105\ufef0\001\002" +
    "\000\130\004\316\005\uff26\006\233\007\070\010\305\011" +
    "\uff26\012\273\013\271\014\046\015\050\016\056\020\302" +
    "\022\312\023\030\024\307\025\324\027\023\030\323\031" +
    "\313\033\315\034\022\035\226\036\237\037\221\040\215" +
    "\042\211\046\227\047\204\054\213\101\234\103\uff3b\107" +
    "\224\111\065\113\265\114\uff26\115\201\116\210\117\241" +
    "\120\177\121\236\122\267\123\063\124\317\001\002\000" +
    "\010\005\u0176\011\u0177\114\ufef5\001\002\000\004\114\ufef6" +
    "\001\002\000\004\103\ufee9\001\002\000\004\103\uff01\001" +
    "\002\000\004\103\ufee3\001\002\000\130\004\316\005\uff26" +
    "\006\233\007\070\010\305\011\uff26\012\273\013\271\014" +
    "\046\015\050\016\056\020\302\022\312\023\030\024\307" +
    "\025\324\027\023\030\323\031\313\033\315\034\022\035" +
    "\226\036\237\037\221\040\215\042\211\046\227\047\204" +
    "\054\213\101\234\103\uff3b\107\224\111\065\113\265\114" +
    "\uff26\115\201\116\210\117\241\120\177\121\236\122\267" +
    "\123\063\124\317\001\002\000\010\005\uff27\011\uff27\114" +
    "\uff27\001\002\000\122\004\316\006\233\007\070\010\305" +
    "\012\273\013\271\014\046\015\050\016\056\020\302\022" +
    "\312\023\030\024\307\025\324\027\023\030\323\031\313" +
    "\033\315\034\022\035\226\036\237\037\221\040\215\042" +
    "\211\046\227\047\204\054\213\101\234\103\uff3b\107\224" +
    "\111\065\113\265\115\201\116\210\117\241\120\177\121" +
    "\236\122\267\123\063\124\317\001\002\000\004\103\uff3f" +
    "\001\002\000\030\065\ufe8b\102\ufe8b\103\ufe8b\104\ufe8b\105" +
    "\ufe8b\107\ufe8b\110\ufe8b\112\ufe8b\113\ufe8b\115\ufe8b\124\ufe8b" +
    "\001\002\000\062\006\233\007\070\014\046\015\050\016" +
    "\056\035\226\036\237\037\221\040\215\042\211\046\227" +
    "\047\204\054\213\101\234\107\224\111\065\115\201\116" +
    "\210\117\241\120\177\121\236\122\055\123\063\124\200" +
    "\001\002\000\126\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\055\uff80\056\uff80\057\uff80\061\uff80\062" +
    "\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80" +
    "\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077" +
    "\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80" +
    "\110\uff80\111\uff80\112\uff80\113\uff80\125\uff80\001\002\000" +
    "\006\102\u0193\110\ufea4\001\002\000\004\110\ufea5\001\002" +
    "\000\004\110\u0195\001\002\000\126\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075" +
    "\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f" +
    "\104\uff7f\105\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\125" +
    "\uff7f\001\002\000\006\106\u0197\107\u0137\001\002\000\004" +
    "\107\u0198\001\002\000\030\006\066\007\070\014\046\015" +
    "\050\016\056\046\073\101\047\107\051\111\065\122\055" +
    "\123\063\001\002\000\004\110\u019a\001\002\000\126\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\104\uffb1\105\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\125\uffb1\001\002\000\030\006\066\007\070" +
    "\014\046\015\050\016\056\046\073\101\047\107\051\111" +
    "\065\122\055\123\063\001\002\000\030\065\ufeb8\102\ufeb8" +
    "\103\ufeb8\104\ufeb8\105\ufeb8\107\ufeb8\110\ufeb8\112\ufeb8\113" +
    "\ufeb8\115\ufeb8\124\ufeb8\001\002\000\062\006\233\007\070" +
    "\014\046\015\050\016\056\035\226\036\237\037\221\040" +
    "\215\042\211\046\227\047\204\054\213\101\234\107\224" +
    "\111\065\115\201\116\210\117\241\120\177\121\236\122" +
    "\055\123\063\124\200\001\002\000\100\037\uffa5\041\uffa5" +
    "\042\uffa5\044\u01a1\045\u01a5\050\u01a4\051\u01a2\055\uffa5\056" +
    "\uffa5\057\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\u01a0\072\u01a3\073\uffa5\076" +
    "\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\110\uffa5\112\uffa5\113\uffa5\001\002\000\062\006\233\007" +
    "\070\014\046\015\050\016\056\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\107" +
    "\224\111\065\115\201\116\210\117\241\120\177\121\236" +
    "\122\055\123\063\124\200\001\002\000\062\006\uffe3\007" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\uffe3\046\uffe3\047\uffe3\054\uffe3\101\uffe3\107" +
    "\uffe3\111\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3" +
    "\122\uffe3\123\uffe3\124\uffe3\001\002\000\062\006\uffe1\007" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\046\uffe1\047\uffe1\054\uffe1\101\uffe1\107" +
    "\uffe1\111\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1" +
    "\122\uffe1\123\uffe1\124\uffe1\001\002\000\062\006\uffde\007" +
    "\uffde\014\uffde\015\uffde\016\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\042\uffde\046\uffde\047\uffde\054\uffde\101\uffde\107" +
    "\uffde\111\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde" +
    "\122\uffde\123\uffde\124\uffde\001\002\000\062\006\uffe2\007" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\046\uffe2\047\uffe2\054\uffe2\101\uffe2\107" +
    "\uffe2\111\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2" +
    "\122\uffe2\123\uffe2\124\uffe2\001\002\000\062\006\uffdf\007" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\042\uffdf\046\uffdf\047\uffdf\054\uffdf\101\uffdf\107" +
    "\uffdf\111\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf" +
    "\122\uffdf\123\uffdf\124\uffdf\001\002\000\062\006\uffe0\007" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\042\uffe0\046\uffe0\047\uffe0\054\uffe0\101\uffe0\107" +
    "\uffe0\111\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0" +
    "\122\uffe0\123\uffe0\124\uffe0\001\002\000\104\037\243\041" +
    "\uffa3\042\244\043\245\044\uffa3\045\uffa3\047\246\050\uffa3" +
    "\051\uffa3\055\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\072\uffa3\073\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\110\uffa3\112\uffa3\113\uffa3\001\002" +
    "\000\122\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\055\uffac\056\uffac\057\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac" +
    "\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100" +
    "\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\110\uffac" +
    "\112\uffac\113\uffac\001\002\000\062\006\233\007\070\014" +
    "\046\015\050\016\056\035\226\036\237\037\221\040\215" +
    "\042\211\046\227\047\204\054\213\101\234\107\224\111" +
    "\065\115\201\116\210\117\241\120\177\121\236\122\055" +
    "\123\063\124\200\001\002\000\064\037\uffa7\041\u019d\042" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\073\uffa7\076" +
    "\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7" +
    "\110\uffa7\112\uffa7\113\uffa7\001\002\000\030\006\ufe86\007" +
    "\ufe86\014\ufe86\015\ufe86\016\ufe86\046\ufe86\101\ufe86\107\ufe86" +
    "\111\ufe86\122\ufe86\123\ufe86\001\002\000\062\006\233\007" +
    "\070\014\046\015\050\016\056\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\107" +
    "\224\111\065\115\201\116\210\117\241\120\177\121\236" +
    "\122\055\123\063\124\200\001\002\000\004\103\uff6f\001" +
    "\002\000\004\110\u01ae\001\002\000\030\065\ufec6\102\ufec6" +
    "\103\ufec6\104\ufec6\105\ufec6\107\ufec6\110\ufec6\112\ufec6\113" +
    "\ufec6\115\ufec6\124\ufec6\001\002\000\012\046\ufedc\114\ufedc" +
    "\122\ufedc\123\ufedc\001\002\000\012\046\u01b3\114\u01b7\122" +
    "\u01b4\123\u01b5\001\002\000\006\103\ufed8\115\ufed8\001\002" +
    "\000\006\103\ufed3\115\u01c4\001\002\000\006\122\055\123" +
    "\063\001\002\000\040\006\ufecb\007\ufecb\014\ufecb\015\ufecb" +
    "\016\ufecb\046\ufecb\101\ufecb\102\376\103\ufed5\106\u01be\107" +
    "\ufecb\111\ufecb\115\ufed5\122\ufecb\123\ufecb\001\002\000\032" +
    "\006\ufecb\007\ufecb\014\ufecb\015\ufecb\016\ufecb\046\ufecb\101" +
    "\ufecb\102\376\107\ufecb\111\ufecb\122\ufecb\123\ufecb\001\002" +
    "\000\004\103\u01b8\001\002\000\030\065\ufede\102\ufede\103" +
    "\ufede\104\ufede\105\ufede\107\ufede\110\ufede\112\ufede\113\ufede" +
    "\115\ufede\124\ufede\001\002\000\012\046\ufedd\114\ufedd\122" +
    "\ufedd\123\ufedd\001\002\000\030\006\066\007\070\014\046" +
    "\015\050\016\056\046\073\101\047\107\051\111\065\122" +
    "\055\123\063\001\002\000\006\103\ufed9\115\ufed9\001\002" +
    "\000\006\103\ufed4\115\ufed4\001\002\000\030\006\066\007" +
    "\070\014\046\015\050\016\056\046\073\101\047\107\051" +
    "\111\065\122\055\123\063\001\002\000\006\103\ufeda\115" +
    "\ufeda\001\002\000\004\122\u01bf\001\002\000\006\103\ufed6" +
    "\115\ufed6\001\002\000\006\103\ufed7\115\ufed7\001\002\000" +
    "\006\103\ufed0\115\ufed0\001\002\000\004\103\ufedb\001\002" +
    "\000\004\103\ufed2\001\002\000\004\103\ufed1\001\002\000" +
    "\030\006\066\007\070\014\046\015\050\016\056\046\073" +
    "\101\047\107\051\111\065\122\055\123\063\001\002\000" +
    "\004\112\u01c8\001\002\000\004\112\ufe89\001\002\000\030" +
    "\006\066\007\070\014\046\015\050\016\056\046\073\101" +
    "\047\107\051\111\065\122\055\123\063\001\002\000\030" +
    "\065\ufe8a\102\ufe8a\103\ufe8a\104\ufe8a\105\ufe8a\107\ufe8a\110" +
    "\ufe8a\112\ufe8a\113\ufe8a\115\ufe8a\124\ufe8a\001\002\000\014" +
    "\002\uff59\006\015\023\030\027\023\034\022\001\002\000" +
    "\004\002\uff5a\001\002\000\004\103\uff4c\001\002\000\006" +
    "\110\uff49\122\uff49\001\002\000\032\006\ufee1\007\ufee1\014" +
    "\ufee1\015\ufee1\016\ufee1\046\ufee1\065\u01d1\101\ufee1\107\ufee1" +
    "\111\ufee1\122\ufee1\123\ufee1\001\002\000\004\103\uff4d\001" +
    "\002\000\030\006\066\007\070\014\046\015\050\016\056" +
    "\046\073\101\047\107\051\111\065\122\055\123\063\001" +
    "\002\000\030\006\ufee2\007\ufee2\014\ufee2\015\ufee2\016\ufee2" +
    "\046\ufee2\101\ufee2\107\ufee2\111\ufee2\122\ufee2\123\ufee2\001" +
    "\002\000\004\103\uff48\001\002\000\006\110\u01d5\122\u01ce" +
    "\001\002\000\004\103\u01d6\001\002\000\004\103\uff4b\001" +
    "\002\000\006\110\uff4a\122\uff4a\001\002\000\032\006\066" +
    "\007\070\014\046\015\050\016\056\046\073\065\u01e1\101" +
    "\047\107\051\111\065\122\055\123\063\001\002\000\004" +
    "\103\uff47\001\002\000\006\110\uff43\122\uff43\001\002\000" +
    "\004\103\uff46\001\002\000\006\110\u01dd\122\035\001\002" +
    "\000\004\103\u01de\001\002\000\004\103\uff45\001\002\000" +
    "\006\110\uff44\122\uff44\001\002\000\004\103\uff42\001\002" +
    "\000\006\065\u01e4\103\ufedf\001\002\000\062\006\233\007" +
    "\070\014\046\015\050\016\056\035\226\036\237\037\221" +
    "\040\215\042\211\046\227\047\204\054\213\101\234\107" +
    "\224\111\065\115\201\116\210\117\241\120\177\121\236" +
    "\122\055\123\063\124\200\001\002\000\004\103\uff40\001" +
    "\002\000\004\103\uff41\001\002\000\062\006\233\007\070" +
    "\014\046\015\050\016\056\035\226\036\237\037\221\040" +
    "\215\042\211\046\227\047\204\054\213\101\234\107\224" +
    "\111\065\115\201\116\210\117\241\120\177\121\236\122" +
    "\055\123\063\124\200\001\002\000\004\103\ufee0\001\002" +
    "\000\004\122\u01ec\001\002\000\004\107\uff55\001\002\000" +
    "\004\107\115\001\002\000\006\103\uff52\113\265\001\002" +
    "\000\004\103\uff54\001\002\000\004\103\uff53\001\002\000" +
    "\004\107\115\001\002\000\006\103\uff52\113\265\001\002" +
    "\000\004\103\uff51\001\002\000\016\002\uffc0\006\uffc0\023" +
    "\uffc0\027\uffc0\032\012\034\uffc0\001\002\000\014\002\uffc1" +
    "\006\uffc1\023\uffc1\027\uffc1\034\uffc1\001\002\000\004\103" +
    "\uffbf\001\002\000\004\115\u01fc\001\002\000\004\103\uffbe" +
    "\001\002\000\012\106\u01f6\110\uffbb\115\uffb7\122\u01f5\001" +
    "\002\000\004\115\uffb8\001\002\000\004\115\uffb9\001\002" +
    "\000\004\103\u01fa\001\002\000\004\110\u01f9\001\002\000" +
    "\004\103\uffbd\001\002\000\012\106\u01f6\110\uffbb\115\uffb7" +
    "\122\u01f5\001\002\000\004\110\uffbc\001\002\000\004\103" +
    "\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fa\000\006\150\005\151\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\152\012\153\013\001\001\000" +
    "\010\154\u01f0\155\u01f2\157\u01f1\001\001\000\002\001\001" +
    "\000\022\160\017\161\023\162\024\163\025\165\016\204" +
    "\026\230\015\236\020\001\001\000\004\035\u01e5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\213\u01d6\237\u01d7\242\u01d9\001\001" +
    "\000\006\231\u01ce\233\u01cb\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\205\032\210\030\213\031\001\001\000\002\001\001\000" +
    "\036\002\052\012\060\013\057\015\061\021\063\023\071" +
    "\024\066\025\056\026\074\030\053\032\070\072\073\207" +
    "\075\215\051\001\001\000\002\001\001\000\004\206\041" +
    "\001\001\000\004\322\035\001\001\000\004\212\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\205\042\213\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\052\012\u01ac\013" +
    "\057\015\061\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\002\052\013\206\015\205\021\063\023" +
    "\071\024\066\025\056\026\074\030\053\031\216\032\070" +
    "\072\073\076\215\100\221\101\217\104\211\111\234\113" +
    "\222\114\224\115\204\116\213\117\201\120\175\121\237" +
    "\124\231\126\227\166\241\170\202\001\001\000\006\033" +
    "\174\035\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\052\012" +
    "\100\013\057\015\061\021\063\022\101\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\001\001\000" +
    "\034\002\052\012\077\013\057\015\061\020\076\021\063" +
    "\023\071\024\066\025\056\026\074\030\053\032\070\072" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\103\001\001\000\004\047\105\001\001" +
    "\000\012\033\110\035\111\050\113\051\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\052\013\155\015\156\021\063\023" +
    "\071\024\066\025\056\026\074\030\053\032\070\034\153" +
    "\072\073\073\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\052\013\122\014\120\021\063\023\071" +
    "\024\066\025\056\026\074\030\053\032\070\036\123\037" +
    "\131\043\130\064\126\072\073\203\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\052\012\151\013" +
    "\057\015\061\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\001\001\000\004\040\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\052\012\140\013\057\015" +
    "\061\021\063\023\071\024\066\025\056\026\074\030\053" +
    "\032\070\044\137\072\073\001\001\000\002\001\001\000" +
    "\032\002\052\012\132\013\057\015\061\021\063\023\071" +
    "\024\066\025\056\026\074\030\053\032\070\072\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\134" +
    "\001\001\000\036\002\052\013\122\014\120\021\063\023" +
    "\071\024\066\025\056\026\074\030\053\032\070\037\135" +
    "\043\130\072\073\203\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\147\001\001\000\004\203\145\001\001\000\032\002" +
    "\052\012\143\013\057\015\061\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\001\001\000" +
    "\004\040\144\001\001\000\002\001\001\000\034\002\052" +
    "\012\140\013\057\015\061\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\044\146\072\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\052\013\163\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\074\162\203" +
    "\164\001\001\000\032\002\052\012\172\013\057\015\061" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\167\075\165\001\001\000\002\001\001\000" +
    "\004\203\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\257\001\001\000\002\001\001" +
    "\000\032\002\052\013\206\015\364\021\063\023\071\024" +
    "\066\025\056\026\074\030\053\032\070\072\073\126\365" +
    "\001\001\000\002\001\001\000\004\107\u019e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\002\052\013\206\015\205\021\063\023\071" +
    "\024\066\025\056\026\074\030\053\032\070\072\073\076" +
    "\215\100\221\101\217\104\211\113\u01a6\114\224\124\231" +
    "\126\227\166\241\170\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\052\013\206\015\205" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\076\215\100\221\101\217\104\211\111\u0198" +
    "\113\222\114\224\115\204\116\213\117\201\120\175\121" +
    "\237\124\231\126\227\166\241\170\202\001\001\000\010" +
    "\135\u0133\136\u0135\144\u0134\001\001\000\002\001\001\000" +
    "\034\002\052\012\100\013\057\015\061\021\063\022\101" +
    "\023\071\024\066\025\056\026\074\030\053\032\070\072" +
    "\073\001\001\000\004\125\u0190\001\001\000\034\002\052" +
    "\012\077\013\057\015\061\020\u018e\021\063\023\071\024" +
    "\066\025\056\026\074\030\053\032\070\072\073\001\001" +
    "\000\002\001\001\000\006\033\262\035\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\002\052\013\206\015" +
    "\205\021\063\023\071\024\066\025\056\026\074\030\053" +
    "\032\070\072\073\076\215\100\221\101\217\104\211\113" +
    "\222\114\224\120\247\124\231\126\227\166\241\170\202" +
    "\001\001\000\004\105\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\002" +
    "\052\013\206\015\205\021\063\023\071\024\066\025\056" +
    "\026\074\030\053\032\070\072\073\076\215\100\221\101" +
    "\217\104\211\113\260\114\224\124\231\126\227\166\241" +
    "\170\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\252\263\001\001\000\002\001\001\000\144\002\052" +
    "\013\206\015\205\021\063\023\071\024\066\025\056\026" +
    "\074\030\053\032\070\072\073\076\215\100\221\101\217" +
    "\104\211\111\324\112\310\113\222\114\224\115\204\116" +
    "\213\117\201\120\175\121\237\124\231\126\227\160\305" +
    "\166\241\170\202\204\026\216\267\217\317\221\265\224" +
    "\321\230\015\236\020\243\273\244\307\245\275\246\276" +
    "\247\274\250\320\251\325\252\277\253\300\254\303\263" +
    "\302\272\313\301\271\001\001\000\002\001\001\000\004" +
    "\016\u0102\001\001\000\002\001\001\000\070\002\052\013" +
    "\206\015\205\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\076\215\100\221\101\217\104" +
    "\211\111\u0189\113\222\114\224\115\204\116\213\117\201" +
    "\120\175\121\237\124\231\126\227\166\241\170\202\001" +
    "\001\000\002\001\001\000\070\002\052\013\206\015\205" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\076\215\100\221\101\217\104\211\111\u0188" +
    "\113\222\114\224\115\204\116\213\117\201\120\175\121" +
    "\237\124\231\126\227\166\241\170\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\u0187" +
    "\203\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\225\u011f\001\001\000\102\002\052\013" +
    "\206\015\205\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\076\215\100\221\101\217\104" +
    "\211\111\324\112\310\113\222\114\224\115\204\116\213" +
    "\117\201\120\175\121\237\124\231\126\227\166\241\170" +
    "\202\221\u0128\224\321\271\u0129\302\u0127\001\001\000\106" +
    "\002\052\013\206\015\205\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\072\073\076\215\100\221" +
    "\101\217\104\211\111\u010e\112\u0108\113\222\114\224\115" +
    "\204\116\213\117\201\120\175\121\237\124\231\126\227" +
    "\166\241\170\202\221\u010c\224\321\273\u010a\274\u0109\275" +
    "\u010d\277\u010b\001\001\000\002\001\001\000\074\002\052" +
    "\013\206\015\205\021\063\023\071\024\066\025\056\026" +
    "\074\030\053\032\070\072\073\076\215\100\221\101\217" +
    "\104\211\111\374\112\u0106\113\222\114\224\115\204\116" +
    "\213\117\201\120\175\121\237\124\231\126\227\166\241" +
    "\170\202\214\u0107\001\001\000\006\055\u0105\203\361\001" +
    "\001\000\040\002\052\005\371\013\206\015\364\021\063" +
    "\023\071\024\066\025\056\026\074\030\053\032\070\072" +
    "\073\126\365\203\366\222\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\360\203" +
    "\361\001\001\000\004\325\343\001\001\000\006\223\327" +
    "\317\334\001\001\000\002\001\001\000\070\002\052\013" +
    "\206\015\205\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\076\215\100\221\101\217\104" +
    "\211\111\341\113\222\114\224\115\204\116\213\117\201" +
    "\120\175\121\237\124\231\126\227\166\241\170\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\052\013\206\015\205\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\076\215\100" +
    "\221\101\217\104\211\111\336\113\222\114\224\115\204" +
    "\116\213\117\201\120\175\121\237\124\231\126\227\166" +
    "\241\170\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\317\342\001\001\000\002\001" +
    "\001\000\004\266\345\001\001\000\076\002\052\013\206" +
    "\015\205\021\063\023\071\024\066\025\056\026\074\030" +
    "\053\032\070\072\073\076\215\100\221\101\217\104\211" +
    "\111\324\112\310\113\222\114\224\115\204\116\213\117" +
    "\201\120\175\121\237\124\231\126\227\166\241\170\202" +
    "\221\356\224\321\001\001\000\070\002\052\013\206\015" +
    "\205\021\063\023\071\024\066\025\056\026\074\030\053" +
    "\032\070\072\073\076\215\100\221\101\217\104\211\111" +
    "\346\113\222\114\224\115\204\116\213\117\201\120\175" +
    "\121\237\124\231\126\227\166\241\170\202\001\001\000" +
    "\004\326\347\001\001\000\004\252\350\001\001\000\004" +
    "\267\352\001\001\000\006\263\353\327\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\252\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\002\052\013\206\015\205\021" +
    "\063\023\071\024\066\025\056\026\074\030\053\032\070" +
    "\072\073\076\215\100\221\101\217\104\211\111\374\112" +
    "\373\113\222\114\224\115\204\116\213\117\201\120\175" +
    "\121\237\124\231\126\227\166\241\170\202\001\001\000" +
    "\002\001\001\000\004\317\334\001\001\000\004\203\377" +
    "\001\001\000\002\001\001\000\004\063\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\225\u011f\300\u0122\001\001" +
    "\000\002\001\001\000\004\252\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\223\327" +
    "\317\334\001\001\000\072\002\052\013\206\015\205\021" +
    "\063\023\071\024\066\025\056\026\074\030\053\032\070" +
    "\072\073\076\215\100\221\101\217\104\211\111\u0111\113" +
    "\222\114\224\115\204\116\213\117\201\120\175\121\237" +
    "\124\231\126\227\137\u0110\166\241\170\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\002\052\013\206" +
    "\015\205\021\063\023\071\024\066\025\056\026\074\030" +
    "\053\032\070\072\073\076\215\100\221\101\217\104\211" +
    "\111\324\112\310\113\222\114\224\115\204\116\213\117" +
    "\201\120\175\121\237\124\231\126\227\166\241\170\202" +
    "\221\u0113\224\321\001\001\000\002\001\001\000\070\002" +
    "\052\013\206\015\205\021\063\023\071\024\066\025\056" +
    "\026\074\030\053\032\070\072\073\076\215\100\221\101" +
    "\217\104\211\111\u0115\113\222\114\224\115\204\116\213" +
    "\117\201\120\175\121\237\124\231\126\227\166\241\170" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\324\u0124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\002\052\013\206\015\205\021\063\023\071\024" +
    "\066\025\056\026\074\030\053\032\070\072\073\076\215" +
    "\100\221\101\217\104\211\111\374\112\u0125\113\222\114" +
    "\224\115\204\116\213\117\201\120\175\121\237\124\231" +
    "\126\227\166\241\170\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\002\052\013\206\015\205\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\072\073\076\215\100\221" +
    "\101\217\104\211\111\u0111\113\222\114\224\115\204\116" +
    "\213\117\201\120\175\121\237\124\231\126\227\137\u012a" +
    "\166\241\170\202\203\u012d\303\u012f\307\u012c\311\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\052\013\206\015\205\021" +
    "\063\023\071\024\066\025\056\026\074\030\053\032\070" +
    "\072\073\076\215\100\221\101\217\114\u0130\124\231\126" +
    "\227\166\241\170\202\001\001\000\002\001\001\000\010" +
    "\135\u0133\136\u0135\144\u0134\001\001\000\072\002\052\013" +
    "\206\015\205\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\076\215\100\221\101\217\104" +
    "\211\111\u014a\113\222\114\224\115\204\116\213\117\201" +
    "\120\175\121\237\124\231\126\227\142\u0148\166\241\170" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\002\052\013\u013d\015" +
    "\205\021\063\023\071\024\066\025\056\026\074\030\053" +
    "\032\070\072\073\076\215\100\221\101\217\104\211\111" +
    "\374\112\u013e\113\222\114\224\115\204\116\213\117\201" +
    "\120\175\121\237\124\231\126\227\145\u0140\146\u013f\166" +
    "\241\170\202\001\001\000\002\001\001\000\032\002\052" +
    "\012\u0139\013\057\015\061\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\072\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\147\u0146\001\001\000\002\001\001\000\004" +
    "\056\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\002\052\013\206\015\205\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\072\073\076\215\100\221" +
    "\101\217\104\211\111\374\112\u0147\113\222\114\224\115" +
    "\204\116\213\117\201\120\175\121\237\124\231\126\227" +
    "\166\241\170\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\052\013\206\015\205" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\076\215\100\221\101\217\104\211\111\u0151" +
    "\113\222\114\224\115\204\116\213\117\201\120\175\121" +
    "\237\124\231\126\227\166\241\170\202\001\001\000\004" +
    "\141\u014b\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\002\052\013\206\015\205\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\076\215\100" +
    "\221\101\217\104\211\111\u0111\113\222\114\224\115\204" +
    "\116\213\117\201\120\175\121\237\124\231\126\227\137" +
    "\u014e\166\241\170\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\143\u0154\001\001\000" +
    "\002\001\001\000\070\002\052\013\206\015\205\021\063" +
    "\023\071\024\066\025\056\026\074\030\053\032\070\072" +
    "\073\076\215\100\221\101\217\104\211\111\u0155\113\222" +
    "\114\224\115\204\116\213\117\201\120\175\121\237\124" +
    "\231\126\227\166\241\170\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\310\u015a\312\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\052\012\u0161\013\057\015\061\021" +
    "\063\023\071\024\066\025\056\026\074\030\053\032\070" +
    "\072\073\314\u0160\001\001\000\002\001\001\000\144\002" +
    "\052\013\206\015\205\021\063\023\071\024\066\025\056" +
    "\026\074\030\053\032\070\072\073\076\215\100\221\101" +
    "\217\104\211\111\324\112\310\113\222\114\224\115\204" +
    "\116\213\117\201\120\175\121\237\124\231\126\227\160" +
    "\305\166\241\170\202\204\026\216\267\217\u015e\221\265" +
    "\224\321\230\015\236\020\243\273\244\307\245\275\246" +
    "\276\247\274\250\320\251\325\252\277\253\300\254\303" +
    "\263\302\272\313\301\271\001\001\000\006\310\u015f\312" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\313\u0163\001\001\000\032\002\052\012\u0164\013\057\015" +
    "\061\021\063\023\071\024\066\025\056\026\074\030\053" +
    "\032\070\072\073\001\001\000\002\001\001\000\004\313" +
    "\u0165\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\305\u0169\306\u016a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\002\052\013\206\015\205" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\076\215\100\221\101\217\104\211\111\374" +
    "\112\u016c\113\222\114\224\115\204\116\213\117\201\120" +
    "\175\121\237\124\231\126\227\166\241\170\202\001\001" +
    "\000\002\001\001\000\144\002\052\013\206\015\205\021" +
    "\063\023\071\024\066\025\056\026\074\030\053\032\070" +
    "\072\073\076\215\100\221\101\217\104\211\111\324\112" +
    "\310\113\222\114\224\115\204\116\213\117\201\120\175" +
    "\121\237\124\231\126\227\160\305\166\241\170\202\204" +
    "\026\216\267\217\u016e\221\265\224\321\230\015\236\020" +
    "\243\273\244\307\245\275\246\276\247\274\250\320\251" +
    "\325\252\277\253\300\254\303\263\302\272\313\301\271" +
    "\001\001\000\006\305\u016f\306\u016a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\255\u0177\256\u0174\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\002\052\013\206\015\205\021\063" +
    "\023\071\024\066\025\056\026\074\030\053\032\070\072" +
    "\073\076\215\100\221\101\217\104\211\111\u017c\112\u017a" +
    "\113\222\114\224\115\204\116\213\117\201\120\175\121" +
    "\237\124\231\126\227\166\241\170\202\257\u017d\260\u017b" +
    "\261\u0179\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\002\052\013\206\015\205\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\076\215\100" +
    "\221\101\217\104\211\111\u0183\113\222\114\224\115\204" +
    "\116\213\117\201\120\175\121\237\124\231\126\227\166" +
    "\241\170\202\001\001\000\004\262\u0181\001\001\000\002" +
    "\001\001\000\004\317\334\001\001\000\002\001\001\000" +
    "\070\002\052\013\206\015\205\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\076\215\100" +
    "\221\101\217\104\211\111\u017f\113\222\114\224\115\204" +
    "\116\213\117\201\120\175\121\237\124\231\126\227\166" +
    "\241\170\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\144\002\052\013\206\015\205\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\076\215\100" +
    "\221\101\217\104\211\111\324\112\310\113\222\114\224" +
    "\115\204\116\213\117\201\120\175\121\237\124\231\126" +
    "\227\160\305\166\241\170\202\204\026\216\267\217\u0185" +
    "\221\265\224\321\230\015\236\020\243\273\244\307\245" +
    "\275\246\276\247\274\250\320\251\325\252\277\253\300" +
    "\254\303\263\302\272\313\301\271\001\001\000\006\255" +
    "\u0186\256\u0174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\144\002\052\013" +
    "\206\015\205\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\076\215\100\221\101\217\104" +
    "\211\111\324\112\310\113\222\114\224\115\204\116\213" +
    "\117\201\120\175\121\237\124\231\126\227\160\305\166" +
    "\241\170\202\204\026\216\267\217\u018b\221\265\224\321" +
    "\230\015\236\020\243\273\244\307\245\275\246\276\247" +
    "\274\250\320\251\325\252\277\253\300\254\303\263\302" +
    "\272\313\301\271\001\001\000\002\001\001\000\142\002" +
    "\052\013\206\015\205\021\063\023\071\024\066\025\056" +
    "\026\074\030\053\032\070\072\073\076\215\100\221\101" +
    "\217\104\211\111\324\112\310\113\222\114\224\115\204" +
    "\116\213\117\201\120\175\121\237\124\231\126\227\160" +
    "\305\166\241\170\202\204\026\216\u018d\221\265\224\321" +
    "\230\015\236\020\243\273\244\307\245\275\246\276\247" +
    "\274\250\320\251\325\252\277\253\300\254\303\263\302" +
    "\272\313\301\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\002\052\013\206\015\205\021\063\023\071" +
    "\024\066\025\056\026\074\030\053\032\070\072\073\076" +
    "\215\100\221\101\217\104\211\111\u0191\113\222\114\224" +
    "\115\204\116\213\117\201\120\175\121\237\124\231\126" +
    "\227\166\241\170\202\001\001\000\002\001\001\000\004" +
    "\053\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\052\012\u0139\013\057\015\061\021\063\023\071\024" +
    "\066\025\056\026\074\030\053\032\070\072\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\052\012" +
    "\077\013\057\015\061\020\u019b\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\001\001\000" +
    "\002\001\001\000\062\002\052\013\206\015\205\021\063" +
    "\023\071\024\066\025\056\026\074\030\053\032\070\072" +
    "\073\076\215\100\221\101\217\104\211\113\222\114\224" +
    "\117\u019d\120\175\121\237\124\231\126\227\166\241\170" +
    "\202\001\001\000\004\107\u019e\001\001\000\060\002\052" +
    "\013\206\015\205\021\063\023\071\024\066\025\056\026" +
    "\074\030\053\032\070\072\073\076\215\100\221\101\217" +
    "\104\211\113\222\114\224\120\175\121\u01a5\124\231\126" +
    "\227\166\241\170\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\246\001\001\000\002" +
    "\001\001\000\064\002\052\013\206\015\205\021\063\023" +
    "\071\024\066\025\056\026\074\030\053\032\070\072\073" +
    "\076\215\100\221\101\217\104\211\113\222\114\224\116" +
    "\u01a8\117\201\120\175\121\237\124\231\126\227\166\241" +
    "\170\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\002\052\013\206\015\205\021\063\023\071\024\066" +
    "\025\056\026\074\030\053\032\070\072\073\076\215\100" +
    "\221\101\217\104\211\111\374\112\u01ab\113\222\114\224" +
    "\115\204\116\213\117\201\120\175\121\237\124\231\126" +
    "\227\166\241\170\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u01af\001\001\000" +
    "\010\003\u01b5\010\u01b0\057\u01b1\001\001\000\002\001\001" +
    "\000\006\006\u01c2\060\u01c1\001\001\000\004\015\u01c0\001" +
    "\001\000\006\061\u01bc\063\u01bb\001\001\000\006\062\u01b9" +
    "\063\u01b8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\052\012\u01ba\013\057\015\061" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\052\012\u01bf\013\057\015\061\021\063\023" +
    "\071\024\066\025\056\026\074\030\053\032\070\072\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\052\012" +
    "\u01c6\013\057\015\061\021\063\023\071\024\066\025\056" +
    "\026\074\027\u01c5\030\053\032\070\072\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\052\012\077" +
    "\013\057\015\061\020\u01c8\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\072\073\001\001\000\002" +
    "\001\001\000\022\160\017\161\023\162\u01ca\163\025\165" +
    "\016\204\026\230\015\236\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\232\u01d2\001\001\000\004\234" +
    "\u01cf\001\001\000\002\001\001\000\032\002\052\012\u01d1" +
    "\013\057\015\061\021\063\023\071\024\066\025\056\026" +
    "\074\030\053\032\070\072\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\233\u01d3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\052" +
    "\012\u01df\013\057\015\061\021\063\023\071\024\066\025" +
    "\056\026\074\030\053\032\070\072\073\241\u01de\001\001" +
    "\000\002\001\001\000\004\240\u01da\001\001\000\002\001" +
    "\001\000\006\213\u01d6\242\u01db\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\235\u01e2\001\001\000\072\002\052\013\206\015\205" +
    "\021\063\023\071\024\066\025\056\026\074\030\053\032" +
    "\070\072\073\076\215\100\221\101\217\104\211\111\374" +
    "\112\u01e1\113\222\114\224\115\204\116\213\117\201\120" +
    "\175\121\237\124\231\126\227\166\241\170\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\002\052\013" +
    "\206\015\205\021\063\023\071\024\066\025\056\026\074" +
    "\030\053\032\070\072\073\076\215\100\221\101\217\104" +
    "\211\111\374\112\u01e4\113\222\114\224\115\204\116\213" +
    "\117\201\120\175\121\237\124\231\126\227\166\241\170" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\323\u01e7\001\001\000\006\033\u01e8\035\111\001\001\000" +
    "\006\164\u01e9\252\u01ea\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\u01ec\035\111\001\001\000\006\164" +
    "\u01ed\252\u01ea\001\001\000\002\001\001\000\006\152\012" +
    "\153\u01ef\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\155\u01f6\156\u01f7" +
    "\157\u01f1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\155\u01f6\156\u01fa\157\u01f1\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Syntax error: ");

        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            if(s.value != null) m.append( s.value.toString() );
            m.append( " - Line: " + s.getLeft().getLine() + " - Column: " + s.getLeft().getColumn() );
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("Error - " + message);
        System.exit(-1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Identifier ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;
		int bidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bid; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BasicLitStar ::= BasicLit BasicLitStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",204, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicLitStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",204, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicLit ::= INT_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression intLit = new Expression(Type.INT, i.toString());       RESULT = intLit;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicLit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression floatLit = new Expression(Type.FLOAT32, f.toString()); RESULT = floatLit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicLit ::= IMG_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicLit ::= RUNE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicLit ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression stringLit = new Expression(Type.STRING, s.toString()); RESULT = stringLit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BooleanLit ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression trueLit = new Expression(Type.BOOL, t.toString());  RESULT = trueLit;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLit",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BooleanLit ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression falseLit = new Expression(Type.BOOL, f.toString()); RESULT = falseLit;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLit",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnaryOp ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plus;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnaryOp ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minus; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryOp ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = not;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryOp ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xor;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOp ::= MUL 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mul;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // UnaryOp ::= ADDRESS 
            {
              Object RESULT =null;
		int addrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addr;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UnaryOp ::= CHANNEL_OP 
            {
              Object RESULT =null;
		int copleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int copright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cop;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MulOp ::= MUL 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mul;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MulOp ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = div;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MulOp ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mod;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MulOp ::= LEFT_OP 
            {
              Object RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MulOp ::= RIGHT_OP 
            {
              Object RESULT =null;
		int ropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MulOp ::= ADDRESS 
            {
              Object RESULT =null;
		int addrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MulOp ::= AND_NOT_OP 
            {
              Object RESULT =null;
		int anopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object anop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = anop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOp ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plus;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AddOp ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minus; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AddOp ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = or;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AddOp ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xor;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= EQ_OP 
            {
              Object RESULT =null;
		int eqopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eqop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eqop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= NE_OP 
            {
              Object RESULT =null;
		int neopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object neop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = neop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= LTE 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = let;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelOp ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = gt;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RelOp ::= GTE 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = gte;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinOp ::= OR_OP 
            {
              Object RESULT =null;
		int oropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = orop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinOp ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = and;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinOp ::= RelOp 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = relop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BinOp ::= AddOp 
            {
              Object RESULT =null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BinOp ::= MulOp 
            {
              Object RESULT =null;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mulop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mulop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CompositeLit ::= LiteralType LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompositeLit",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LiteralType ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LiteralType ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LiteralType ::= SQRD_L ELLIPSIS SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LiteralType ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LiteralType ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LiteralType ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LiteralValue ::= CURLY_L LiteralValueAux1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LiteralValueAux1 ::= ElementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValueAux1",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LiteralValueAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValueAux1",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ElementList ::= KeyedElement ElementListAux1 OptComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ElementListAux1 ::= ElementListAux1 COMMA KeyedElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementListAux1",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ElementListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementListAux1",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // KeyedElement ::= KeyedElementAux1 KeyedElementAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // KeyedElementAux1 ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux1",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // KeyedElementAux1 ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux1",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // KeyedElementAux2 ::= KeyedElementAux3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux2",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // KeyedElementAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux2",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // KeyedElementAux3 ::= COLON Element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux3",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Element ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Element ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunctionLit ::= FUNC Signature Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionLit",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SourceFile ::= PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SourceFile",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ImportDeclStar ::= ImportDecl SEMICOLON ImportDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclStar",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ImportDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclStar",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ImportDecl ::= IMPORT ImportDeclAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDecl",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ImportDeclAux1 ::= ImportSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclAux1",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ImportDeclAux1 ::= PAR_L ImportSpecStar PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclAux1",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ImportSpecStar ::= ImportSpec SEMICOLON ImportSpecStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecStar",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ImportSpecStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecStar",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ImportSpec ::= ImportSpecAux1 STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpec",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ImportSpecAux1 ::= DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ImportSpecAux1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ImportSpecAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PackageClause ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageClause",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperandStar ::= OperandStar Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",206, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperandStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",206, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operand ::= Literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operand ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression expTn = new Expression(Type.UNKNOWN, tn.toString(), tn.toString()); RESULT = expTn;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Operand ::= PAR_L Expression PAR_R 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Expression exp = (Expression) e;
												  exp.setValue("(" + exp.getValue() + ")");
												  RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Literal ::= BasicLit 
            {
              Object RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = blit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Literal ::= FunctionLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Literal ::= BooleanLit 
            {
              Object RESULT =null;
		int bolitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bolitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bolit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bolit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // UnaryExpr ::= PrimaryExpr 
            {
              Object RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // UnaryExpr ::= UnaryOp UnaryExpr 
            {
              Object RESULT =null;
		int uopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object uop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object uexpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateUnaryExpr(uop.toString(), (Expression) uexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrimaryExpr ::= Operand 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PrimaryExpr ::= Conversion 
            {
              Object RESULT =null;
		 RESULT = "";   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PrimaryExpr ::= PrimaryExpr PrimaryExprOtherOptions 
            {
              Object RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pexp;  Semantic.getInstance().FunctionCheckParameters((Expression)pexp);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= OrExpression 
            {
              Object RESULT =null;
		int orexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = orexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OrExpression ::= OrExpression OR_OP AndExpression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, op.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OrExpression",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OrExpression ::= AndExpression 
            {
              Object RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aexpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aexpr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OrExpression",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AndExpression ::= AndExpression AND RelopExpression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, op.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndExpression",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AndExpression ::= RelopExpression 
            {
              Object RESULT =null;
		int rexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rexpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rexpr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndExpression",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RelopExpression ::= RelopExpression RelOp AddExpression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, op.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelopExpression",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RelopExpression ::= AddExpression 
            {
              Object RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aexpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aexpr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelopExpression",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AddExpression ::= AddExpression AddOp MulExpression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, op.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddExpression",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AddExpression ::= MulExpression 
            {
              Object RESULT =null;
		int mulexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mulexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mulexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddExpression",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MulExpression ::= MulExpression MulOp UnaryExpr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, op.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulExpression",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MulExpression ::= UnaryExpr 
            {
              Object RESULT =null;
		int uexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object uexpr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = uexpr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulExpression",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PrimaryExprOtherOptions ::= IndexAndSlice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PrimaryExprOtherOptions ::= Arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PrimaryExprOtherOptions ::= HASH DOT PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Arguments ::= HASH PAR_L ExpTypeEtc PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpTypeEtc ::= OptExpType OptEllipsisComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTypeEtc",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpTypeEtc ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTypeEtc",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptExpType ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpType",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptExpType ::= TypeLit OptCommaExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpType",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OptCommaExp ::= COMMA ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptCommaExp",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptCommaExp",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IndexAndSlice ::= SQRD_L Expression PossibleClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IndexAndSlice",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IndexAndSlice ::= SQRD_L PossibleClose2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IndexAndSlice",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PossibleClose ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PossibleClose ::= COLON OptExpression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PossibleClose2 ::= COLON SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose2",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PossibleClose2 ::= COLON Expression PossibleClose3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose2",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PossibleClose3 ::= COLON Expression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose3",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PossibleClose3 ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose3",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OptEllipsisComma ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OptEllipsisComma ::= ELLIPSIS COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OptEllipsisComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OptExpression ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OptExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OptExpression2 ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression2",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OptExpression2 ::= COLON OptExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression2",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Index ::= SQRD_L Expression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExpressionList ::= Expression ExpressionStar 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addExpression((Expression) exp); RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExpressionStar ::= COMMA Expression ExpressionStar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addExpression((Expression) exp); RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",205, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExpressionStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",205, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Conversion ::= TypeConv NextConversion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conversion",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NextConversion ::= PAR_L Expression OptComma PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NextConversion",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TypeConv ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TypeConv ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TypeConv ::= INTERROGATION TypeConv INTERROGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OptDotIDENTIFIER ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptDotIDENTIFIER",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OptDotIDENTIFIER ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptDotIDENTIFIER",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ConstDecl ::= CONST AuxConstDecl1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AuxConstDecl1 ::= ConstSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AuxConstDecl1 ::= PAR_L AuxConstSpec PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ConstSpec ::= IdentifierListStar2 AuxConstSpec2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstSpec",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AuxConstSpec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AuxCommaExp ::= AuxCommaExp COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AuxCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OptType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OptType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // AuxConstSpec2 ::= OptType ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AuxConstSpec2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addVarName(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IdentifierListStarAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().addVarName(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",208, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IdentifierListStar2 ::= IDENTIFIER NT$0 IdentifierListStarAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStar2",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Statement ::= LabeledStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Statement ::= GoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Statement ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Statement ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Statement ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Statement ::= GotoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Statement ::= FallthroughStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Statement ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Statement ::= SelectStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Statement ::= SwitchStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Statement ::= DeferStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Statement ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TopLevelDeclStar ::= TopLevelDecl SEMICOLON TopLevelDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclStar",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TopLevelDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclStar",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TopLevelDecl ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TopLevelDecl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TopLevelDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().createNewFunction(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",209, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FunctionDecl ::= FUNC IDENTIFIER NT$1 Signature FunctionBodyOpt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Semantic.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FunctionBodyOpt ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyOpt",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FunctionBodyOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyOpt",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MethodDecl ::= FUNC Parameters IDENTIFIER Signature FunctionBodyOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Declaration ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TypeDecl ::= TYPE TypeDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TypeDeclAux ::= TypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TypeDeclAux ::= PAR_L TypeSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TypeSpecAux ::= TypeSpecAux TypeSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TypeSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TypeSpec ::= IDENTIFIER OptAssign Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpec",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VarDecl ::= VAR VarDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VarDeclAux ::= VarSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VarDeclAux ::= PAR_L VarSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VarSpecAux ::= VarSpecAux VarSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VarSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VarSpec ::= IdentifierListStar2 VarSpecAux2 
            {
              Object RESULT =null;
		 Semantic.getInstance().printVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // VarSpecAux2 ::= Type OptAssignExpList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int optAssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int optAssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object optAss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().initializeVars(type, optAss.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // VarSpecAux2 ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // LabeledStmt ::= IDENTIFIER COLON Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStmt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SimpleStmt ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SimpleStmt ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SimpleStmt ::= INTERROGATION ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // AuxExpression ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AuxExpression ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AuxExpression ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AuxExpression ::= PLUS PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AuxExpression ::= MINUS MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // AuxExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$2 ::= 
            {
              Object RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().transferExpBuffer();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",210, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Assignment ::= ExpressionList AssignOp NT$2 ExpressionList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().updateVars(ass.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // AssignOp ::= MUL_ASSIGN 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ma;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // AssignOp ::= ADD_ASSIGN 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aa;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // AssignOp ::= XOR_ASSIGN 
            {
              Object RESULT =null;
		int xaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xa;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // AssignOp ::= DIV_ASSIGN 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = da;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // AssignOp ::= LEFT_ASSIGN 
            {
              Object RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = la;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // AssignOp ::= RIGHT_ASSIGN 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ra;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // AssignOp ::= AND_NOT_ASSIGN 
            {
              Object RESULT =null;
		int analeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ana = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ana;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // AssignOp ::= MINUS_ASSIGN 
            {
              Object RESULT =null;
		int minusaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minusa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minusa; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // AssignOp ::= ADDRESS_ASSIGN 
            {
              Object RESULT =null;
		int addaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object adda = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = adda;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // AssignOp ::= ASSIGN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ShortVarDecl ::= IdentifierList CHANNEL_ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShortVarDecl",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // StatementList ::= Statement SEMICOLON StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Block ::= CURLY_L StatementList CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ForStmt ::= FOR ForStmtAux Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",184, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ForStmtAux ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ForStmtAux ::= ForClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ForStmtAux ::= RangeClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ForStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ForClause ::= SimpleStmt SEMICOLON OptExpression SEMICOLON SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForClause",186, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SimplesStmtStarAux ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SimplesStmtStarAux ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SimplesStmtStarAux ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SimplesStmtStarAux ::= AuxCommaExp AssignOp ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // RangeClauseAux ::= ExpressionList RangeClauseAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // RangeClauseAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // RangeClauseAux2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux2",190, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // RangeClauseAux2 ::= CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux2",190, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // RangeClause ::= RangeClauseAux RANGE Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClause",187, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // SwitchStmt ::= SWITCH SwitchStmtAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",191, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // SwitchStmtAux ::= SimpleStmtSc SwitchStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux",192, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // SimpleStmtSc ::= SimpleStmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtSc",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // SimpleStmtSc ::= HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtSc",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // SwitchStmtAux2 ::= OptExpression CURLY_L ExprCaseClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux2",193, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SwitchStmtAux2 ::= TypeSwitchGuard CURLY_L TypeCaseClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux2",193, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ExprCaseClause ::= ExprSwitchCase COLON StatementList ExprCaseClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprCaseClause",195, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ExprCaseClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprCaseClause",195, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TypeSwitchGuard ::= OptTypeSwitchGuard PrimaryExpr HASH DOT PAR_L TYPE PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchGuard",197, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OptTypeSwitchGuard ::= Identifier CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptTypeSwitchGuard",199, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // OptTypeSwitchGuard ::= HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptTypeSwitchGuard",199, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TypeCaseClause ::= TypeSwitchCase COLON StatementList TypeCaseClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeCaseClause",198, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TypeCaseClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeCaseClause",198, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TypeSwitchCase ::= CASE TypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchCase",200, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TypeSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchCase",200, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ExprSwitchCase ::= CASE ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchCase",196, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ExprSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchCase",196, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TypeList ::= Type AuxTypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",202, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // AuxTypeList ::= COMMA Type AuxTypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeList",201, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // AuxTypeList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeList",201, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // DeferStmt ::= DEFER Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeferStmt",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NT$3 ::= 
            {
              Object RESULT =null;
 Semantic.getInstance().createIfCode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",211, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().createIf((Expression) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",212, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // IfStmt ::= IF NT$3 SimpleStmtAux Expression NT$4 Block IfStmtAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifsauxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifsauxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifsaux = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // SimpleStmtAux ::= HASH SimpleStmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",180, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // SimpleStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",180, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // IfStmtAux ::= ELSE IfStmt 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$5 ::= 
            {
              Object RESULT =null;
 Semantic.getInstance().createElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",213, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // IfStmtAux ::= ELSE NT$5 Block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Semantic.getInstance().exitCurrentScope(); RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // IfStmtAux ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // SelectStmt ::= SELECT CURLY_L CommClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectStmt",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CommClause ::= CommCase COLON StatementList CommClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CommClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CommCase ::= CASE StmtOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",172, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CommCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",172, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // StmtOpt ::= Expression CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",173, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // StmtOpt ::= RecvStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",173, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // RecvStmt ::= RecvStmtAux Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmt",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // RecvStmtAux ::= ExpressionList RecvStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // RecvStmtAux2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux2",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // RecvStmtAux2 ::= CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux2",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // OptIdentifier ::= Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // OptIdentifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FallthroughStmt ::= FALLTHROUGH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FallthroughStmt",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // GotoStmt ::= GOTO OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GotoStmt",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ContinueStmt ::= CONTINUE OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // BreakStmt ::= BREAK OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ExpressionListStar ::= ExpressionList 
            {
              Object RESULT =null;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = epl;               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ExpressionListStar ::= 
            {
              Object RESULT =null;
		 RESULT = new Expression();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ReturnStmt ::= RETURN ExpressionListStar 
            {
              Object RESULT =null;
		int eplsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddReturnedExpression((Expression)epls);	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // GoStmt ::= GO Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GoStmt",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // OptAssign ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // OptAssign ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // OptAssignExpList ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "Assigment"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // OptAssignExpList ::= 
            {
              Object RESULT =null;
		 RESULT = "";          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // FieldDeclStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // AuxFieldDecl1 ::= BLANK_IDENTIFIER AuxFieldDecl4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // AuxFieldDecl1 ::= EmbeddedField1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // AuxFieldDecl3 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // AuxFieldDecl3 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // AuxFieldDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // AuxFieldDecl4 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // AuxFieldDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // AuxFieldDecl2 ::= Tag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // Tag ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // EmbeddedField1 ::= MUL TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmbeddedField1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // OptMul ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // OptMul ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // IdentifierList ::= Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // IdentifierStar1 ::= COMMA Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // IdentifierStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TypeStar ::= Type TypeStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",203, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TypeStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",203, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // Type ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // Type ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // Type ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TypeName ::= IDENTIFIER AuxTypeName1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dotidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dotidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dotid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.toString() + dotid.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TypeName ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // AuxTypeName1 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "." + id.toString();              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // AuxTypeName1 ::= 
            {
              Object RESULT =null;
		 RESULT = "";                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TypeLit ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TypeLit ::= PointerType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TypeLit ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TypeLit ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TypeLit ::= ChannelType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TypeLit ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TypeLit ::= InterfaceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TypeLit ::= FunctionType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ArrayLength ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ElementType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // PointerType ::= MUL BaseType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // BaseType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // FunctionType ::= FUNC Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionType",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // Signature ::= Parameters AuxResult 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // AuxResult ::= Result 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // AuxResult ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // Result ::= HASH PAR_L AuxResult2 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // Result ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // Result ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Type type = Type.convertToType(tn.toString()); Semantic.getInstance().FunctionAddReturnType(type); RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // AuxResult2 ::= Identifier AuxResult3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // AuxResult2 ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // AuxResult2 ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // AuxResult3 ::= IdentifierStar3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // AuxResult3 ::= DOT Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // Parameters ::= PAR_L AuxParameters1 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AuxParameters1 ::= ParameterList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AuxParameters1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // OptComma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // OptComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ParameterList ::= ParameterDecl 
            {
              Object RESULT =null;
		int pdeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pdecl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pdecl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TypeNoIdentifier ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNoIdentifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TypeNoIdentifier ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNoIdentifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ParameterDecl ::= IdentifierListParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ParameterDecl ::= ELLIPSIS Type ParameterDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ParameterDecl ::= TypeNoIdentifier ParameterDeclStar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().FunctionInitializeParameters(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // ParameterDeclStar ::= COMMA ParameterDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // ParameterDeclStar ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // ParameterDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // IdentifierListParam ::= Identifier IdentifierStar2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddParameter(id.toString()); Semantic.getInstance().FunctionInitializeParameters((Type)t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListParam",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // IdentifierStar2 ::= COMMA Identifier IdentifierStar2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddParameter(id.toString()); Semantic.getInstance().FunctionInitializeParameters((Type)t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // IdentifierStar2 ::= ELLIPSIS Type ParameterDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // IdentifierStar2 ::= Type ParameterDeclStar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().FunctionInitializeParameters(type); RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // FuncIdentifierList ::= Identifier FuncIdentifierListAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // FuncIdentifierListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // InterfaceType ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AuxIntefaceType1 ::= AuxIntefaceType1 MethodSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AuxIntefaceType1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // MethodSpec ::= IDENTIFIER MethodSpecAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // MethodSpecAux1 ::= Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // MethodSpecAux1 ::= MethodSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // MethodSpecAux2 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // MethodSpecAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // SliceType ::= SQRD_L SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // MapType ::= MAP SQRD_L KeyType SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // KeyType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyType",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // ChannelType ::= AuxChannelType1 ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ChannelType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AuxChannelType1 ::= CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AuxChannelType1 ::= CHAN CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AuxChannelType1 ::= CHANNEL_OP CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
