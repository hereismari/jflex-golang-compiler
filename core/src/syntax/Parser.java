
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 20 15:44:51 BRT 2018
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 20 15:44:51 BRT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\340\000\002\002\004\000\002\161\003\000\002\161" +
    "\003\000\002\163\004\000\002\163\002\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\165\004\000\002\165\002\000\002\157" +
    "\003\000\002\157\003\000\002\157\005\000\002\160\003" +
    "\000\002\070\003\000\002\070\003\000\002\067\003\000" +
    "\002\067\005\000\002\164\004\000\002\164\002\000\002" +
    "\100\005\000\002\100\002\000\002\116\004\000\002\104" +
    "\003\000\002\104\002\000\002\076\005\000\002\076\002" +
    "\000\002\101\005\000\002\101\002\000\002\102\004\000" +
    "\002\074\004\000\002\075\005\000\002\075\002\000\002" +
    "\077\003\000\002\077\005\000\002\073\004\000\002\111" +
    "\005\000\002\115\003\000\002\115\003\000\002\115\002" +
    "\000\002\114\004\000\002\113\005\000\002\112\004\000" +
    "\002\112\003\000\002\112\003\000\002\112\002\000\002" +
    "\110\004\000\002\110\003\000\002\110\003\000\002\110" +
    "\002\000\002\106\004\000\002\107\004\000\002\107\002" +
    "\000\002\142\005\000\002\143\004\000\002\156\003\000" +
    "\002\156\003\000\002\155\004\000\002\155\002\000\002" +
    "\153\004\000\002\153\003\000\002\153\003\000\002\154" +
    "\004\000\002\152\007\000\002\151\004\000\002\151\004" +
    "\000\002\150\004\000\002\147\005\000\002\147\003\000" +
    "\002\146\004\000\002\146\003\000\002\145\005\000\002" +
    "\144\006\000\002\141\003\000\002\140\004\000\002\137" +
    "\004\000\002\136\004\000\002\103\003\000\002\103\002" +
    "\000\002\135\004\000\002\134\004\000\002\133\005\000" +
    "\002\124\003\000\002\124\002\000\002\125\004\000\002" +
    "\125\002\000\002\131\004\000\002\131\004\000\002\132" +
    "\004\000\002\130\005\000\002\130\002\000\002\127\003" +
    "\000\002\127\005\000\002\126\004\000\002\123\005\000" +
    "\002\122\005\000\002\122\002\000\002\121\003\000\002" +
    "\121\005\000\002\120\004\000\002\117\003\000\002\117" +
    "\003\000\002\117\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\002\006\000\002\004\005" +
    "\000\002\004\002\000\002\003\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\003\000\002\052\004\000\002" +
    "\052\004\000\002\052\002\000\002\053\004\000\002\051" +
    "\002\000\002\051\003\000\002\006\003\000\002\010\004" +
    "\000\002\044\003\000\002\044\002\000\002\005\004\000" +
    "\002\005\002\000\002\054\005\000\002\054\002\000\002" +
    "\162\004\000\002\162\002\000\002\012\003\000\002\012" +
    "\003\000\002\012\005\000\002\014\004\000\002\015\004" +
    "\000\002\015\002\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\027\003\000\002\030\006\000\002\016" +
    "\003\000\002\017\004\000\002\020\003\000\002\021\004" +
    "\000\002\031\004\000\002\033\003\000\002\033\002\000" +
    "\002\032\003\000\002\032\003\000\002\034\005\000\002" +
    "\055\004\000\002\055\002\000\002\045\003\000\002\045" +
    "\002\000\002\035\004\000\002\056\005\000\002\056\002" +
    "\000\002\036\005\000\002\046\003\000\002\046\002\000" +
    "\002\047\003\000\002\047\002\000\002\037\004\000\002" +
    "\040\005\000\002\040\002\000\002\022\006\000\002\057" +
    "\005\000\002\057\002\000\002\041\004\000\002\042\003" +
    "\000\002\042\003\000\002\043\004\000\002\043\002\000" +
    "\002\024\005\000\002\023\007\000\002\025\003\000\002" +
    "\026\004\000\002\060\003\000\002\060\004\000\002\060" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\056\002\uffb1\004\031\010\023\012\013\013" +
    "\057\020\037\023\006\024\054\025\025\027\022\030\012" +
    "\033\027\034\055\035\024\036\021\040\014\044\030\045" +
    "\007\052\017\077\042\111\034\120\060\001\002\000\006" +
    "\002\uff77\101\uff77\001\002\000\006\002\uff78\101\uff78\001" +
    "\002\000\006\105\360\120\124\001\002\000\072\002\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\063\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074" +
    "\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\103\ufff4" +
    "\111\ufff4\001\002\000\006\002\uff70\101\uff70\001\002\000" +
    "\006\002\uff74\101\uff74\001\002\000\006\120\221\121\222" +
    "\001\002\000\022\025\067\035\024\036\021\040\014\044" +
    "\030\045\007\052\017\077\042\001\002\000\072\002\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\063\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\103\ufff6" +
    "\111\ufff6\001\002\000\032\035\073\036\112\040\110\041" +
    "\074\044\116\045\114\050\106\051\070\063\uffbb\072\100" +
    "\073\105\076\103\001\002\000\072\002\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\063\uffd3\067" +
    "\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\100\uffd3\101\uffd3\103\uffd3\111\uffd3\001" +
    "\002\000\072\002\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\063\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\103\ufff5\111\ufff5\001\002\000\004\064\343" +
    "\001\002\000\072\002\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\063\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\103\ufff2\111\ufff2\001\002\000\006\105" +
    "\331\120\333\001\002\000\004\111\303\001\002\000\072" +
    "\002\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\063\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7" +
    "\103\ufff7\111\ufff7\001\002\000\074\002\uffd4\025\067\035" +
    "\024\036\021\037\uffd4\040\014\041\uffd4\042\uffd4\043\uffd4" +
    "\044\030\045\007\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\017\063\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\042\100\uffd4\101\uffd4\120" +
    "\124\001\002\000\072\002\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\063\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077" +
    "\uffd2\100\uffd2\101\uffd2\103\uffd2\111\uffd2\001\002\000\026" +
    "\002\uff94\025\067\035\024\036\021\040\014\044\030\045" +
    "\007\052\017\077\042\101\uff94\001\002\000\072\002\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\063\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074" +
    "\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\103\ufff3" +
    "\111\ufff3\001\002\000\006\120\221\121\222\001\002\000" +
    "\006\002\uff71\101\uff71\001\002\000\006\002\uffb2\101\uffb2" +
    "\001\002\000\056\004\031\010\023\012\013\013\057\020" +
    "\037\023\006\024\054\025\025\027\022\030\012\033\027" +
    "\034\055\035\024\036\021\040\014\044\030\045\007\052" +
    "\017\077\042\101\uffb1\111\034\120\060\001\002\000\006" +
    "\002\uff79\101\uff79\001\002\000\006\002\uffb3\101\uffb3\001" +
    "\002\000\004\120\254\001\002\000\006\002\uff73\101\uff73" +
    "\001\002\000\006\002\uff7d\101\uff7d\001\002\000\072\002" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\063\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\103" +
    "\ufff1\111\ufff1\001\002\000\004\002\253\001\002\000\066" +
    "\002\uffb5\035\073\036\112\037\071\040\110\041\074\042" +
    "\072\043\076\044\116\045\114\046\101\047\104\050\106" +
    "\051\070\063\uffcd\067\102\070\075\071\107\072\100\073" +
    "\105\074\251\075\247\076\103\077\246\100\uffcd\101\uffb5" +
    "\001\002\000\006\002\uff7c\101\uff7c\001\002\000\006\002" +
    "\uff7e\101\uff7e\001\002\000\006\002\uff7a\101\uff7a\001\002" +
    "\000\006\002\uff7b\101\uff7b\001\002\000\006\002\uff75\101" +
    "\uff75\001\002\000\006\002\uff6f\101\uff6f\001\002\000\006" +
    "\002\uff76\101\uff76\001\002\000\006\002\uff99\101\uff99\001" +
    "\002\000\006\105\122\120\124\001\002\000\006\002\uff72" +
    "\101\uff72\001\002\000\022\025\067\035\024\036\021\040" +
    "\014\044\030\045\007\052\017\077\042\001\002\000\010" +
    "\064\uffc6\100\uffc6\103\061\001\002\000\060\002\uffb1\004" +
    "\031\010\023\012\013\013\057\020\037\023\006\024\054" +
    "\025\025\027\022\030\012\033\027\034\055\035\024\036" +
    "\021\040\014\044\030\045\007\052\017\077\042\101\uffb1" +
    "\111\034\120\060\001\002\000\034\002\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\044\uffc5\063\uffc5\064\uffc5\077\uffc5\100\063" +
    "\101\uffc5\105\uffc5\107\uffc5\120\uffc5\001\002\000\004\120" +
    "\064\001\002\000\034\002\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\044\uffc7\063\uffc7\064\uffc7\077\uffc7\100\uffc7\101\uffc7\105" +
    "\uffc7\107\uffc7\120\uffc7\001\002\000\006\002\uff91\101\uff91" +
    "\001\002\000\054\002\uff92\035\073\036\112\037\071\040" +
    "\110\041\074\042\072\043\076\044\116\045\114\046\101" +
    "\047\104\050\106\051\070\067\102\070\075\071\107\072" +
    "\100\073\105\076\103\101\uff92\001\002\000\072\002\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\063\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074" +
    "\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\103\uffd4" +
    "\111\uffd4\001\002\000\024\025\uffee\035\uffee\036\uffee\040" +
    "\uffee\044\uffee\045\uffee\052\uffee\063\uffee\077\uffee\001\002" +
    "\000\022\025\uffde\035\uffde\036\uffde\040\uffde\044\uffde\045" +
    "\uffde\052\uffde\077\uffde\001\002\000\022\025\uffe3\035\uffe3" +
    "\036\uffe3\040\uffe3\044\uffe3\045\uffe3\052\uffe3\077\uffe3\001" +
    "\002\000\024\025\uffe9\035\uffe9\036\uffe9\040\uffe9\044\uffe9" +
    "\045\uffe9\052\uffe9\063\uffe9\077\uffe9\001\002\000\024\025" +
    "\uffe7\035\uffe7\036\uffe7\040\uffe7\044\uffe7\045\uffe7\052\uffe7" +
    "\063\uffe7\077\uffe7\001\002\000\022\025\uffe4\035\uffe4\036" +
    "\uffe4\040\uffe4\044\uffe4\045\uffe4\052\uffe4\077\uffe4\001\002" +
    "\000\022\025\uffe2\035\uffe2\036\uffe2\040\uffe2\044\uffe2\045" +
    "\uffe2\052\uffe2\077\uffe2\001\002\000\022\025\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\044\uffdb\045\uffdb\052\uffdb\077\uffdb\001" +
    "\002\000\024\025\uffed\035\uffed\036\uffed\040\uffed\044\uffed" +
    "\045\uffed\052\uffed\063\uffed\077\uffed\001\002\000\022\025" +
    "\uffe1\035\uffe1\036\uffe1\040\uffe1\044\uffe1\045\uffe1\052\uffe1" +
    "\077\uffe1\001\002\000\022\025\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\044\uffe5\045\uffe5\052\uffe5\077\uffe5\001\002\000\024" +
    "\025\uffea\035\uffea\036\uffea\040\uffea\044\uffea\045\uffea\052" +
    "\uffea\063\uffea\077\uffea\001\002\000\022\025\uffe0\035\uffe0" +
    "\036\uffe0\040\uffe0\044\uffe0\045\uffe0\052\uffe0\077\uffe0\001" +
    "\002\000\024\025\uffec\035\uffec\036\uffec\040\uffec\044\uffec" +
    "\045\uffec\052\uffec\063\uffec\077\uffec\001\002\000\024\025" +
    "\uffef\035\uffef\036\uffef\040\uffef\044\uffef\045\uffef\052\uffef" +
    "\063\uffef\077\uffef\001\002\000\022\025\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\044\uffdf\045\uffdf\052\uffdf\077\uffdf\001\002" +
    "\000\024\025\uffe8\035\uffe8\036\uffe8\040\uffe8\044\uffe8\045" +
    "\uffe8\052\uffe8\063\uffe8\077\uffe8\001\002\000\022\025\067" +
    "\035\024\036\021\040\014\044\030\045\007\052\017\077" +
    "\042\001\002\000\024\025\uffeb\035\uffeb\036\uffeb\040\uffeb" +
    "\044\uffeb\045\uffeb\052\uffeb\063\uffeb\077\uffeb\001\002\000" +
    "\022\025\uffdc\035\uffdc\036\uffdc\040\uffdc\044\uffdc\045\uffdc" +
    "\052\uffdc\077\uffdc\001\002\000\024\025\uffe6\035\uffe6\036" +
    "\uffe6\040\uffe6\044\uffe6\045\uffe6\052\uffe6\063\uffe6\077\uffe6" +
    "\001\002\000\022\025\uffdd\035\uffdd\036\uffdd\040\uffdd\044" +
    "\uffdd\045\uffdd\052\uffdd\077\uffdd\001\002\000\024\025\ufff0" +
    "\035\ufff0\036\ufff0\040\ufff0\044\ufff0\045\ufff0\052\ufff0\063" +
    "\ufff0\077\ufff0\001\002\000\072\002\uffd1\035\073\036\112" +
    "\037\071\040\110\041\074\042\072\043\076\044\116\045" +
    "\114\046\101\047\104\050\106\051\070\063\uffd1\067\102" +
    "\070\075\071\107\072\100\073\105\074\uffd1\075\uffd1\076" +
    "\103\077\uffd1\100\uffd1\101\uffd1\103\uffd1\111\uffd1\001\002" +
    "\000\024\014\131\015\135\016\141\044\154\063\151\077" +
    "\132\105\134\107\146\120\140\001\002\000\006\002\uff85" +
    "\101\uff85\001\002\000\006\106\uff88\120\uff88\001\002\000" +
    "\006\002\uff87\101\uff87\001\002\000\034\002\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\044\uffc6\063\uffc6\064\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\105\uffc6\107\uffc6\120\uffc6\001\002\000\006" +
    "\106\127\120\124\001\002\000\004\101\130\001\002\000" +
    "\006\002\uff86\101\uff86\001\002\000\006\106\uff89\120\uff89" +
    "\001\002\000\004\107\241\001\002\000\004\016\240\001" +
    "\002\000\006\002\uff8a\101\uff8a\001\002\000\022\014\131" +
    "\015\135\016\141\044\154\077\132\105\134\107\146\120" +
    "\140\001\002\000\004\111\203\001\002\000\016\002\uff4c" +
    "\063\uff4c\101\uff4c\106\uff4c\110\uff4c\113\uff4c\001\002\000" +
    "\016\002\uff4d\063\uff4d\101\uff4d\106\uff4d\110\uff4d\113\uff4d" +
    "\001\002\000\020\002\uff52\063\uff52\101\uff52\104\201\106" +
    "\uff52\110\uff52\113\uff52\001\002\000\022\014\uff24\015\uff24" +
    "\016\uff24\044\uff24\077\177\105\uff24\107\uff24\120\uff24\001" +
    "\002\000\016\002\uff4e\063\uff4e\101\uff4e\106\uff4e\110\uff4e" +
    "\113\uff4e\001\002\000\016\002\uff56\063\uff56\101\uff56\106" +
    "\uff56\110\uff56\113\uff56\001\002\000\010\002\uff8d\063\175" +
    "\101\uff8d\001\002\000\016\002\uff57\063\uff57\101\uff57\106" +
    "\uff57\110\uff57\113\uff57\001\002\000\006\110\170\115\167" +
    "\001\002\000\016\002\uff50\063\uff50\101\uff50\106\uff50\110" +
    "\uff50\113\uff50\001\002\000\016\002\uff51\063\uff51\101\uff51" +
    "\106\uff51\110\uff51\113\uff51\001\002\000\022\025\067\035" +
    "\024\036\021\040\014\044\030\045\007\052\017\077\042" +
    "\001\002\000\016\002\uff4f\063\uff4f\101\uff4f\106\uff4f\110" +
    "\uff4f\113\uff4f\001\002\000\022\014\131\015\135\016\141" +
    "\044\154\077\132\105\134\107\146\120\140\001\002\000" +
    "\022\014\131\015\135\016\141\044\154\077\132\105\134" +
    "\107\146\120\140\001\002\000\016\002\uff47\063\uff47\101" +
    "\uff47\106\uff47\110\uff47\113\uff47\001\002\000\016\002\uff48" +
    "\063\uff48\101\uff48\106\uff48\110\uff48\113\uff48\001\002\000" +
    "\016\002\uff25\063\uff25\101\uff25\106\uff25\110\uff25\113\uff25" +
    "\001\002\000\016\002\uff49\063\uff49\101\uff49\106\uff49\110" +
    "\uff49\113\uff49\001\002\000\006\002\uff8b\101\uff8b\001\002" +
    "\000\056\002\uffcd\035\073\036\112\037\071\040\110\041" +
    "\074\042\072\043\076\044\116\045\114\046\101\047\104" +
    "\050\106\051\070\067\102\070\075\071\107\072\100\073" +
    "\105\076\103\100\uffcd\101\uffcd\001\002\000\040\002\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\050" +
    "\uffcc\051\uffcc\063\uffcc\072\uffcc\073\uffcc\076\uffcc\100\164" +
    "\101\uffcc\001\002\000\022\025\067\035\024\036\021\040" +
    "\014\044\030\045\007\052\017\077\042\001\002\000\060" +
    "\002\uffce\035\073\036\112\037\071\040\110\041\074\042" +
    "\072\043\076\044\116\045\114\046\101\047\104\050\106" +
    "\051\070\063\uffce\067\102\070\075\071\107\072\100\073" +
    "\105\076\103\100\uffce\101\uffce\001\002\000\004\110\172" +
    "\001\002\000\004\110\uff4b\001\002\000\022\014\131\015" +
    "\135\016\141\044\154\077\132\105\134\107\146\120\140" +
    "\001\002\000\016\002\uff28\063\uff28\101\uff28\106\uff28\110" +
    "\uff28\113\uff28\001\002\000\022\014\131\015\135\016\141" +
    "\044\154\077\132\105\134\107\146\120\140\001\002\000" +
    "\016\002\uff4a\063\uff4a\101\uff4a\106\uff4a\110\uff4a\113\uff4a" +
    "\001\002\000\006\002\uff8c\101\uff8c\001\002\000\022\025" +
    "\067\035\024\036\021\040\014\044\030\045\007\052\017" +
    "\077\042\001\002\000\006\002\uff8e\101\uff8e\001\002\000" +
    "\022\014\uff23\015\uff23\016\uff23\044\uff23\077\uff23\105\uff23" +
    "\107\uff23\120\uff23\001\002\000\016\002\uff54\063\uff54\101" +
    "\uff54\106\uff54\110\uff54\113\uff54\001\002\000\004\120\202" +
    "\001\002\000\016\002\uff53\063\uff53\101\uff53\106\uff53\110" +
    "\uff53\113\uff53\001\002\000\012\044\uff6c\112\uff6c\120\uff6c" +
    "\121\uff6c\001\002\000\012\044\207\112\213\120\210\121" +
    "\211\001\002\000\006\101\uff68\113\uff68\001\002\000\006" +
    "\101\uff63\113\235\001\002\000\004\120\140\001\002\000" +
    "\032\014\uff5a\015\uff5a\016\uff5a\044\uff5a\077\uff5a\100\215" +
    "\101\uff65\104\227\105\uff5a\107\uff5a\113\uff65\120\uff5a\001" +
    "\002\000\024\014\uff5a\015\uff5a\016\uff5a\044\uff5a\077\uff5a" +
    "\100\215\105\uff5a\107\uff5a\120\uff5a\001\002\000\004\101" +
    "\214\001\002\000\016\002\uff6e\063\uff6e\101\uff6e\106\uff6e" +
    "\110\uff6e\113\uff6e\001\002\000\012\044\uff6d\112\uff6d\120" +
    "\uff6d\121\uff6d\001\002\000\006\120\221\121\222\001\002" +
    "\000\022\014\131\015\135\016\141\044\154\077\132\105" +
    "\134\107\146\120\140\001\002\000\006\101\uff69\113\uff69" +
    "\001\002\000\006\101\uff64\113\uff64\001\002\000\032\002" +
    "\000\014\000\015\000\016\000\044\000\064\000\077\000" +
    "\100\000\101\000\105\000\107\000\120\000\001\002\000" +
    "\032\002\uffff\014\uffff\015\uffff\016\uffff\044\uffff\064\uffff" +
    "\077\uffff\100\uffff\101\uffff\105\uffff\107\uffff\120\uffff\001" +
    "\002\000\026\014\uff5a\015\uff5a\016\uff5a\044\uff5a\064\uff5a" +
    "\077\uff5a\100\215\105\uff5a\107\uff5a\120\uff5a\001\002\000" +
    "\024\014\uff5b\015\uff5b\016\uff5b\044\uff5b\064\uff5b\077\uff5b" +
    "\105\uff5b\107\uff5b\120\uff5b\001\002\000\022\014\131\015" +
    "\135\016\141\044\154\077\132\105\134\107\146\120\140" +
    "\001\002\000\006\101\uff6a\113\uff6a\001\002\000\004\120" +
    "\230\001\002\000\006\101\uff66\113\uff66\001\002\000\006" +
    "\101\uff67\113\uff67\001\002\000\006\101\uff60\113\uff60\001" +
    "\002\000\004\101\uff6b\001\002\000\004\101\uff62\001\002" +
    "\000\004\101\uff61\001\002\000\004\106\237\001\002\000" +
    "\016\002\uff55\063\uff55\101\uff55\106\uff55\110\uff55\113\uff55" +
    "\001\002\000\022\014\uff22\015\uff22\016\uff22\044\uff22\077" +
    "\uff22\105\uff22\107\uff22\120\uff22\001\002\000\022\014\131" +
    "\015\135\016\141\044\154\077\132\105\134\107\146\120" +
    "\140\001\002\000\004\110\244\001\002\000\004\110\uff26" +
    "\001\002\000\022\014\131\015\135\016\141\044\154\077" +
    "\132\105\134\107\146\120\140\001\002\000\016\002\uff27" +
    "\063\uff27\101\uff27\106\uff27\110\uff27\113\uff27\001\002\000" +
    "\022\025\067\035\024\036\021\040\014\044\030\045\007" +
    "\052\017\077\042\001\002\000\006\002\uffb6\101\uffb6\001" +
    "\002\000\006\002\uffb4\101\uffb4\001\002\000\006\002\uffb7" +
    "\101\uffb7\001\002\000\054\002\uffb8\035\073\036\112\037" +
    "\071\040\110\041\074\042\072\043\076\044\116\045\114" +
    "\046\101\047\104\050\106\051\070\067\102\070\075\071" +
    "\107\072\100\073\105\076\103\101\uffb8\001\002\000\004" +
    "\002\001\001\002\000\006\002\uff98\101\uff98\001\002\000" +
    "\004\112\260\001\002\000\004\101\257\001\002\000\004" +
    "\112\uffb0\001\002\000\010\002\uffad\017\uffad\101\uffad\001" +
    "\002\000\006\002\uff96\101\uff96\001\002\000\006\002\uff95" +
    "\101\uff95\001\002\000\006\002\uff93\101\uff93\001\002\000" +
    "\004\101\uffa6\001\002\000\022\025\067\035\024\036\021" +
    "\040\014\044\030\045\007\052\017\077\042\001\002\000" +
    "\004\101\272\001\002\000\004\101\uffa5\001\002\000\064" +
    "\035\073\036\112\037\071\040\110\041\074\042\072\043" +
    "\076\044\116\045\114\046\101\047\104\050\106\051\070" +
    "\063\uffcd\067\102\070\075\071\107\072\100\073\105\074" +
    "\251\075\247\076\103\077\246\100\uffcd\101\uffb5\001\002" +
    "\000\004\101\uffa7\001\002\000\022\025\uffa4\035\uffa4\036" +
    "\uffa4\040\uffa4\044\uffa4\045\uffa4\052\uffa4\077\uffa4\001\002" +
    "\000\052\035\073\036\112\037\071\040\110\041\074\042" +
    "\072\043\076\044\116\045\114\046\101\047\104\050\106" +
    "\051\070\067\102\070\075\071\107\072\100\073\105\076" +
    "\103\111\034\001\002\000\010\002\uffa8\017\275\101\uffa8" +
    "\001\002\000\006\025\302\111\034\001\002\000\006\002" +
    "\uffa3\101\uffa3\001\002\000\006\002\uffaa\101\uffaa\001\002" +
    "\000\006\002\uffa9\101\uffa9\001\002\000\006\002\uffab\101" +
    "\uffab\001\002\000\024\025\067\035\024\036\021\040\014" +
    "\044\030\045\007\052\017\077\042\120\124\001\002\000" +
    "\006\005\305\011\306\001\002\000\004\103\326\001\002" +
    "\000\004\103\uff9c\001\002\000\030\025\067\035\024\036" +
    "\021\040\014\044\030\045\007\052\017\064\uff5c\077\042" +
    "\120\221\121\222\001\002\000\004\112\310\001\002\000" +
    "\006\002\uff9a\101\uff9a\001\002\000\022\025\067\035\024" +
    "\036\021\040\014\044\030\045\007\052\017\077\042\001" +
    "\002\000\004\103\uff9e\001\002\000\006\064\uff5a\100\215" +
    "\001\002\000\004\064\323\001\002\000\004\103\uff9d\001" +
    "\002\000\004\063\322\001\002\000\056\035\073\036\112" +
    "\037\071\040\110\041\074\042\072\043\076\044\116\045" +
    "\114\046\101\047\104\050\106\051\070\063\uffcd\067\102" +
    "\070\075\071\107\072\100\073\105\076\103\077\320\100" +
    "\uffcd\001\002\000\022\025\067\035\024\036\021\040\014" +
    "\044\030\045\007\052\017\077\042\001\002\000\052\035" +
    "\073\036\112\037\071\040\110\041\074\042\072\043\076" +
    "\044\116\045\114\046\101\047\104\050\106\051\070\067" +
    "\102\070\075\071\107\072\100\073\105\076\103\103\uff9f" +
    "\001\002\000\022\025\uffa2\035\uffa2\036\uffa2\040\uffa2\044" +
    "\uffa2\045\uffa2\052\uffa2\077\uffa2\001\002\000\022\025\uffa1" +
    "\035\uffa1\036\uffa1\040\uffa1\044\uffa1\045\uffa1\052\uffa1\077" +
    "\uffa1\001\002\000\004\064\uff5d\001\002\000\052\035\073" +
    "\036\112\037\071\040\110\041\074\042\072\043\076\044" +
    "\116\045\114\046\101\047\104\050\106\051\070\067\102" +
    "\070\075\071\107\072\100\073\105\076\103\103\uffa0\001" +
    "\002\000\056\004\031\010\023\012\013\013\057\020\037" +
    "\023\006\024\054\025\025\027\022\030\012\033\027\034" +
    "\055\035\024\036\021\040\014\044\030\045\007\052\017" +
    "\077\042\101\uffb1\111\034\120\060\001\002\000\004\112" +
    "\uff9b\001\002\000\006\002\uff81\101\uff81\001\002\000\006" +
    "\106\uff82\120\uff82\001\002\000\006\002\uff7f\101\uff7f\001" +
    "\002\000\024\014\uff8f\015\uff8f\016\uff8f\044\uff8f\063\335" +
    "\077\uff8f\105\uff8f\107\uff8f\120\uff8f\001\002\000\022\014" +
    "\131\015\135\016\141\044\154\077\132\105\134\107\146" +
    "\120\140\001\002\000\022\014\uff90\015\uff90\016\uff90\044" +
    "\uff90\077\uff90\105\uff90\107\uff90\120\uff90\001\002\000\006" +
    "\002\uff84\101\uff84\001\002\000\006\106\341\120\333\001" +
    "\002\000\004\101\342\001\002\000\006\002\uff80\101\uff80" +
    "\001\002\000\006\106\uff83\120\uff83\001\002\000\022\025" +
    "\067\035\024\036\021\040\014\044\030\045\007\052\017" +
    "\077\042\001\002\000\006\002\uffbe\101\uffbe\001\002\000" +
    "\022\025\067\035\024\036\021\040\014\044\030\045\007" +
    "\052\017\077\042\001\002\000\004\063\351\001\002\000" +
    "\004\063\uffbd\001\002\000\004\063\uffbc\001\002\000\022" +
    "\025\uffba\035\uffba\036\uffba\040\uffba\044\uffba\045\uffba\052" +
    "\uffba\077\uffba\001\002\000\006\002\uffb9\101\uffb9\001\002" +
    "\000\054\002\uffac\035\073\036\112\037\071\040\110\041" +
    "\074\042\072\043\076\044\116\045\114\046\101\047\104" +
    "\050\106\051\070\067\102\070\075\071\107\072\100\073" +
    "\105\076\103\101\uffac\001\002\000\006\002\uff97\101\uff97" +
    "\001\002\000\006\002\uffbf\101\uffbf\001\002\000\030\002" +
    "\uffc8\014\131\015\135\016\141\044\154\063\uffca\077\132" +
    "\101\uffc8\105\134\107\146\120\140\001\002\000\006\002" +
    "\uffc1\101\uffc1\001\002\000\006\106\uffc2\120\uffc2\001\002" +
    "\000\006\106\363\120\124\001\002\000\004\101\364\001" +
    "\002\000\006\002\uffc0\101\uffc0\001\002\000\006\106\uffc3" +
    "\120\uffc3\001\002\000\004\063\370\001\002\000\004\063" +
    "\uffcb\001\002\000\006\002\uffc4\101\uffc4\001\002\000\022" +
    "\025\067\035\024\036\021\040\014\044\030\045\007\052" +
    "\017\077\042\001\002\000\006\002\uffc9\101\uffc9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\062\062\015\067\043\070\025\073\045\102" +
    "\017\105\042\110\034\111\032\113\035\116\014\117\047" +
    "\120\040\126\044\133\046\134\004\135\003\136\052\137" +
    "\050\140\010\141\037\142\055\143\051\144\007\152\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\074" +
    "\356\077\354\102\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\161\353\001\001\000" +
    "\010\062\015\067\352\070\025\001\001\000\002\001\001" +
    "\000\012\063\347\064\346\114\344\115\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\121\331\123\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\062\015\067\267\070\025" +
    "\102\017\111\266\113\263\116\014\153\265\154\264\001" +
    "\001\000\002\001\001\000\014\062\015\067\161\070\025" +
    "\103\262\116\261\001\001\000\002\001\001\000\004\161" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\062\015\067\043\070\025\073\045\102\017\105\255\106" +
    "\254\110\034\111\032\113\035\116\014\117\047\120\040" +
    "\126\044\133\046\134\004\135\003\136\052\137\050\140" +
    "\010\141\037\142\055\143\051\144\007\152\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\063\076\064\112\065\114\066\110\100" +
    "\162\112\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\102\117\127\120\132\122\001\001\000\002\001\001\000" +
    "\010\062\015\067\065\070\025\001\001\000\004\101\061" +
    "\001\001\000\062\062\015\067\043\070\025\073\045\102" +
    "\017\105\064\110\034\111\032\113\035\116\014\117\047" +
    "\120\040\126\044\133\046\134\004\135\003\136\052\137" +
    "\050\140\010\141\037\142\055\143\051\144\007\152\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\063\076\064\112\065\114" +
    "\066\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\062\015\067\116\070\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\063\076\064\112\065\114\066\110\001" +
    "\001\000\030\002\135\012\143\013\142\014\144\017\146" +
    "\023\141\024\151\026\136\030\147\060\152\131\132\001" +
    "\001\000\002\001\001\000\004\130\124\001\001\000\002" +
    "\001\001\000\004\101\061\001\001\000\006\102\117\132" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\135\012\235\013\142\014\144\017\146" +
    "\023\141\024\151\026\136\030\147\060\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\173\001\001\000\002\001\001" +
    "\000\004\027\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\062\015\067\161\070\025\116\160\001\001" +
    "\000\002\001\001\000\030\002\135\012\157\013\142\014" +
    "\144\016\156\017\146\023\141\024\151\026\136\030\147" +
    "\060\152\001\001\000\030\002\135\012\154\013\142\014" +
    "\144\017\146\020\155\023\141\024\151\026\136\030\147" +
    "\060\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\063\076\064\112\065\114\066\110\100\162\001\001\000" +
    "\002\001\001\000\010\062\015\067\164\070\025\001\001" +
    "\000\012\063\076\064\112\065\114\066\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\135\012\157" +
    "\013\142\014\144\016\170\017\146\023\141\024\151\026" +
    "\136\030\147\060\152\001\001\000\002\001\001\000\030" +
    "\002\135\012\157\013\142\014\144\016\172\017\146\023" +
    "\141\024\151\026\136\030\147\060\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\062\015\067\161\070" +
    "\025\116\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\203\001\001\000\010\003\211\010\204\050\205" +
    "\001\001\000\002\001\001\000\006\006\233\051\232\001" +
    "\001\000\004\014\231\001\001\000\006\052\225\054\224" +
    "\001\001\000\006\053\216\054\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\161\222" +
    "\001\001\000\026\002\135\012\217\013\142\014\144\017" +
    "\146\023\141\024\151\026\136\030\147\060\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\223\001\001\000\002\001\001" +
    "\000\026\002\135\012\230\013\142\014\144\017\146\023" +
    "\141\024\151\026\136\030\147\060\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\135\012\242\013\142\014\144" +
    "\017\146\023\141\024\151\025\241\026\136\030\147\060" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\135\012\157\013\142\014\144\016\244\017\146\023" +
    "\141\024\151\026\136\030\147\060\152\001\001\000\002" +
    "\001\001\000\010\062\015\067\251\070\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\063\076\064\112\065\114\066\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\062\015\067\272\070\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\063\076\064\112\065\114\066\110" +
    "\100\162\112\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\063\076\064\112\065\114\066\110\142\273" +
    "\001\001\000\004\155\275\001\001\000\010\142\276\152" +
    "\300\156\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\062\015\067" +
    "\267\070\025\102\017\111\266\113\263\116\014\153\265" +
    "\154\264\001\001\000\006\145\306\146\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\313\062\015" +
    "\067\316\070\025\116\315\147\314\150\311\151\310\161" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\062\015\067\324\070\025\001\001\000\002\001\001\000" +
    "\004\054\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\063\076\064\112\065\114\066" +
    "\110\100\162\001\001\000\010\062\015\067\320\070\025" +
    "\001\001\000\012\063\076\064\112\065\114\066\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\063\076\064\112\065\114\066\110\001\001\000" +
    "\064\062\015\067\043\070\025\073\045\102\017\105\255" +
    "\106\326\110\034\111\032\113\035\116\014\117\047\120" +
    "\040\126\044\133\046\134\004\135\003\136\052\137\050" +
    "\140\010\141\037\142\055\143\051\144\007\152\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\122\336" +
    "\001\001\000\002\001\001\000\004\124\333\001\001\000" +
    "\026\002\135\012\335\013\142\014\144\017\146\023\141" +
    "\024\151\026\136\030\147\060\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\062" +
    "\015\067\161\070\025\116\343\001\001\000\002\001\001" +
    "\000\012\062\015\067\161\070\025\116\351\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\063\076\064\112\065" +
    "\114\066\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\135\012\365\013\142\014\144\017\146\023" +
    "\141\024\151\026\136\030\147\060\152\076\366\104\364" +
    "\001\001\000\002\001\001\000\004\075\360\001\001\000" +
    "\006\074\361\102\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\062\015\067\161\070\025" +
    "\116\370\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info){
       StringBuffer m = new StringBuffer("ERRO SINTÁTICO EM: ");

       if (info instanceof ComplexSymbol){
         ComplexSymbol s = (ComplexSymbol) info;
         if(s.value != null) m.append( s.value.toString() );
         m.append( " - Linha: " + s.getLeft().getLine() + " - Coluna: "+s.getLeft().getColumn() );
         }

       m.append(" : "+message);

       System.err.println(m);
     }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // AuxChannelType1 ::= CHANNEL_OP CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // AuxChannelType1 ::= CHAN CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // AuxChannelType1 ::= CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ChannelType ::= AuxChannelType1 ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ChannelType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // KeyType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // MapType ::= MAP SQRD_L KeyType SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapType",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SliceType ::= SQRD_L SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // MethodSpecAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // MethodSpecAux2 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // MethodSpecAux1 ::= MethodSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // MethodSpecAux1 ::= Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // MethodSpec ::= IDENTIFIER MethodSpecAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // AuxIntefaceType1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // AuxIntefaceType1 ::= AuxIntefaceType1 MethodSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // InterfaceType ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // FuncIdentifierListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FuncIdentifierList ::= Identifier FuncIdentifierListAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OptEllipsis ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsis",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OptEllipsis ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsis",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // OptIdentifierList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OptIdentifierList ::= FuncIdentifierList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifierList",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ParameterDecl ::= OptIdentifierList OptEllipsis Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AuxParameterList1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameterList1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // AuxParameterList1 ::= AuxParameterList1 COMMA ParameterDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameterList1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ParameterList ::= ParameterDecl AuxParameterList1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OptComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OptComma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AuxParameters1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AuxParameters1 ::= ParameterList OptComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Parameters ::= PAR_L AuxParameters1 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Result ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Result ::= Parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AuxResult ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // AuxResult ::= Result 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Signature ::= Parameters AuxResult 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FunctionType ::= FUNC Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BaseType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // PointerType ::= MUL BaseType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ElementType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ArrayLength ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TypeLit ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TypeLit ::= ChannelType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TypeLit ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TypeLit ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TypeLit ::= PointerType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TypeLit ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AuxTypeName1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AuxTypeName1 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TypeName ::= IDENTIFIER AuxTypeName1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Type ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Type ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Type ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TypeStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TypeStar ::= Type TypeStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IdentifierStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // IdentifierStar1 ::= COMMA Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // IdentifierList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // IdentifierList ::= Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OptMul ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OptMul ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EmbeddedField1 ::= MUL TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmbeddedField1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Tag ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // AuxFieldDecl2 ::= Tag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // AuxFieldDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AuxFieldDecl4 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl4",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AuxFieldDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // AuxFieldDecl3 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // AuxFieldDecl3 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // AuxFieldDecl1 ::= EmbeddedField1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AuxFieldDecl1 ::= BLANK_IDENTIFIER AuxFieldDecl4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FieldDeclStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Statement ::= DeferStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Statement ::= SelectStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Statement ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Statement ::= FallthroughStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Statement ::= GotoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Statement ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Statement ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Statement ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Statement ::= GoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Statement ::= LabeledStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Declaration ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TypeDecl ::= TYPE TypeDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TypeDeclAux ::= PAR_L TypeSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TypeDeclAux ::= TypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TypeSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TypeSpecAux ::= TypeSpecAux TypeSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TypeSpec ::= IDENTIFIER OptAssign Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpec",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VarDecl ::= VAR VarDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VarDeclAux ::= PAR_L VarSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VarDeclAux ::= VarSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VarSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VarSpecAux ::= VarSpecAux VarSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VarSpec ::= IdentifierListStar2 VarSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VarSpecAux2 ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VarSpecAux2 ::= Type OptAssignExpList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptAssignExpList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptAssignExpList ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OptAssign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OptAssign ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LabeledStmt ::= IDENTIFIER COLON Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStmt",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // GoStmt ::= GO Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GoStmt",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ReturnStmt ::= RETURN ExpressionListStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpressionListStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpressionListStar ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BreakStmt ::= BREAK Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ContinueStmt ::= CONTINUE Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // GotoStmt ::= GOTO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GotoStmt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FallthroughStmt ::= FALLTHROUGH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FallthroughStmt",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SelectStmt ::= SELECT CURLY_L CommClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectStmt",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CommClause ::= CommCase COLON StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CommCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CommCase ::= CASE StmtOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StmtOpt ::= RecvStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // StmtOpt ::= Expression CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RecvStmt ::= RecvStmtAux Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmt",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RecvStmtAux ::= IdentifierList CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RecvStmtAux ::= ExpressionList ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IfStmt ::= IF SimpleStmtAux Expression Block IfStmtAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SimpleStmtAux ::= SimpleStmt2 SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SimpleStmt2 ::= ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt2",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SimpleStmt2 ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt2",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SimpleStmt2 ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt2",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IfStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IfStmtAux ::= ELSE IfStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IfStmtAux2 ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux2",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IfStmtAux2 ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux2",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DeferStmt ::= DEFER Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeferStmt",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Block ::= CURLY_L StatementList CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StatementListAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementListAux",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementListAux ::= StatementListAux StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementListAux",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementList ::= Statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SimpleStmt ::= ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SimpleStmt ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SimpleStmt ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AuxExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AuxExpression ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AuxExpression ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AuxExpression ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Assignment ::= ExpressionList AssignOp ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AssignOp ::= AuxOp ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AuxOp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AuxOp ::= MulOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AuxOp ::= AddOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxOp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ShortVarDecl ::= IdentifierListStar2 CHANNEL_ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShortVarDecl",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ConstDecl ::= CONST AuxConstDecl1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AuxConstDecl1 ::= PAR_L AuxConstSpec PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AuxConstDecl1 ::= ConstSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AuxConstSpec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ConstSpec ::= IdentifierListStar2 AuxConstSpec2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstSpec",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IdentifierListStar2 ::= IDENTIFIER IdentifierListStarAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStar2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IdentifierListStarAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AuxConstSpec2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AuxConstSpec2 ::= OptType ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OptType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OptType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionList ::= Expression AuxCommaExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AuxCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AuxCommaExp ::= AuxCommaExp COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpressionStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpressionStar ::= ExpressionStar Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression BinOp Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= UnaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // UnaryExpr ::= UnaryOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // UnaryExpr ::= IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Literal ::= BasicLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Operand ::= PAR_L Expression PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Operand ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operand ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OperandStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OperandStar ::= OperandStar Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinOp ::= MulOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinOp ::= AddOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinOp ::= RelOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BinOp ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BinOp ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= GTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= LTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= NE_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= EQ_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AddOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOp ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AddOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AddOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MulOp ::= AND_NOT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MulOp ::= ADDRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MulOp ::= RIGHT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MulOp ::= LEFT_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MulOp ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MulOp ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MulOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOp ::= CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryOp ::= ADDRESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnaryOp ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnaryOp ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnaryOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // UnaryOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicLit ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicLit ::= RUNE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicLit ::= IMG_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicLit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicLit ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicLitStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BasicLitStar ::= BasicLit BasicLitStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Identifier ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

