
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package syntax;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import semantic.*;
import semantic.models.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\002\002\004\000\002\175\003\000\002\175" +
    "\003\000\002\307\004\000\002\307\002\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\107\003\000\002" +
    "\107\003\000\002\077\004\000\002\163\003\000\002\163" +
    "\003\000\002\163\006\000\002\163\003\000\002\163\003" +
    "\000\002\163\003\000\002\164\005\000\002\165\003\000" +
    "\002\165\002\000\002\167\005\000\002\170\005\000\002" +
    "\170\002\000\002\171\004\000\002\172\003\000\002\172" +
    "\003\000\002\173\003\000\002\173\002\000\002\174\004" +
    "\000\002\166\003\000\002\166\003\000\002\100\005\000" +
    "\002\142\006\000\002\145\005\000\002\145\002\000\002" +
    "\144\004\000\002\146\003\000\002\146\005\000\002\150" +
    "\005\000\002\150\002\000\002\147\004\000\002\151\003" +
    "\000\002\151\003\000\002\151\002\000\002\143\004\000" +
    "\002\311\004\000\002\311\002\000\002\160\003\000\002" +
    "\160\003\000\002\160\005\000\002\162\003\000\002\162" +
    "\003\000\002\112\003\000\002\112\004\000\002\113\003" +
    "\000\002\113\003\000\002\113\004\000\002\110\003\000" +
    "\002\110\005\000\002\127\003\000\002\127\003\000\002" +
    "\127\007\000\002\136\006\000\002\137\004\000\002\137" +
    "\002\000\002\140\003\000\002\140\004\000\002\141\004" +
    "\000\002\141\002\000\002\130\005\000\002\130\004\000" +
    "\002\133\003\000\002\133\005\000\002\134\004\000\002" +
    "\134\005\000\002\135\005\000\002\135\003\000\002\056" +
    "\003\000\002\056\004\000\002\056\002\000\002\131\003" +
    "\000\002\131\002\000\002\132\003\000\002\132\004\000" +
    "\002\126\005\000\002\111\004\000\002\310\005\000\002" +
    "\310\002\000\002\116\004\000\002\117\006\000\002\120" +
    "\003\000\002\120\003\000\002\120\005\000\002\121\004" +
    "\000\002\121\002\000\002\176\004\000\002\202\003\000" +
    "\002\202\005\000\002\177\004\000\002\200\005\000\002" +
    "\200\002\000\002\203\005\000\002\203\002\000\002\207" +
    "\003\000\002\207\002\000\002\201\005\000\002\201\002" +
    "\000\002\204\005\000\002\204\002\000\002\313\002\000" +
    "\002\205\005\000\002\210\003\000\002\210\003\000\002" +
    "\210\003\000\002\210\003\000\002\210\003\000\002\210" +
    "\003\000\002\210\003\000\002\210\003\000\002\210\003" +
    "\000\002\210\003\000\002\210\003\000\002\210\003\000" +
    "\002\210\003\000\002\210\003\000\002\210\003\000\002" +
    "\154\005\000\002\154\002\000\002\153\003\000\002\153" +
    "\003\000\002\153\003\000\002\314\002\000\002\155\007" +
    "\000\002\156\003\000\002\156\002\000\002\157\007\000" +
    "\002\152\003\000\002\152\003\000\002\152\003\000\002" +
    "\222\004\000\002\223\003\000\002\223\005\000\002\224" +
    "\005\000\002\224\002\000\002\225\005\000\002\230\004" +
    "\000\002\231\003\000\002\231\005\000\002\232\005\000" +
    "\002\232\002\000\002\234\004\000\002\233\004\000\002" +
    "\233\004\000\002\235\005\000\002\213\004\000\002\213" +
    "\003\000\002\213\004\000\002\213\002\000\002\215\004" +
    "\000\002\215\003\000\002\215\003\000\002\215\004\000" +
    "\002\215\004\000\002\215\002\000\002\315\002\000\002" +
    "\216\006\000\002\217\003\000\002\217\003\000\002\217" +
    "\003\000\002\217\003\000\002\217\003\000\002\217\003" +
    "\000\002\217\003\000\002\217\003\000\002\217\003\000" +
    "\002\217\003\000\002\214\005\000\002\211\005\000\002" +
    "\211\002\000\002\244\005\000\002\263\005\000\002\264" +
    "\003\000\002\264\003\000\002\264\003\000\002\264\002" +
    "\000\002\265\007\000\002\267\004\000\002\267\003\000" +
    "\002\267\003\000\002\267\005\000\002\270\004\000\002" +
    "\270\002\000\002\271\003\000\002\271\003\000\002\266" +
    "\005\000\002\272\004\000\002\273\004\000\002\262\004" +
    "\000\002\262\003\000\002\274\006\000\002\274\006\000" +
    "\002\276\006\000\002\276\002\000\002\300\011\000\002" +
    "\302\004\000\002\302\003\000\002\301\006\000\002\301" +
    "\002\000\002\303\004\000\002\303\003\000\002\277\004" +
    "\000\002\277\003\000\002\305\004\000\002\304\005\000" +
    "\002\304\002\000\002\245\004\000\002\255\007\000\002" +
    "\257\005\000\002\257\002\000\002\260\004\000\002\260" +
    "\002\000\002\261\003\000\002\261\003\000\002\246\006" +
    "\000\002\247\006\000\002\247\002\000\002\250\004\000" +
    "\002\250\003\000\002\251\005\000\002\251\003\000\002" +
    "\252\004\000\002\253\004\000\002\254\003\000\002\254" +
    "\003\000\002\055\003\000\002\055\002\000\002\243\003" +
    "\000\002\242\004\000\002\241\004\000\002\240\004\000" +
    "\002\206\003\000\002\206\002\000\002\237\004\000\002" +
    "\236\004\000\002\226\003\000\002\226\002\000\002\227" +
    "\004\000\002\227\002\000\002\002\006\000\002\004\005" +
    "\000\002\004\002\000\002\003\004\000\002\057\004\000" +
    "\002\057\004\000\002\057\003\000\002\061\004\000\002" +
    "\061\004\000\002\061\002\000\002\062\004\000\002\060" +
    "\002\000\002\060\003\000\002\006\003\000\002\010\004" +
    "\000\002\052\003\000\002\052\002\000\002\005\004\000" +
    "\002\063\005\000\002\063\002\000\002\306\004\000\002" +
    "\306\002\000\002\012\003\000\002\012\003\000\002\012" +
    "\005\000\002\015\004\000\002\015\003\000\002\016\004" +
    "\000\002\016\002\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\031" +
    "\003\000\002\032\006\000\002\020\003\000\002\021\004" +
    "\000\002\022\003\000\002\023\004\000\002\033\004\000" +
    "\002\073\003\000\002\073\002\000\002\034\006\000\002" +
    "\034\003\000\002\034\003\000\002\074\004\000\002\074" +
    "\003\000\002\074\005\000\002\075\003\000\002\075\004" +
    "\000\002\035\005\000\002\064\003\000\002\064\002\000" +
    "\002\053\003\000\002\053\002\000\002\036\003\000\002" +
    "\014\003\000\002\014\005\000\002\037\003\000\002\037" +
    "\005\000\002\037\004\000\002\040\004\000\002\040\003" +
    "\000\002\040\002\000\002\043\004\000\002\044\005\000" +
    "\002\044\005\000\002\044\004\000\002\041\004\000\002" +
    "\042\005\000\002\042\002\000\002\024\006\000\002\071" +
    "\005\000\002\071\002\000\002\047\004\000\002\050\003" +
    "\000\002\050\003\000\002\051\004\000\002\051\002\000" +
    "\002\026\005\000\002\025\007\000\002\027\003\000\002" +
    "\030\004\000\002\072\003\000\002\072\004\000\002\072" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ed\000\004\021\005\001\002\000\004\101\011\001" +
    "\002\000\004\120\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\101\uffb8\001\002\000" +
    "\016\002\uffc2\006\uffc2\023\uffc2\027\uffc2\032\012\034\uffc2" +
    "\001\002\000\012\104\u01e9\105\u01e7\113\uffb9\120\u01e8\001" +
    "\002\000\004\101\u01e2\001\002\000\014\002\uff65\006\015" +
    "\023\030\027\023\034\022\001\002\000\006\105\115\120" +
    "\u01da\001\002\000\004\101\uff5b\001\002\000\004\101\uff62" +
    "\001\002\000\004\101\uff64\001\002\000\004\101\uff5a\001" +
    "\002\000\006\105\u01cc\120\035\001\002\000\006\105\u01c0" +
    "\120\u01c2\001\002\000\004\101\u01bd\001\002\000\004\002" +
    "\uffc4\001\002\000\004\101\uff63\001\002\000\004\101\uff5c" +
    "\001\002\000\006\105\034\120\035\001\002\000\004\101" +
    "\uff85\001\002\000\034\006\064\007\071\014\047\015\050" +
    "\016\056\044\074\063\uff7c\077\046\101\uff7a\105\051\107" +
    "\065\120\055\121\063\001\002\000\004\101\uff84\001\002" +
    "\000\006\106\uff80\120\uff80\001\002\000\036\006\uff77\007" +
    "\uff77\014\uff77\015\uff77\016\uff77\044\uff77\063\uff77\077\uff77" +
    "\100\uff77\101\uff77\105\uff77\107\uff77\120\uff77\121\uff77\001" +
    "\002\000\036\006\uff78\007\uff78\014\uff78\015\uff78\016\uff78" +
    "\044\uff78\063\uff78\077\uff78\100\uff78\101\uff78\105\uff78\107" +
    "\uff78\120\uff78\121\uff78\001\002\000\036\006\uff76\007\uff76" +
    "\014\uff76\015\uff76\016\uff76\044\uff76\063\uff76\077\uff76\100" +
    "\040\101\uff76\105\uff76\107\uff76\120\uff76\121\uff76\001\002" +
    "\000\004\120\041\001\002\000\036\006\uff79\007\uff79\014" +
    "\uff79\015\uff79\016\uff79\044\uff79\063\uff79\077\uff79\100\uff79" +
    "\101\uff79\105\uff79\107\uff79\120\uff79\121\uff79\001\002\000" +
    "\006\106\044\120\035\001\002\000\004\101\045\001\002" +
    "\000\004\101\uff83\001\002\000\006\106\uff81\120\uff81\001" +
    "\002\000\004\016\262\001\002\000\004\107\u01b8\001\002" +
    "\000\004\111\u01a2\001\002\000\030\006\064\007\071\014" +
    "\047\015\050\016\056\044\074\077\046\105\051\107\065" +
    "\120\055\121\063\001\002\000\004\063\u019e\001\002\000" +
    "\030\063\ufeca\100\ufeca\101\ufeca\102\ufeca\103\ufeca\105\ufeca" +
    "\106\ufeca\110\ufeca\111\ufeca\113\ufeca\122\ufeca\001\002\000" +
    "\030\063\ufecb\100\ufecb\101\ufecb\102\ufecb\103\ufecb\105\ufecb" +
    "\106\ufecb\110\ufecb\111\ufecb\113\ufecb\122\ufecb\001\002\000" +
    "\136\035\ufed0\036\ufed0\037\ufed0\040\ufed0\041\ufed0\042\ufed0" +
    "\043\ufed0\044\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051" +
    "\ufed0\053\ufed0\054\ufed0\055\ufed0\057\ufed0\060\ufed0\061\ufed0" +
    "\062\ufed0\063\ufed0\064\ufed0\065\ufed0\066\ufed0\067\ufed0\070" +
    "\ufed0\071\ufed0\072\ufed0\073\ufed0\074\ufed0\075\ufed0\076\ufed0" +
    "\077\ufed0\100\ufed0\101\ufed0\102\ufed0\103\ufed0\104\u0102\105" +
    "\ufed0\106\ufed0\107\ufed0\110\ufed0\111\ufed0\113\ufed0\122\ufed0" +
    "\123\ufed0\001\002\000\030\006\ufe95\007\ufe95\014\ufe95\015" +
    "\ufe95\016\ufe95\044\ufe95\077\u019d\105\ufe95\107\ufe95\120\ufe95" +
    "\121\ufe95\001\002\000\030\063\ufecc\100\ufecc\101\ufecc\102" +
    "\ufecc\103\ufecc\105\ufecc\106\ufecc\110\ufecc\111\ufecc\113\ufecc" +
    "\122\ufecc\001\002\000\030\063\ufed5\100\ufed5\101\ufed5\102" +
    "\ufed5\103\ufed5\105\ufed5\106\ufed5\110\ufed5\111\ufed5\113\ufed5" +
    "\122\ufed5\001\002\000\004\063\uff7d\001\002\000\030\063" +
    "\ufed6\100\ufed6\101\ufed6\102\ufed6\103\ufed6\105\ufed6\106\ufed6" +
    "\110\ufed6\111\ufed6\113\ufed6\122\ufed6\001\002\000\134\035" +
    "\ufed2\036\ufed2\037\ufed2\040\ufed2\041\ufed2\042\ufed2\043\ufed2" +
    "\044\ufed2\045\ufed2\046\ufed2\047\ufed2\050\ufed2\051\ufed2\053" +
    "\ufed2\054\ufed2\055\ufed2\057\ufed2\060\ufed2\061\ufed2\062\ufed2" +
    "\063\ufed2\064\ufed2\065\ufed2\066\ufed2\067\ufed2\070\ufed2\071" +
    "\ufed2\072\ufed2\073\ufed2\074\ufed2\075\ufed2\076\ufed2\077\ufed2" +
    "\100\ufed2\101\ufed2\102\ufed2\103\ufed2\105\ufed2\106\ufed2\107" +
    "\ufed2\110\ufed2\111\ufed2\113\ufed2\122\ufed2\123\ufed2\001\002" +
    "\000\004\105\115\001\002\000\060\006\224\007\071\014" +
    "\047\015\050\016\056\035\213\036\210\040\205\044\221" +
    "\045\201\052\207\077\225\105\216\107\065\110\222\113" +
    "\177\114\204\115\230\116\175\117\227\120\055\121\063" +
    "\122\176\001\002\000\030\063\ufece\100\ufece\101\ufece\102" +
    "\ufece\103\ufece\105\ufece\106\ufece\110\ufece\111\ufece\113\ufece" +
    "\122\ufece\001\002\000\030\063\ufec9\100\ufec9\101\ufec9\102" +
    "\ufec9\103\ufec9\105\ufec9\106\ufec9\110\ufec9\111\ufec9\113\ufec9" +
    "\122\ufec9\001\002\000\030\063\ufecf\100\ufecf\101\ufecf\102" +
    "\ufecf\103\ufecf\105\ufecf\106\ufecf\110\ufecf\111\ufecf\113\ufecf" +
    "\122\ufecf\001\002\000\004\111\103\001\002\000\030\063" +
    "\ufec8\100\ufec8\101\ufec8\102\ufec8\103\ufec8\105\ufec8\106\ufec8" +
    "\110\ufec8\111\ufec8\113\ufec8\122\ufec8\001\002\000\030\006" +
    "\064\007\071\014\047\015\050\016\056\044\074\077\046" +
    "\105\051\107\065\120\055\121\063\001\002\000\030\006" +
    "\064\007\071\014\047\015\050\016\056\044\074\077\046" +
    "\105\051\107\065\120\055\121\063\001\002\000\030\063" +
    "\ufecd\100\ufecd\101\ufecd\102\ufecd\103\ufecd\105\ufecd\106\ufecd" +
    "\110\ufecd\111\ufecd\113\ufecd\122\ufecd\001\002\000\004\101" +
    "\uff82\001\002\000\030\063\ufec3\100\ufec3\101\ufec3\102\ufec3" +
    "\103\ufec3\105\ufec3\106\ufec3\110\ufec3\111\ufec3\113\ufec3\122" +
    "\ufec3\001\002\000\030\063\ufec4\100\ufec4\101\ufec4\102\ufec4" +
    "\103\ufec4\105\ufec4\106\ufec4\110\ufec4\111\ufec4\113\ufec4\122" +
    "\ufec4\001\002\000\030\063\ufe96\100\ufe96\101\ufe96\102\ufe96" +
    "\103\ufe96\105\ufe96\106\ufe96\110\ufe96\111\ufe96\113\ufe96\122" +
    "\ufe96\001\002\000\030\063\ufec5\100\ufec5\101\ufec5\102\ufec5" +
    "\103\ufec5\105\ufec5\106\ufec5\110\ufec5\111\ufec5\113\ufec5\122" +
    "\ufec5\001\002\000\006\112\ufe9f\120\ufe9f\001\002\000\006" +
    "\112\107\120\105\001\002\000\010\101\ufe9a\104\116\105" +
    "\115\001\002\000\004\101\110\001\002\000\030\063\ufea1" +
    "\100\ufea1\101\ufea1\102\ufea1\103\ufea1\105\ufea1\106\ufea1\110" +
    "\ufea1\111\ufea1\113\ufea1\122\ufea1\001\002\000\006\112\ufea0" +
    "\120\ufea0\001\002\000\004\101\ufe9d\001\002\000\056\006" +
    "\064\007\071\014\047\015\050\016\056\044\074\063\ufebf" +
    "\077\046\100\ufebf\101\ufebf\102\ufebf\103\ufebf\105\ufebf\106" +
    "\ufebf\107\065\110\ufebf\111\ufebf\113\ufebf\120\055\121\063" +
    "\122\ufebf\123\155\001\002\000\004\101\ufe9c\001\002\000" +
    "\004\101\ufe9e\001\002\000\034\006\064\007\071\014\047" +
    "\015\050\016\056\044\074\077\046\102\130\105\120\106" +
    "\ufeb4\107\065\120\122\121\124\001\002\000\004\120\117" +
    "\001\002\000\004\101\ufe9b\001\002\000\030\006\064\007" +
    "\071\014\047\015\050\016\056\044\074\077\046\105\051" +
    "\107\065\120\055\121\063\001\002\000\006\100\134\106" +
    "\ufea9\001\002\000\044\006\000\007\000\014\000\015\000" +
    "\016\000\044\000\064\000\077\000\100\000\101\000\102" +
    "\000\104\000\105\000\106\000\107\000\120\000\121\000" +
    "\001\002\000\006\100\ufeb0\106\ufeb0\001\002\000\044\006" +
    "\uffff\007\uffff\014\uffff\015\uffff\016\uffff\044\uffff\064\uffff" +
    "\077\uffff\100\uffff\101\uffff\102\uffff\104\uffff\105\uffff\106" +
    "\uffff\107\uffff\120\uffff\121\uffff\001\002\000\034\006\064" +
    "\007\071\014\047\015\050\016\056\044\074\077\046\100" +
    "\142\102\143\105\051\107\065\120\055\121\063\001\002" +
    "\000\004\106\ufeb5\001\002\000\004\106\137\001\002\000" +
    "\030\006\064\007\071\014\047\015\050\016\056\044\074" +
    "\077\046\105\051\107\065\120\055\121\063\001\002\000" +
    "\004\106\ufeae\001\002\000\004\106\ufeb1\001\002\000\006" +
    "\100\134\106\ufea9\001\002\000\034\006\064\007\071\014" +
    "\047\015\050\016\056\044\074\077\046\102\130\105\120" +
    "\106\ufeaa\107\065\120\122\121\124\001\002\000\004\106" +
    "\ufead\001\002\000\004\106\ufeab\001\002\000\056\006\ufeb6" +
    "\007\ufeb6\014\ufeb6\015\ufeb6\016\ufeb6\044\ufeb6\063\ufeb6\077" +
    "\ufeb6\100\ufeb6\101\ufeb6\102\ufeb6\103\ufeb6\105\ufeb6\106\ufeb6" +
    "\107\ufeb6\110\ufeb6\111\ufeb6\113\ufeb6\120\ufeb6\121\ufeb6\122" +
    "\ufeb6\123\ufeb6\001\002\000\004\106\ufea8\001\002\000\006" +
    "\100\134\106\ufea9\001\002\000\006\120\122\121\124\001" +
    "\002\000\030\006\064\007\071\014\047\015\050\016\056" +
    "\044\074\077\046\105\051\107\065\120\055\121\063\001" +
    "\002\000\006\100\134\106\ufea9\001\002\000\004\106\ufea6" +
    "\001\002\000\034\006\064\007\071\014\047\015\050\016" +
    "\056\044\074\077\046\100\142\102\143\105\051\107\065" +
    "\120\055\121\063\001\002\000\004\106\ufea7\001\002\000" +
    "\004\106\ufea5\001\002\000\004\106\ufeac\001\002\000\004" +
    "\106\153\001\002\000\006\100\ufeaf\106\ufeaf\001\002\000" +
    "\030\063\ufec0\100\ufec0\101\ufec0\102\ufec0\103\ufec0\105\ufec0" +
    "\106\ufec0\110\ufec0\111\ufec0\113\ufec0\122\ufec0\001\002\000" +
    "\004\105\161\001\002\000\030\063\ufebd\100\ufebd\101\ufebd" +
    "\102\ufebd\103\ufebd\105\ufebd\106\ufebd\110\ufebd\111\ufebd\113" +
    "\ufebd\122\ufebd\001\002\000\030\063\ufebc\100\ufebc\101\ufebc" +
    "\102\ufebc\103\ufebc\105\ufebc\106\ufebc\110\ufebc\111\ufebc\113" +
    "\ufebc\122\ufebc\001\002\000\030\063\ufec1\100\ufec1\101\ufec1" +
    "\102\ufec1\103\ufec1\105\ufec1\106\ufec1\110\ufec1\111\ufec1\113" +
    "\ufec1\122\ufec1\001\002\000\030\006\064\007\071\014\047" +
    "\015\050\016\056\044\074\077\046\105\162\107\065\120" +
    "\122\121\124\001\002\000\030\006\064\007\071\014\047" +
    "\015\050\016\056\044\074\077\046\105\051\107\065\120" +
    "\055\121\063\001\002\000\004\106\172\001\002\000\004" +
    "\106\ufeba\001\002\000\004\104\167\001\002\000\004\106" +
    "\ufebb\001\002\000\006\120\122\121\124\001\002\000\004" +
    "\106\ufeb8\001\002\000\004\106\ufeb7\001\002\000\030\063" +
    "\ufebe\100\ufebe\101\ufebe\102\ufebe\103\ufebe\105\ufebe\106\ufebe" +
    "\110\ufebe\111\ufebe\113\ufebe\122\ufebe\001\002\000\004\106" +
    "\174\001\002\000\004\106\ufeb9\001\002\000\126\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\100" +
    "\ufff9\101\ufff9\102\ufff9\103\ufff9\106\ufff9\107\ufff9\110\ufff9" +
    "\111\ufff9\123\ufff9\001\002\000\030\006\064\007\071\014" +
    "\047\015\050\016\056\044\074\077\046\107\065\120\055" +
    "\121\063\122\176\001\002\000\126\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8" +
    "\102\ufff8\103\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\123" +
    "\ufff8\001\002\000\126\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103" +
    "\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\123\uffb5\001\002" +
    "\000\056\006\ufff4\007\ufff4\014\ufff4\015\ufff4\016\ufff4\035" +
    "\ufff4\036\ufff4\040\ufff4\044\ufff4\045\ufff4\052\ufff4\077\ufff4" +
    "\105\ufff4\107\ufff4\113\ufff4\114\ufff4\115\ufff4\116\ufff4\117" +
    "\ufff4\120\ufff4\121\ufff4\122\ufff4\001\002\000\130\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100" +
    "\uffb4\101\uffb4\102\uffb4\103\uffb4\105\uff8a\106\uffb4\107\uffb4" +
    "\110\uffb4\111\uffb4\123\uffb4\001\002\000\006\105\uff89\122" +
    "\uff89\001\002\000\126\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103" +
    "\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\123\ufffa\001\002" +
    "\000\056\006\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6\035" +
    "\ufff6\036\ufff6\040\ufff6\044\ufff6\045\ufff6\052\ufff6\077\ufff6" +
    "\105\ufff6\107\ufff6\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117" +
    "\ufff6\120\ufff6\121\ufff6\122\ufff6\001\002\000\056\006\224" +
    "\007\071\014\047\015\050\016\056\035\213\036\210\040" +
    "\205\044\221\045\201\052\207\077\225\105\216\107\065" +
    "\113\177\114\204\115\230\116\175\117\227\120\055\121" +
    "\063\122\176\001\002\000\056\006\ufff5\007\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\035\ufff5\036\ufff5\040\ufff5\044\ufff5\045" +
    "\ufff5\052\ufff5\077\ufff5\105\ufff5\107\ufff5\113\ufff5\114\ufff5" +
    "\115\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122\ufff5\001" +
    "\002\000\056\006\ufff2\007\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\035\ufff2\036\ufff2\040\ufff2\044\ufff2\045\ufff2\052\ufff2\077" +
    "\ufff2\105\ufff2\107\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2" +
    "\117\ufff2\120\ufff2\121\ufff2\122\ufff2\001\002\000\126\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2" +
    "\100\uffb2\101\uffb2\102\uffb2\103\uffb2\106\uffb2\107\uffb2\110" +
    "\uffb2\111\uffb2\123\uffb2\001\002\000\004\110\u0199\001\002" +
    "\000\056\006\ufff7\007\ufff7\014\ufff7\015\ufff7\016\ufff7\035" +
    "\ufff7\036\ufff7\040\ufff7\044\ufff7\045\ufff7\052\ufff7\077\ufff7" +
    "\105\ufff7\107\ufff7\113\ufff7\114\ufff7\115\ufff7\116\ufff7\117" +
    "\ufff7\120\ufff7\121\ufff7\122\ufff7\001\002\000\126\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\103\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\111\uffb1\123\uffb1\001\002\000\122\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab\055" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab" +
    "\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\103\uffab\106\uffab\110\uffab\111\uffab\001\002\000" +
    "\056\006\224\007\071\014\047\015\050\016\056\035\213" +
    "\036\210\040\205\044\221\045\201\052\207\077\225\105" +
    "\216\107\065\113\177\114\204\115\230\116\175\117\227" +
    "\120\055\121\063\122\176\001\002\000\126\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\106\uffb0\107\u0130\110\uffb0\111" +
    "\uffb0\123\u0194\001\002\000\004\105\u018e\001\002\000\056" +
    "\006\ufff3\007\ufff3\014\ufff3\015\ufff3\016\ufff3\035\ufff3\036" +
    "\ufff3\040\ufff3\044\ufff3\045\ufff3\052\ufff3\077\046\105\ufff3" +
    "\107\ufff3\113\ufff3\114\ufff3\115\ufff3\116\ufff3\117\ufff3\120" +
    "\ufff3\121\ufff3\122\ufff3\001\002\000\030\006\064\007\071" +
    "\014\047\015\050\016\056\044\074\077\046\105\051\107" +
    "\065\120\055\121\063\001\002\000\126\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\054\uffad" +
    "\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101" +
    "\uffad\102\uffad\103\uffad\106\uffad\107\uffad\110\uffad\111\uffad" +
    "\123\uffad\001\002\000\004\105\115\001\002\000\056\006" +
    "\ufff1\007\ufff1\014\ufff1\015\ufff1\016\ufff1\035\ufff1\036\ufff1" +
    "\040\ufff1\044\ufff1\045\ufff1\052\ufff1\077\ufff1\105\ufff1\107" +
    "\ufff1\113\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1" +
    "\121\ufff1\122\ufff1\001\002\000\052\035\235\036\254\037" +
    "\233\040\252\041\236\042\234\043\240\044\260\045\256" +
    "\046\243\047\246\050\250\051\232\067\244\070\237\071" +
    "\251\072\242\073\247\076\245\110\ufec7\001\002\000\126" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\106\ufffb\107\ufffb" +
    "\110\ufffb\111\ufffb\123\ufffb\001\002\000\126\035\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc" +
    "\101\ufffc\102\ufffc\103\ufffc\106\ufffc\107\ufffc\110\ufffc\111" +
    "\ufffc\123\ufffc\001\002\000\126\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\053\uffae\054\uffae\055\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\106\uffae\107\uffae\110\uffae\111\uffae\123\uffae" +
    "\001\002\000\056\006\uffee\007\uffee\014\uffee\015\uffee\016" +
    "\uffee\035\uffee\036\uffee\040\uffee\044\uffee\045\uffee\052\uffee" +
    "\077\uffee\105\uffee\107\uffee\113\uffee\114\uffee\115\uffee\116" +
    "\uffee\117\uffee\120\uffee\121\uffee\122\uffee\001\002\000\056" +
    "\006\uffde\007\uffde\014\uffde\015\uffde\016\uffde\035\uffde\036" +
    "\uffde\040\uffde\044\uffde\045\uffde\052\uffde\077\uffde\105\uffde" +
    "\107\uffde\113\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120" +
    "\uffde\121\uffde\122\uffde\001\002\000\056\006\uffe3\007\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\035\uffe3\036\uffe3\040\uffe3\044" +
    "\uffe3\045\uffe3\052\uffe3\077\uffe3\105\uffe3\107\uffe3\113\uffe3" +
    "\114\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3\122" +
    "\uffe3\001\002\000\056\006\uffe9\007\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\035\uffe9\036\uffe9\040\uffe9\044\uffe9\045\uffe9\052" +
    "\uffe9\077\uffe9\105\uffe9\107\uffe9\113\uffe9\114\uffe9\115\uffe9" +
    "\116\uffe9\117\uffe9\120\uffe9\121\uffe9\122\uffe9\001\002\000" +
    "\056\006\uffe7\007\uffe7\014\uffe7\015\uffe7\016\uffe7\035\uffe7" +
    "\036\uffe7\040\uffe7\044\uffe7\045\uffe7\052\uffe7\077\uffe7\105" +
    "\uffe7\107\uffe7\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7" +
    "\120\uffe7\121\uffe7\122\uffe7\001\002\000\056\006\uffe4\007" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\044\uffe4\045\uffe4\052\uffe4\077\uffe4\105\uffe4\107\uffe4\113" +
    "\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4" +
    "\122\uffe4\001\002\000\056\006\uffe2\007\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\035\uffe2\036\uffe2\040\uffe2\044\uffe2\045\uffe2" +
    "\052\uffe2\077\uffe2\105\uffe2\107\uffe2\113\uffe2\114\uffe2\115" +
    "\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2\001\002" +
    "\000\056\006\uffdb\007\uffdb\014\uffdb\015\uffdb\016\uffdb\035" +
    "\uffdb\036\uffdb\040\uffdb\044\uffdb\045\uffdb\052\uffdb\077\uffdb" +
    "\105\uffdb\107\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117" +
    "\uffdb\120\uffdb\121\uffdb\122\uffdb\001\002\000\056\006\uffed" +
    "\007\uffed\014\uffed\015\uffed\016\uffed\035\uffed\036\uffed\040" +
    "\uffed\044\uffed\045\uffed\052\uffed\077\uffed\105\uffed\107\uffed" +
    "\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\120\uffed\121" +
    "\uffed\122\uffed\001\002\000\056\006\uffe1\007\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\035\uffe1\036\uffe1\040\uffe1\044\uffe1\045" +
    "\uffe1\052\uffe1\077\uffe1\105\uffe1\107\uffe1\113\uffe1\114\uffe1" +
    "\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\001" +
    "\002\000\056\006\uffe5\007\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\044\uffe5\045\uffe5\052\uffe5\077" +
    "\uffe5\105\uffe5\107\uffe5\113\uffe5\114\uffe5\115\uffe5\116\uffe5" +
    "\117\uffe5\120\uffe5\121\uffe5\122\uffe5\001\002\000\056\006" +
    "\uffea\007\uffea\014\uffea\015\uffea\016\uffea\035\uffea\036\uffea" +
    "\040\uffea\044\uffea\045\uffea\052\uffea\077\uffea\105\uffea\107" +
    "\uffea\113\uffea\114\uffea\115\uffea\116\uffea\117\uffea\120\uffea" +
    "\121\uffea\122\uffea\001\002\000\056\006\uffe0\007\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\035\uffe0\036\uffe0\040\uffe0\044\uffe0" +
    "\045\uffe0\052\uffe0\077\uffe0\105\uffe0\107\uffe0\113\uffe0\114" +
    "\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0" +
    "\001\002\000\056\006\uffec\007\uffec\014\uffec\015\uffec\016" +
    "\uffec\035\uffec\036\uffec\040\uffec\044\uffec\045\uffec\052\uffec" +
    "\077\uffec\105\uffec\107\uffec\113\uffec\114\uffec\115\uffec\116" +
    "\uffec\117\uffec\120\uffec\121\uffec\122\uffec\001\002\000\056" +
    "\006\uffef\007\uffef\014\uffef\015\uffef\016\uffef\035\uffef\036" +
    "\uffef\040\uffef\044\uffef\045\uffef\052\uffef\077\uffef\105\uffef" +
    "\107\uffef\113\uffef\114\uffef\115\uffef\116\uffef\117\uffef\120" +
    "\uffef\121\uffef\122\uffef\001\002\000\056\006\uffdf\007\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\035\uffdf\036\uffdf\040\uffdf\044" +
    "\uffdf\045\uffdf\052\uffdf\077\uffdf\105\uffdf\107\uffdf\113\uffdf" +
    "\114\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122" +
    "\uffdf\001\002\000\056\006\uffe8\007\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\035\uffe8\036\uffe8\040\uffe8\044\uffe8\045\uffe8\052" +
    "\uffe8\077\uffe8\105\uffe8\107\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\001\002\000" +
    "\056\006\224\007\071\014\047\015\050\016\056\035\213" +
    "\036\210\040\205\044\221\045\201\052\207\077\225\105" +
    "\216\107\065\113\177\114\204\115\230\116\175\117\227" +
    "\120\055\121\063\122\176\001\002\000\056\006\uffeb\007" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\035\uffeb\036\uffeb\040\uffeb" +
    "\044\uffeb\045\uffeb\052\uffeb\077\uffeb\105\uffeb\107\uffeb\113" +
    "\uffeb\114\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb" +
    "\122\uffeb\001\002\000\056\006\uffdc\007\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\035\uffdc\036\uffdc\040\uffdc\044\uffdc\045\uffdc" +
    "\052\uffdc\077\uffdc\105\uffdc\107\uffdc\113\uffdc\114\uffdc\115" +
    "\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc\122\uffdc\001\002" +
    "\000\056\006\uffe6\007\uffe6\014\uffe6\015\uffe6\016\uffe6\035" +
    "\uffe6\036\uffe6\040\uffe6\044\uffe6\045\uffe6\052\uffe6\077\uffe6" +
    "\105\uffe6\107\uffe6\113\uffe6\114\uffe6\115\uffe6\116\uffe6\117" +
    "\uffe6\120\uffe6\121\uffe6\122\uffe6\001\002\000\056\006\uffdd" +
    "\007\uffdd\014\uffdd\015\uffdd\016\uffdd\035\uffdd\036\uffdd\040" +
    "\uffdd\044\uffdd\045\uffdd\052\uffdd\077\uffdd\105\uffdd\107\uffdd" +
    "\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121" +
    "\uffdd\122\uffdd\001\002\000\056\006\ufff0\007\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\035\ufff0\036\ufff0\040\ufff0\044\ufff0\045" +
    "\ufff0\052\ufff0\077\ufff0\105\ufff0\107\ufff0\113\ufff0\114\ufff0" +
    "\115\ufff0\116\ufff0\117\ufff0\120\ufff0\121\ufff0\122\ufff0\001" +
    "\002\000\122\035\235\036\254\037\233\040\252\041\236" +
    "\042\234\043\240\044\260\045\256\046\243\047\246\050" +
    "\250\051\232\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\244\070\237\071\251\072\242\073\247\074\uffaa\075\uffaa" +
    "\076\245\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\106" +
    "\uffaa\110\uffaa\111\uffaa\001\002\000\030\006\ufe93\007\ufe93" +
    "\014\ufe93\015\ufe93\016\ufe93\044\ufe93\077\ufe93\105\ufe93\107" +
    "\ufe93\120\ufe93\121\ufe93\001\002\000\014\100\ufec2\102\ufec2" +
    "\105\ufec2\106\ufec2\111\265\001\002\000\126\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\106\uffc5\107\uffc5\110\uffc5\111" +
    "\uffc5\123\uffc5\001\002\000\120\004\316\006\224\007\071" +
    "\010\305\012\273\013\271\014\047\015\050\016\056\020" +
    "\302\022\312\023\030\024\307\025\324\027\023\030\323" +
    "\031\313\033\315\034\022\035\213\036\210\040\205\044" +
    "\221\045\201\052\207\077\225\101\uff47\105\216\107\065" +
    "\111\265\112\uff32\113\177\114\204\115\230\116\175\117" +
    "\227\120\267\121\063\122\317\001\002\000\004\101\uff73" +
    "\001\002\000\120\035\ufed0\036\ufed0\037\ufed0\040\ufed0\041" +
    "\ufed0\042\ufed0\043\ufed0\044\ufed0\045\ufed0\046\ufed0\047\ufed0" +
    "\050\ufed0\051\ufed0\053\ufed0\054\ufed0\055\ufed0\057\ufed0\060" +
    "\ufed0\061\ufed0\062\ufed0\063\ufed0\065\ufed0\066\ufed0\067\ufed0" +
    "\070\ufed0\071\ufed0\072\ufed0\073\ufed0\074\ufed0\075\ufed0\076" +
    "\ufed0\077\ufed0\100\ufed0\101\ufed0\103\u018b\104\u0102\105\ufed0" +
    "\107\ufed0\123\ufed0\001\002\000\004\101\u0189\001\002\000" +
    "\056\006\224\007\071\014\047\015\050\016\056\035\213" +
    "\036\210\040\205\044\221\045\201\052\207\077\225\105" +
    "\216\107\065\113\177\114\204\115\230\116\175\117\227" +
    "\120\055\121\063\122\176\001\002\000\004\101\uff69\001" +
    "\002\000\056\006\224\007\071\014\047\015\050\016\056" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\176\001\002\000\004\101" +
    "\uff74\001\002\000\004\101\uff6f\001\002\000\004\101\uff71" +
    "\001\002\000\004\101\uff70\001\002\000\004\101\uff6c\001" +
    "\002\000\004\101\uff68\001\002\000\010\101\ufef9\120\122" +
    "\121\124\001\002\000\004\101\uff6b\001\002\000\004\101" +
    "\uff6a\001\002\000\004\111\u0172\001\002\000\004\101\uff75" +
    "\001\002\000\004\101\ufef8\001\002\000\004\101\uff72\001" +
    "\002\000\026\053\u011a\054\u011c\055\u011b\057\u0117\060\u0116" +
    "\061\u011e\062\u0122\063\u0171\065\u0118\066\u0119\001\002\000" +
    "\062\006\224\007\071\014\047\015\050\016\056\035\213" +
    "\036\210\040\205\044\221\045\201\052\207\077\225\101" +
    "\uff47\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\317\123\u0125\001\002\000" +
    "\064\006\224\007\071\014\047\015\050\016\056\026\uff25" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\101\uff47\105\216\107\065\111\uff2c\113\177\114\204" +
    "\115\230\116\175\117\227\120\055\121\063\122\317\001" +
    "\002\000\004\101\uff67\001\002\000\060\006\224\007\071" +
    "\014\047\015\050\016\056\035\213\036\210\040\205\044" +
    "\221\045\201\052\207\077\225\101\ufef3\105\216\107\065" +
    "\113\177\114\204\115\230\116\175\117\227\120\055\121" +
    "\063\122\176\001\002\000\010\101\ufef9\120\122\121\124" +
    "\001\002\000\030\006\064\007\071\014\047\015\050\016" +
    "\056\044\074\077\046\107\065\120\362\121\366\122\176" +
    "\001\002\000\004\112\361\001\002\000\004\101\uff6e\001" +
    "\002\000\006\101\uff49\111\uff49\001\002\000\010\101\ufef9" +
    "\120\122\121\124\001\002\000\060\006\uff0a\007\uff0a\014" +
    "\uff0a\015\uff0a\016\uff0a\035\uff0a\036\uff0a\040\uff0a\044\uff0a" +
    "\045\uff0a\052\uff0a\077\uff0a\105\uff0a\107\uff0a\113\uff0a\114" +
    "\uff0a\115\uff0a\116\uff0a\117\uff0a\120\uff0a\121\uff0a\122\uff0a" +
    "\123\344\001\002\000\110\035\331\036\254\037\233\040" +
    "\335\041\236\042\234\043\240\044\260\045\256\046\243" +
    "\047\246\050\250\051\232\053\uff8d\054\uff8d\055\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\065\uff8d\066\uff8d" +
    "\067\244\070\237\071\251\072\242\073\247\074\334\075" +
    "\330\076\245\077\327\100\333\101\uff41\111\uff41\001\002" +
    "\000\004\101\uff6d\001\002\000\056\006\224\007\071\014" +
    "\047\015\050\016\056\035\213\036\210\040\205\044\221" +
    "\045\201\052\207\077\225\105\216\107\065\113\177\114" +
    "\204\115\230\116\175\117\227\120\055\121\063\122\176" +
    "\001\002\000\006\101\uff44\111\uff44\001\002\000\056\006" +
    "\uffe9\007\uffe9\014\uffe9\015\uffe9\016\uffe9\035\uffe9\036\uffe9" +
    "\040\uffe9\044\uffe9\045\uffe9\052\uffe9\077\uffe9\105\uffe9\107" +
    "\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9" +
    "\121\uffe9\122\uffe9\001\002\000\006\101\uff4a\111\uff4a\001" +
    "\002\000\056\006\224\007\071\014\047\015\050\016\056" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\176\001\002\000\006\101" +
    "\uff45\111\uff45\001\002\000\056\006\uffe8\007\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\035\uffe8\036\uffe8\040\uffe8\044\uffe8\045" +
    "\uffe8\052\uffe8\077\uffe8\105\uffe8\107\uffe8\113\uffe8\114\uffe8" +
    "\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\001" +
    "\002\000\042\053\uff8f\054\uff8f\055\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\106\uff8f\111\uff8f\001\002\000\006" +
    "\101\uff42\111\uff42\001\002\000\112\035\235\036\254\037" +
    "\233\040\252\041\236\042\234\043\240\044\260\045\256" +
    "\046\243\047\246\050\250\051\232\053\uff8d\054\uff8d\055" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\244\070\237\071\251\072\242\073" +
    "\247\076\245\100\333\101\uff8d\102\uff8d\103\uff8d\106\uff8d" +
    "\111\uff8d\001\002\000\042\053\uff8e\054\uff8e\055\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e" +
    "\066\uff8e\101\uff8e\102\uff8e\103\uff8e\106\uff8e\111\uff8e\001" +
    "\002\000\006\101\uff43\111\uff43\001\002\000\054\035\235" +
    "\036\254\037\233\040\252\041\236\042\234\043\240\044" +
    "\260\045\256\046\243\047\246\050\250\051\232\067\244" +
    "\070\237\071\251\072\242\073\247\076\245\101\uff46\111" +
    "\uff46\001\002\000\060\006\224\007\071\014\047\015\050" +
    "\016\056\035\213\036\210\040\205\044\221\045\201\052" +
    "\207\077\225\101\uff47\105\216\107\065\113\177\114\204" +
    "\115\230\116\175\117\227\120\055\121\063\122\317\001" +
    "\002\000\056\006\224\007\071\014\047\015\050\016\056" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\176\001\002\000\052\035" +
    "\235\036\254\037\233\040\252\041\236\042\234\043\240" +
    "\044\260\045\256\046\243\047\246\050\250\051\232\067" +
    "\244\070\237\071\251\072\242\073\247\076\245\111\265" +
    "\001\002\000\006\017\350\101\uff08\001\002\000\006\025" +
    "\324\111\265\001\002\000\004\101\uff0c\001\002\000\004" +
    "\101\uff06\001\002\000\004\101\uff09\001\002\000\004\101" +
    "\uff07\001\002\000\004\101\356\001\002\000\056\006\uff0b" +
    "\007\uff0b\014\uff0b\015\uff0b\016\uff0b\035\uff0b\036\uff0b\040" +
    "\uff0b\044\uff0b\045\uff0b\052\uff0b\077\uff0b\105\uff0b\107\uff0b" +
    "\113\uff0b\114\uff0b\115\uff0b\116\uff0b\117\uff0b\120\uff0b\121" +
    "\uff0b\122\uff0b\001\002\000\004\101\ufef6\001\002\000\004" +
    "\101\ufefa\001\002\000\130\017\uff31\035\uff31\036\uff31\037" +
    "\uff31\040\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045\uff31" +
    "\046\uff31\047\uff31\050\uff31\051\uff31\053\uff31\054\uff31\055" +
    "\uff31\057\uff31\060\uff31\061\uff31\062\uff31\063\uff31\064\uff31" +
    "\065\uff31\066\uff31\067\uff31\070\uff31\071\uff31\072\uff31\073" +
    "\uff31\074\uff31\075\uff31\076\uff31\077\uff31\100\uff31\101\uff31" +
    "\102\uff31\103\uff31\106\uff31\107\uff31\110\uff31\111\uff31\123" +
    "\uff31\001\002\000\070\035\ufed0\036\ufed0\037\ufed0\040\ufed0" +
    "\041\ufed0\042\ufed0\043\ufed0\044\ufed0\045\ufed0\046\ufed0\047" +
    "\ufed0\050\ufed0\051\ufed0\064\000\067\ufed0\070\ufed0\071\ufed0" +
    "\072\ufed0\073\ufed0\076\ufed0\100\000\104\u0102\105\ufed0\107" +
    "\ufed0\111\ufed0\122\ufed0\123\ufed0\001\002\000\004\122\uff8a" +
    "\001\002\000\004\122\u0100\001\002\000\006\064\ufed9\100" +
    "\374\001\002\000\066\035\ufed2\036\ufed2\037\ufed2\040\ufed2" +
    "\041\ufed2\042\ufed2\043\ufed2\044\ufed2\045\ufed2\046\ufed2\047" +
    "\ufed2\050\ufed2\051\ufed2\064\uffff\067\ufed2\070\ufed2\071\ufed2" +
    "\072\ufed2\073\ufed2\076\ufed2\100\uffff\105\ufed2\107\ufed2\111" +
    "\ufed2\122\ufed2\123\ufed2\001\002\000\006\101\uff48\111\uff48" +
    "\001\002\000\004\064\371\001\002\000\056\006\224\007" +
    "\071\014\047\015\050\016\056\035\213\036\210\040\205" +
    "\044\221\045\201\052\207\077\225\105\216\107\065\113" +
    "\177\114\204\115\230\116\175\117\227\120\055\121\063" +
    "\122\176\001\002\000\006\101\uff34\111\uff34\001\002\000" +
    "\064\035\235\036\254\037\233\040\252\041\236\042\234" +
    "\043\240\044\260\045\256\046\243\047\246\050\250\051" +
    "\232\067\244\070\237\071\251\072\242\073\247\076\245" +
    "\100\333\101\uff8d\102\uff8d\103\uff8d\106\uff8d\111\uff8d\001" +
    "\002\000\006\120\122\121\124\001\002\000\004\064\ufedb" +
    "\001\002\000\034\006\ufed9\007\ufed9\014\ufed9\015\ufed9\016" +
    "\ufed9\044\ufed9\064\ufed9\077\ufed9\100\374\105\ufed9\107\ufed9" +
    "\120\ufed9\121\ufed9\001\002\000\032\006\ufeda\007\ufeda\014" +
    "\ufeda\015\ufeda\016\ufeda\044\ufeda\064\ufeda\077\ufeda\105\ufeda" +
    "\107\ufeda\120\ufeda\121\ufeda\001\002\000\006\105\uff88\122" +
    "\uff88\001\002\000\134\035\ufed3\036\ufed3\037\ufed3\040\ufed3" +
    "\041\ufed3\042\ufed3\043\ufed3\044\ufed3\045\ufed3\046\ufed3\047" +
    "\ufed3\050\ufed3\051\ufed3\053\ufed3\054\ufed3\055\ufed3\057\ufed3" +
    "\060\ufed3\061\ufed3\062\ufed3\063\ufed3\064\ufed3\065\ufed3\066" +
    "\ufed3\067\ufed3\070\ufed3\071\ufed3\072\ufed3\073\ufed3\074\ufed3" +
    "\075\ufed3\076\ufed3\077\ufed3\100\ufed3\101\ufed3\102\ufed3\103" +
    "\ufed3\105\ufed3\106\ufed3\107\ufed3\110\ufed3\111\ufed3\113\ufed3" +
    "\122\ufed3\123\ufed3\001\002\000\004\120\u0103\001\002\000" +
    "\134\035\ufed1\036\ufed1\037\ufed1\040\ufed1\041\ufed1\042\ufed1" +
    "\043\ufed1\044\ufed1\045\ufed1\046\ufed1\047\ufed1\050\ufed1\051" +
    "\ufed1\053\ufed1\054\ufed1\055\ufed1\057\ufed1\060\ufed1\061\ufed1" +
    "\062\ufed1\063\ufed1\064\ufed1\065\ufed1\066\ufed1\067\ufed1\070" +
    "\ufed1\071\ufed1\072\ufed1\073\ufed1\074\ufed1\075\ufed1\076\ufed1" +
    "\077\ufed1\100\ufed1\101\ufed1\102\ufed1\103\ufed1\105\ufed1\106" +
    "\ufed1\107\ufed1\110\ufed1\111\ufed1\113\ufed1\122\ufed1\123\ufed1" +
    "\001\002\000\004\101\ufef5\001\002\000\004\101\ufef4\001" +
    "\002\000\004\101\ufef2\001\002\000\030\053\u011a\054\u011c" +
    "\055\u011b\057\u0117\060\u0116\061\u011e\062\u0122\063\u011f\064" +
    "\u0120\065\u0118\066\u0119\001\002\000\004\111\uff2e\001\002" +
    "\000\004\111\265\001\002\000\004\026\u0113\001\002\000" +
    "\004\101\u010e\001\002\000\004\111\uff2d\001\002\000\112" +
    "\035\331\036\254\037\233\040\335\041\236\042\234\043" +
    "\240\044\260\045\256\046\243\047\246\050\250\051\232" +
    "\053\uff8d\054\uff8d\055\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\244\070\237" +
    "\071\251\072\242\073\247\074\334\075\330\076\245\077" +
    "\327\100\333\101\uff41\111\uff2f\001\002\000\060\006\224" +
    "\007\071\014\047\015\050\016\056\035\213\036\210\040" +
    "\205\044\221\045\201\052\207\077\225\101\uff93\105\216" +
    "\107\065\113\177\114\204\115\230\116\175\117\227\120" +
    "\055\121\063\122\176\001\002\000\004\101\u0111\001\002" +
    "\000\056\035\235\036\254\037\233\040\252\041\236\042" +
    "\234\043\240\044\260\045\256\046\243\047\246\050\250" +
    "\051\232\067\244\070\237\071\251\072\242\073\247\076" +
    "\245\101\uff94\110\uff94\111\uff94\001\002\000\060\006\224" +
    "\007\071\014\047\015\050\016\056\035\213\036\210\040" +
    "\205\044\221\045\201\052\207\077\225\105\216\107\065" +
    "\111\uff47\113\177\114\204\115\230\116\175\117\227\120" +
    "\055\121\063\122\317\001\002\000\004\111\uff2b\001\002" +
    "\000\056\006\224\007\071\014\047\015\050\016\056\035" +
    "\213\036\210\040\205\044\221\045\201\052\207\077\225" +
    "\105\216\107\065\113\177\114\204\115\230\116\175\117" +
    "\227\120\055\121\063\122\176\001\002\000\052\035\235" +
    "\036\254\037\233\040\252\041\236\042\234\043\240\044" +
    "\260\045\256\046\243\047\246\050\250\051\232\067\244" +
    "\070\237\071\251\072\242\073\247\076\245\111\uff22\001" +
    "\002\000\004\101\uff30\001\002\000\056\006\uff3c\007\uff3c" +
    "\014\uff3c\015\uff3c\016\uff3c\035\uff3c\036\uff3c\040\uff3c\044" +
    "\uff3c\045\uff3c\052\uff3c\077\uff3c\105\uff3c\107\uff3c\113\uff3c" +
    "\114\uff3c\115\uff3c\116\uff3c\117\uff3c\120\uff3c\121\uff3c\122" +
    "\uff3c\001\002\000\056\006\uff3e\007\uff3e\014\uff3e\015\uff3e" +
    "\016\uff3e\035\uff3e\036\uff3e\040\uff3e\044\uff3e\045\uff3e\052" +
    "\uff3e\077\uff3e\105\uff3e\107\uff3e\113\uff3e\114\uff3e\115\uff3e" +
    "\116\uff3e\117\uff3e\120\uff3e\121\uff3e\122\uff3e\001\002\000" +
    "\056\006\uff39\007\uff39\014\uff39\015\uff39\016\uff39\035\uff39" +
    "\036\uff39\040\uff39\044\uff39\045\uff39\052\uff39\077\uff39\105" +
    "\uff39\107\uff39\113\uff39\114\uff39\115\uff39\116\uff39\117\uff39" +
    "\120\uff39\121\uff39\122\uff39\001\002\000\056\006\uff38\007" +
    "\uff38\014\uff38\015\uff38\016\uff38\035\uff38\036\uff38\040\uff38" +
    "\044\uff38\045\uff38\052\uff38\077\uff38\105\uff38\107\uff38\113" +
    "\uff38\114\uff38\115\uff38\116\uff38\117\uff38\120\uff38\121\uff38" +
    "\122\uff38\001\002\000\056\006\uff3d\007\uff3d\014\uff3d\015" +
    "\uff3d\016\uff3d\035\uff3d\036\uff3d\040\uff3d\044\uff3d\045\uff3d" +
    "\052\uff3d\077\uff3d\105\uff3d\107\uff3d\113\uff3d\114\uff3d\115" +
    "\uff3d\116\uff3d\117\uff3d\120\uff3d\121\uff3d\122\uff3d\001\002" +
    "\000\056\006\uff37\007\uff37\014\uff37\015\uff37\016\uff37\035" +
    "\uff37\036\uff37\040\uff37\044\uff37\045\uff37\052\uff37\077\uff37" +
    "\105\uff37\107\uff37\113\uff37\114\uff37\115\uff37\116\uff37\117" +
    "\uff37\120\uff37\121\uff37\122\uff37\001\002\000\056\006\uff36" +
    "\007\uff36\014\uff36\015\uff36\016\uff36\035\uff36\036\uff36\040" +
    "\uff36\044\uff36\045\uff36\052\uff36\077\uff36\105\uff36\107\uff36" +
    "\113\uff36\114\uff36\115\uff36\116\uff36\117\uff36\120\uff36\121" +
    "\uff36\122\uff36\001\002\000\056\006\uff40\007\uff40\014\uff40" +
    "\015\uff40\016\uff40\035\uff40\036\uff40\040\uff40\044\uff40\045" +
    "\uff40\052\uff40\077\uff40\105\uff40\107\uff40\113\uff40\114\uff40" +
    "\115\uff40\116\uff40\117\uff40\120\uff40\121\uff40\122\uff40\001" +
    "\002\000\056\006\uff3b\007\uff3b\014\uff3b\015\uff3b\016\uff3b" +
    "\035\uff3b\036\uff3b\040\uff3b\044\uff3b\045\uff3b\052\uff3b\077" +
    "\uff3b\105\uff3b\107\uff3b\113\uff3b\114\uff3b\115\uff3b\116\uff3b" +
    "\117\uff3b\120\uff3b\121\uff3b\122\uff3b\001\002\000\060\006" +
    "\uff35\007\uff35\014\uff35\015\uff35\016\uff35\026\uff24\035\uff35" +
    "\036\uff35\040\uff35\044\uff35\045\uff35\052\uff35\077\uff35\105" +
    "\uff35\107\uff35\113\uff35\114\uff35\115\uff35\116\uff35\117\uff35" +
    "\120\uff35\121\uff35\122\uff35\001\002\000\004\026\uff23\001" +
    "\002\000\004\026\uff26\001\002\000\056\006\uff3a\007\uff3a" +
    "\014\uff3a\015\uff3a\016\uff3a\035\uff3a\036\uff3a\040\uff3a\044" +
    "\uff3a\045\uff3a\052\uff3a\077\uff3a\105\uff3a\107\uff3a\113\uff3a" +
    "\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\121\uff3a\122" +
    "\uff3a\001\002\000\056\006\224\007\071\014\047\015\050" +
    "\016\056\035\213\036\210\040\205\044\221\045\201\052" +
    "\207\077\225\105\216\107\065\113\177\114\204\115\230" +
    "\116\175\117\227\120\055\121\063\122\176\001\002\000" +
    "\006\101\uff3f\111\uff3f\001\002\000\062\006\uff1e\007\uff1e" +
    "\014\uff1e\015\uff1e\016\uff1e\035\uff1e\036\uff1e\040\uff1e\044" +
    "\uff1e\045\uff1e\052\uff1e\077\uff1e\105\uff1e\107\uff1e\111\uff1e" +
    "\113\uff1e\114\uff1e\115\uff1e\116\uff1e\117\uff1e\120\uff1e\121" +
    "\uff1e\122\uff1e\123\uff1e\001\002\000\004\101\uff21\001\002" +
    "\000\004\101\u0170\001\002\000\062\006\224\007\071\014" +
    "\047\015\050\016\056\035\213\036\210\040\205\044\221" +
    "\045\201\052\207\077\225\105\216\107\065\111\uff93\113" +
    "\177\114\204\115\230\116\175\117\227\120\362\121\366" +
    "\122\176\123\u0129\001\002\000\044\006\uff17\007\uff17\014" +
    "\uff17\015\uff17\016\uff17\044\uff17\077\uff17\105\uff17\107\uff17" +
    "\113\uff17\114\uff17\115\uff17\116\uff17\117\uff17\120\uff17\121" +
    "\uff17\122\uff17\001\002\000\004\111\u0166\001\002\000\004" +
    "\111\u0157\001\002\000\004\064\u0156\001\002\000\044\006" +
    "\224\007\071\014\047\015\050\016\056\044\074\077\046" +
    "\105\216\107\065\113\177\114\204\115\230\116\175\117" +
    "\227\120\055\121\063\122\176\001\002\000\004\101\uff20" +
    "\001\002\000\006\107\u0130\123\u0131\001\002\000\060\006" +
    "\224\007\071\014\047\015\050\016\056\035\213\036\210" +
    "\040\205\044\221\045\201\052\207\077\225\103\u0148\105" +
    "\216\107\065\113\177\114\204\115\230\116\175\117\227" +
    "\120\055\121\063\122\176\001\002\000\006\104\u0136\105" +
    "\u0135\001\002\000\126\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\053\uffac\054\uffac\055\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103" +
    "\uffac\106\uffac\107\uffac\110\uffac\111\uffac\123\uffac\001\002" +
    "\000\126\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076" +
    "\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\123\uffa8\001\002\000\126\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9" +
    "\100\uffa9\101\uffa9\102\uffa9\103\uffa9\106\uffa9\107\uffa9\110" +
    "\uffa9\111\uffa9\123\uffa9\001\002\000\060\006\224\007\071" +
    "\014\047\015\050\016\056\035\213\036\210\040\205\044" +
    "\221\045\201\052\207\077\225\105\216\106\uffa4\107\065" +
    "\113\177\114\204\115\230\116\175\117\227\120\055\121" +
    "\063\122\176\001\002\000\004\105\u0137\001\002\000\032" +
    "\006\064\007\071\014\047\015\050\016\056\027\u0139\044" +
    "\074\077\046\105\051\107\065\120\055\121\063\001\002" +
    "\000\004\106\u013b\001\002\000\004\106\u013a\001\002\000" +
    "\004\111\uff19\001\002\000\126\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\123\uffa7" +
    "\001\002\000\012\100\u0144\102\uffa0\105\uff89\106\uffa0\001" +
    "\002\000\006\102\uffa3\106\uffa3\001\002\000\006\102\u0142" +
    "\106\uff95\001\002\000\004\106\u0140\001\002\000\126\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\101\uffa6\102\uffa6\103\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\111\uffa6\123\uffa6\001\002\000\004\106\uffa5\001\002" +
    "\000\006\100\u0143\106\uff97\001\002\000\004\106\uff96\001" +
    "\002\000\056\006\224\007\071\014\047\015\050\016\056" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\176\001\002\000\006\102" +
    "\uffa2\106\uffa2\001\002\000\006\102\uffa1\106\uffa1\001\002" +
    "\000\126\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\053\uff9e\054\uff9e\055\uff9e\057\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\106\uff9e" +
    "\107\uff9e\110\uff9e\111\uff9e\123\uff9e\001\002\000\060\006" +
    "\224\007\071\014\047\015\050\016\056\035\213\036\210" +
    "\040\205\044\221\045\201\052\207\077\225\105\216\107" +
    "\065\110\u014f\113\177\114\204\115\230\116\175\117\227" +
    "\120\055\121\063\122\176\001\002\000\054\035\235\036" +
    "\254\037\233\040\252\041\236\042\234\043\240\044\260" +
    "\045\256\046\243\047\246\050\250\051\232\067\244\070" +
    "\237\071\251\072\242\073\247\076\245\103\u014a\110\u014b" +
    "\001\002\000\060\006\224\007\071\014\047\015\050\016" +
    "\056\035\213\036\210\040\205\044\221\045\201\052\207" +
    "\077\225\105\216\107\065\110\uff93\113\177\114\204\115" +
    "\230\116\175\117\227\120\055\121\063\122\176\001\002" +
    "\000\126\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076" +
    "\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\106\uff9d" +
    "\107\uff9d\110\uff9d\111\uff9d\123\uff9d\001\002\000\126\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\103\uff9f\106\uff9f\107\uff9f\110" +
    "\uff9f\111\uff9f\123\uff9f\001\002\000\004\110\u014e\001\002" +
    "\000\126\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\053\uff9c\054\uff9c\055\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\106\uff9c" +
    "\107\uff9c\110\uff9c\111\uff9c\123\uff9c\001\002\000\126\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\100\uff9b\101\uff9b\102\uff9b\103\uff9b\106\uff9b\107\uff9b\110" +
    "\uff9b\111\uff9b\123\uff9b\001\002\000\054\035\235\036\254" +
    "\037\233\040\252\041\236\042\234\043\240\044\260\045" +
    "\256\046\243\047\246\050\250\051\232\067\244\070\237" +
    "\071\251\072\242\073\247\076\245\103\u0151\110\u0152\001" +
    "\002\000\056\006\224\007\071\014\047\015\050\016\056" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\176\001\002\000\126\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\053" +
    "\uff98\054\uff98\055\uff98\057\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98" +
    "\100\uff98\101\uff98\102\uff98\103\uff98\106\uff98\107\uff98\110" +
    "\uff98\111\uff98\123\uff98\001\002\000\126\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101" +
    "\uff9a\102\uff9a\103\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a" +
    "\123\uff9a\001\002\000\052\035\235\036\254\037\233\040" +
    "\252\041\236\042\234\043\240\044\260\045\256\046\243" +
    "\047\246\050\250\051\232\067\244\070\237\071\251\072" +
    "\242\073\247\076\245\110\u0155\001\002\000\126\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\053\uff99" +
    "\054\uff99\055\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100" +
    "\uff99\101\uff99\102\uff99\103\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\123\uff99\001\002\000\044\006\uff18\007\uff18\014" +
    "\uff18\015\uff18\016\uff18\044\uff18\077\uff18\105\uff18\107\uff18" +
    "\113\uff18\114\uff18\115\uff18\116\uff18\117\uff18\120\uff18\121" +
    "\uff18\122\uff18\001\002\000\010\005\u0158\011\u015a\112\uff15" +
    "\001\002\000\004\103\uff13\001\002\000\004\112\u0165\001" +
    "\002\000\030\006\064\007\071\014\047\015\050\016\056" +
    "\044\074\077\046\105\051\107\065\120\055\121\063\001" +
    "\002\000\004\103\u015c\001\002\000\124\004\316\005\uff32" +
    "\006\224\007\071\010\305\011\uff32\012\273\013\271\014" +
    "\047\015\050\016\056\020\302\022\312\023\030\024\307" +
    "\025\324\027\023\030\323\031\313\033\315\034\022\035" +
    "\213\036\210\040\205\044\221\045\201\052\207\077\225" +
    "\101\uff47\105\216\107\065\111\265\112\uff32\113\177\114" +
    "\204\115\230\116\175\117\227\120\267\121\063\122\317" +
    "\001\002\000\010\005\u0158\011\u015a\112\uff15\001\002\000" +
    "\004\112\uff16\001\002\000\004\103\uff14\001\002\000\006" +
    "\100\u0161\103\uff0e\001\002\000\030\006\064\007\071\014" +
    "\047\015\050\016\056\044\074\077\046\105\051\107\065" +
    "\120\055\121\063\001\002\000\004\103\uff10\001\002\000" +
    "\006\100\u0161\103\uff0e\001\002\000\004\103\uff0f\001\002" +
    "\000\004\101\uff1c\001\002\000\010\005\u0167\011\u016a\112" +
    "\uff1a\001\002\000\004\103\uff11\001\002\000\004\112\u016f" +
    "\001\002\000\004\103\u016c\001\002\000\056\006\224\007" +
    "\071\014\047\015\050\016\056\035\213\036\210\040\205" +
    "\044\221\045\201\052\207\077\225\105\216\107\065\113" +
    "\177\114\204\115\230\116\175\117\227\120\055\121\063" +
    "\122\176\001\002\000\004\103\uff12\001\002\000\124\004" +
    "\316\005\uff32\006\224\007\071\010\305\011\uff32\012\273" +
    "\013\271\014\047\015\050\016\056\020\302\022\312\023" +
    "\030\024\307\025\324\027\023\030\323\031\313\033\315" +
    "\034\022\035\213\036\210\040\205\044\221\045\201\052" +
    "\207\077\225\101\uff47\105\216\107\065\111\265\112\uff32" +
    "\113\177\114\204\115\230\116\175\117\227\120\267\121" +
    "\063\122\317\001\002\000\010\005\u0167\011\u016a\112\uff1a" +
    "\001\002\000\004\112\uff1b\001\002\000\004\101\uff1d\001" +
    "\002\000\062\006\uff1f\007\uff1f\014\uff1f\015\uff1f\016\uff1f" +
    "\035\uff1f\036\uff1f\040\uff1f\044\uff1f\045\uff1f\052\uff1f\077" +
    "\uff1f\105\uff1f\107\uff1f\111\uff1f\113\uff1f\114\uff1f\115\uff1f" +
    "\116\uff1f\117\uff1f\120\uff1f\121\uff1f\122\uff1f\123\uff1f\001" +
    "\002\000\056\006\uff35\007\uff35\014\uff35\015\uff35\016\uff35" +
    "\035\uff35\036\uff35\040\uff35\044\uff35\045\uff35\052\uff35\077" +
    "\uff35\105\uff35\107\uff35\113\uff35\114\uff35\115\uff35\116\uff35" +
    "\117\uff35\120\uff35\121\uff35\122\uff35\001\002\000\010\005" +
    "\u0174\011\u0175\112\uff03\001\002\000\004\103\u0183\001\002" +
    "\000\004\103\uff01\001\002\000\056\006\224\007\071\014" +
    "\047\015\050\016\056\035\213\036\210\040\205\044\221" +
    "\045\201\052\207\077\225\105\216\107\065\113\177\114" +
    "\204\115\230\116\175\117\227\120\055\121\063\122\176" +
    "\001\002\000\004\112\u0177\001\002\000\004\101\uff05\001" +
    "\002\000\056\006\224\007\071\014\047\015\050\016\056" +
    "\035\213\036\210\040\205\044\221\045\201\052\207\077" +
    "\225\105\216\107\065\113\177\114\204\115\230\116\175" +
    "\117\227\120\055\121\063\122\176\001\002\000\006\063" +
    "\u0181\064\u017f\001\002\000\004\103\ufeff\001\002\000\060" +
    "\035\235\036\254\037\233\040\252\041\236\042\234\043" +
    "\240\044\260\045\256\046\243\047\246\050\250\051\232" +
    "\063\uff8d\064\uff8d\067\244\070\237\071\251\072\242\073" +
    "\247\076\245\077\u017d\100\333\001\002\000\004\103\uff02" +
    "\001\002\000\056\006\224\007\071\014\047\015\050\016" +
    "\056\035\213\036\210\040\205\044\221\045\201\052\207" +
    "\077\225\105\216\107\065\113\177\114\204\115\230\116" +
    "\175\117\227\120\055\121\063\122\176\001\002\000\052" +
    "\035\235\036\254\037\233\040\252\041\236\042\234\043" +
    "\240\044\260\045\256\046\243\047\246\050\250\051\232" +
    "\067\244\070\237\071\251\072\242\073\247\076\245\103" +
    "\uff00\001\002\000\056\006\ufefb\007\ufefb\014\ufefb\015\ufefb" +
    "\016\ufefb\035\ufefb\036\ufefb\040\ufefb\044\ufefb\045\ufefb\052" +
    "\ufefb\077\ufefb\105\ufefb\107\ufefb\113\ufefb\114\ufefb\115\ufefb" +
    "\116\ufefb\117\ufefb\120\ufefb\121\ufefb\122\ufefb\001\002\000" +
    "\056\006\ufefd\007\ufefd\014\ufefd\015\ufefd\016\ufefd\035\ufefd" +
    "\036\ufefd\040\ufefd\044\ufefd\045\ufefd\052\ufefd\077\ufefd\105" +
    "\ufefd\107\ufefd\113\ufefd\114\ufefd\115\ufefd\116\ufefd\117\ufefd" +
    "\120\ufefd\121\ufefd\122\ufefd\001\002\000\056\006\ufefc\007" +
    "\ufefc\014\ufefc\015\ufefc\016\ufefc\035\ufefc\036\ufefc\040\ufefc" +
    "\044\ufefc\045\ufefc\052\ufefc\077\ufefc\105\ufefc\107\ufefc\113" +
    "\ufefc\114\ufefc\115\ufefc\116\ufefc\117\ufefc\120\ufefc\121\ufefc" +
    "\122\ufefc\001\002\000\052\035\235\036\254\037\233\040" +
    "\252\041\236\042\234\043\240\044\260\045\256\046\243" +
    "\047\246\050\250\051\232\067\244\070\237\071\251\072" +
    "\242\073\247\076\245\103\ufefe\001\002\000\124\004\316" +
    "\005\uff32\006\224\007\071\010\305\011\uff32\012\273\013" +
    "\271\014\047\015\050\016\056\020\302\022\312\023\030" +
    "\024\307\025\324\027\023\030\323\031\313\033\315\034" +
    "\022\035\213\036\210\040\205\044\221\045\201\052\207" +
    "\077\225\101\uff47\105\216\107\065\111\265\112\uff32\113" +
    "\177\114\204\115\230\116\175\117\227\120\267\121\063" +
    "\122\317\001\002\000\010\005\u0174\011\u0175\112\uff03\001" +
    "\002\000\004\112\uff04\001\002\000\004\101\ufef7\001\002" +
    "\000\052\035\235\036\254\037\233\040\252\041\236\042" +
    "\234\043\240\044\260\045\256\046\243\047\246\050\250" +
    "\051\232\067\244\070\237\071\251\072\242\073\247\076" +
    "\245\101\uff0d\001\002\000\052\035\235\036\254\037\233" +
    "\040\252\041\236\042\234\043\240\044\260\045\256\046" +
    "\243\047\246\050\250\051\232\067\244\070\237\071\251" +
    "\072\242\073\247\076\245\101\ufef1\001\002\000\124\004" +
    "\316\005\uff32\006\224\007\071\010\305\011\uff32\012\273" +
    "\013\271\014\047\015\050\016\056\020\302\022\312\023" +
    "\030\024\307\025\324\027\023\030\323\031\313\033\315" +
    "\034\022\035\213\036\210\040\205\044\221\045\201\052" +
    "\207\077\225\101\uff47\105\216\107\065\111\265\112\uff32" +
    "\113\177\114\204\115\230\116\175\117\227\120\267\121" +
    "\063\122\317\001\002\000\010\005\uff33\011\uff33\112\uff33" +
    "\001\002\000\116\004\316\006\224\007\071\010\305\012" +
    "\273\013\271\014\047\015\050\016\056\020\302\022\312" +
    "\023\030\024\307\025\324\027\023\030\323\031\313\033" +
    "\315\034\022\035\213\036\210\040\205\044\221\045\201" +
    "\052\207\077\225\101\uff47\105\216\107\065\111\265\113" +
    "\177\114\204\115\230\116\175\117\227\120\267\121\063" +
    "\122\317\001\002\000\004\101\uff4b\001\002\000\030\063" +
    "\ufe99\100\ufe99\101\ufe99\102\ufe99\103\ufe99\105\ufe99\106\ufe99" +
    "\110\ufe99\111\ufe99\113\ufe99\122\ufe99\001\002\000\056\006" +
    "\224\007\071\014\047\015\050\016\056\035\213\036\210" +
    "\040\205\044\221\045\201\052\207\077\225\105\216\107" +
    "\065\113\177\114\204\115\230\116\175\117\227\120\055" +
    "\121\063\122\176\001\002\000\126\035\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\051\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c\123" +
    "\uff8c\001\002\000\054\035\235\036\254\037\233\040\252" +
    "\041\236\042\234\043\240\044\260\045\256\046\243\047" +
    "\246\050\250\051\232\067\244\070\237\071\251\072\242" +
    "\073\247\076\245\100\u0192\106\ufeb2\001\002\000\004\106" +
    "\u0193\001\002\000\004\106\ufeb3\001\002\000\126\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\103\uff8b\106\uff8b\107\uff8b\110\uff8b" +
    "\111\uff8b\123\uff8b\001\002\000\006\104\u0195\105\u0135\001" +
    "\002\000\004\105\u0196\001\002\000\030\006\064\007\071" +
    "\014\047\015\050\016\056\044\074\077\046\105\051\107" +
    "\065\120\055\121\063\001\002\000\052\035\235\036\254" +
    "\037\233\040\252\041\236\042\234\043\240\044\260\045" +
    "\256\046\243\047\246\050\250\051\232\067\244\070\237" +
    "\071\251\072\242\073\247\076\245\106\u0198\001\002\000" +
    "\126\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\106\uffb3\107" +
    "\uffb3\110\uffb3\111\uffb3\123\uffb3\001\002\000\030\006\064" +
    "\007\071\014\047\015\050\016\056\044\074\077\046\105" +
    "\051\107\065\120\055\121\063\001\002\000\030\063\ufec6" +
    "\100\ufec6\101\ufec6\102\ufec6\103\ufec6\105\ufec6\106\ufec6\110" +
    "\ufec6\111\ufec6\113\ufec6\122\ufec6\001\002\000\122\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\106\uffaf\110\uffaf\111\uffaf" +
    "\001\002\000\030\063\ufec2\100\ufec2\101\ufec2\102\ufec2\103" +
    "\ufec2\105\ufec2\106\ufec2\110\ufec2\111\ufec2\113\ufec2\122\ufec2" +
    "\001\002\000\030\006\ufe94\007\ufe94\014\ufe94\015\ufe94\016" +
    "\ufe94\044\ufe94\077\ufe94\105\ufe94\107\ufe94\120\ufe94\121\ufe94" +
    "\001\002\000\056\006\224\007\071\014\047\015\050\016" +
    "\056\035\213\036\210\040\205\044\221\045\201\052\207" +
    "\077\225\105\216\107\065\113\177\114\204\115\230\116" +
    "\175\117\227\120\055\121\063\122\176\001\002\000\004" +
    "\101\uff7b\001\002\000\004\106\u01a1\001\002\000\030\063" +
    "\ufed4\100\ufed4\101\ufed4\102\ufed4\103\ufed4\105\ufed4\106\ufed4" +
    "\110\ufed4\111\ufed4\113\ufed4\122\ufed4\001\002\000\012\044" +
    "\ufeea\112\ufeea\120\ufeea\121\ufeea\001\002\000\012\044\u01a6" +
    "\112\u01aa\120\u01a7\121\u01a8\001\002\000\006\101\ufee6\113" +
    "\ufee6\001\002\000\006\101\ufee1\113\u01b7\001\002\000\006" +
    "\120\055\121\063\001\002\000\040\006\ufed9\007\ufed9\014" +
    "\ufed9\015\ufed9\016\ufed9\044\ufed9\077\ufed9\100\374\101\ufee3" +
    "\104\u01b1\105\ufed9\107\ufed9\113\ufee3\120\ufed9\121\ufed9\001" +
    "\002\000\032\006\ufed9\007\ufed9\014\ufed9\015\ufed9\016\ufed9" +
    "\044\ufed9\077\ufed9\100\374\105\ufed9\107\ufed9\120\ufed9\121" +
    "\ufed9\001\002\000\004\101\u01ab\001\002\000\030\063\ufeec" +
    "\100\ufeec\101\ufeec\102\ufeec\103\ufeec\105\ufeec\106\ufeec\110" +
    "\ufeec\111\ufeec\113\ufeec\122\ufeec\001\002\000\012\044\ufeeb" +
    "\112\ufeeb\120\ufeeb\121\ufeeb\001\002\000\030\006\064\007" +
    "\071\014\047\015\050\016\056\044\074\077\046\105\051" +
    "\107\065\120\055\121\063\001\002\000\006\101\ufee7\113" +
    "\ufee7\001\002\000\006\101\ufee2\113\ufee2\001\002\000\030" +
    "\006\064\007\071\014\047\015\050\016\056\044\074\077" +
    "\046\105\051\107\065\120\055\121\063\001\002\000\006" +
    "\101\ufee8\113\ufee8\001\002\000\004\120\u01b2\001\002\000" +
    "\006\101\ufee4\113\ufee4\001\002\000\006\101\ufee5\113\ufee5" +
    "\001\002\000\006\101\ufede\113\ufede\001\002\000\004\101" +
    "\ufee9\001\002\000\004\101\ufee0\001\002\000\004\101\ufedf" +
    "\001\002\000\030\006\064\007\071\014\047\015\050\016" +
    "\056\044\074\077\046\105\051\107\065\120\055\121\063" +
    "\001\002\000\004\110\u01bb\001\002\000\004\110\ufe97\001" +
    "\002\000\030\006\064\007\071\014\047\015\050\016\056" +
    "\044\074\077\046\105\051\107\065\120\055\121\063\001" +
    "\002\000\030\063\ufe98\100\ufe98\101\ufe98\102\ufe98\103\ufe98" +
    "\105\ufe98\106\ufe98\110\ufe98\111\ufe98\113\ufe98\122\ufe98\001" +
    "\002\000\014\002\uff65\006\015\023\030\027\023\034\022" +
    "\001\002\000\004\002\uff66\001\002\000\004\101\uff58\001" +
    "\002\000\006\106\uff55\120\uff55\001\002\000\004\101\uff59" +
    "\001\002\000\032\006\ufeef\007\ufeef\014\ufeef\015\ufeef\016" +
    "\ufeef\044\ufeef\063\u01c4\077\ufeef\105\ufeef\107\ufeef\120\ufeef" +
    "\121\ufeef\001\002\000\030\006\064\007\071\014\047\015" +
    "\050\016\056\044\074\077\046\105\051\107\065\120\055" +
    "\121\063\001\002\000\030\006\ufef0\007\ufef0\014\ufef0\015" +
    "\ufef0\016\ufef0\044\ufef0\077\ufef0\105\ufef0\107\ufef0\120\ufef0" +
    "\121\ufef0\001\002\000\004\101\uff54\001\002\000\006\106" +
    "\u01c8\120\u01c2\001\002\000\004\101\u01c9\001\002\000\004" +
    "\101\uff57\001\002\000\006\106\uff56\120\uff56\001\002\000" +
    "\032\006\064\007\071\014\047\015\050\016\056\044\074" +
    "\063\u01d4\077\046\105\051\107\065\120\055\121\063\001" +
    "\002\000\004\101\uff53\001\002\000\006\106\uff4f\120\uff4f" +
    "\001\002\000\004\101\uff52\001\002\000\006\106\u01d0\120" +
    "\035\001\002\000\004\101\u01d1\001\002\000\004\101\uff51" +
    "\001\002\000\006\106\uff50\120\uff50\001\002\000\004\101" +
    "\uff4e\001\002\000\006\063\u01d7\101\ufeed\001\002\000\056" +
    "\006\224\007\071\014\047\015\050\016\056\035\213\036" +
    "\210\040\205\044\221\045\201\052\207\077\225\105\216" +
    "\107\065\113\177\114\204\115\230\116\175\117\227\120" +
    "\055\121\063\122\176\001\002\000\004\101\uff4c\001\002" +
    "\000\004\101\uff4d\001\002\000\056\006\224\007\071\014" +
    "\047\015\050\016\056\035\213\036\210\040\205\044\221" +
    "\045\201\052\207\077\225\105\216\107\065\113\177\114" +
    "\204\115\230\116\175\117\227\120\055\121\063\122\176" +
    "\001\002\000\004\101\ufeee\001\002\000\004\120\u01df\001" +
    "\002\000\004\105\uff61\001\002\000\004\105\115\001\002" +
    "\000\006\101\uff5e\111\265\001\002\000\004\101\uff60\001" +
    "\002\000\004\101\uff5f\001\002\000\004\105\115\001\002" +
    "\000\006\101\uff5e\111\265\001\002\000\004\101\uff5d\001" +
    "\002\000\016\002\uffc2\006\uffc2\023\uffc2\027\uffc2\032\012" +
    "\034\uffc2\001\002\000\014\002\uffc3\006\uffc3\023\uffc3\027" +
    "\uffc3\034\uffc3\001\002\000\004\101\uffc1\001\002\000\004" +
    "\113\u01ef\001\002\000\004\101\uffc0\001\002\000\012\104" +
    "\u01e9\106\uffbd\113\uffb9\120\u01e8\001\002\000\004\113\uffba" +
    "\001\002\000\004\113\uffbb\001\002\000\004\101\u01ed\001" +
    "\002\000\004\106\u01ec\001\002\000\004\101\uffbf\001\002" +
    "\000\012\104\u01e9\106\uffbd\113\uffb9\120\u01e8\001\002\000" +
    "\004\106\uffbe\001\002\000\004\101\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ed\000\006\142\005\143\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\144\012\145\013\001\001\000" +
    "\010\146\u01e3\147\u01e5\151\u01e4\001\001\000\002\001\001" +
    "\000\022\152\017\153\023\154\024\155\025\157\016\176" +
    "\026\222\015\230\020\001\001\000\004\035\u01d8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\205\u01c9\231\u01ca\234\u01cc\001\001" +
    "\000\006\223\u01c0\225\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\177\032\202\030\205\031\001\001\000\002\001\001\000" +
    "\036\002\052\012\060\013\057\015\061\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\201" +
    "\075\207\051\001\001\000\002\001\001\000\004\200\041" +
    "\001\001\000\004\313\035\001\001\000\004\204\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\177\042\205\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\052\012\u019f\013" +
    "\057\015\061\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\u019b\035\111\001\001\000\056\002\052\013\202\015" +
    "\201\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\031\211\032\067\072\072\076\210\100\213\103\205\110" +
    "\225\112\214\113\216\116\222\120\217\160\230\162\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\052" +
    "\012\101\013\057\015\061\020\100\021\065\023\071\024" +
    "\066\025\056\026\074\030\053\032\067\072\072\001\001" +
    "\000\034\002\052\012\076\013\057\015\061\021\065\022" +
    "\077\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\103\001\001\000\004\047\105\001" +
    "\001\000\012\033\110\035\111\050\113\051\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\052\013\155\015\156\021\065" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\034" +
    "\153\072\072\073\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\052\013\122\014\120\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\036\125" +
    "\037\131\043\130\064\126\072\072\175\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\052\012\151" +
    "\013\057\015\061\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\001\001\000\004\040\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\052\012\140\013\057\015\061\021\065" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\044" +
    "\137\072\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\052\012\132\013\057\015\061\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\134\001\001\000\036\002\052\013\122\014\120\021\065" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\037" +
    "\135\043\130\072\072\175\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\147\001\001\000\004\175\145\001\001\000\032" +
    "\002\052\012\143\013\057\015\061\021\065\023\071\024" +
    "\066\025\056\026\074\030\053\032\067\072\072\001\001" +
    "\000\004\040\144\001\001\000\002\001\001\000\034\002" +
    "\052\012\140\013\057\015\061\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\044\146\072\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\052\013\163\021\065\023\071\024" +
    "\066\025\056\026\074\030\053\032\067\072\072\074\162" +
    "\175\164\001\001\000\032\002\052\012\172\013\057\015" +
    "\061\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\167\075\165\001\001\000\002\001\001" +
    "\000\004\175\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\052\013\202\015\362\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\120\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\002\052\013" +
    "\202\015\201\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\076\210\100\213\103\205\112" +
    "\u019a\113\216\116\222\120\217\160\230\162\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\002\052\013\202\015\201\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\076\210\100\213\103\205\110\u0196\112\214\113\216\116" +
    "\222\120\217\160\230\162\177\001\001\000\010\127\u0131" +
    "\130\u0133\136\u0132\001\001\000\004\117\u018e\001\001\000" +
    "\034\002\052\012\076\013\057\015\061\021\065\022\077" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\072" +
    "\072\001\001\000\034\002\052\012\101\013\057\015\061" +
    "\020\u018c\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\001\001\000\002\001\001\000\006" +
    "\033\262\035\111\001\001\000\002\001\001\000\012\104" +
    "\240\105\254\106\256\107\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\260\112\214\113\216\116\222\120\217\160" +
    "\230\162\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\104\240\105\254\106\256\107\252\001\001\000\002" +
    "\001\001\000\004\244\263\001\001\000\002\001\001\000" +
    "\130\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\213\103\205\110\324\111\310\112\214\113\216\116\222" +
    "\120\217\152\305\160\230\162\177\176\026\210\267\211" +
    "\317\213\265\216\321\222\015\230\020\235\273\236\307" +
    "\237\275\240\276\241\274\242\320\243\325\244\277\245" +
    "\300\246\303\255\302\263\313\272\271\001\001\000\002" +
    "\001\001\000\004\016\u0100\001\001\000\002\001\001\000" +
    "\054\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\213\103\205\110\u0187\112\214\113\216\116\222\120\217" +
    "\160\230\162\177\001\001\000\002\001\001\000\054\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\213\103" +
    "\205\110\u0186\112\214\113\216\116\222\120\217\160\230" +
    "\162\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\u0185\175\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\217\u011c\001" +
    "\001\000\066\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\213\103\205\110\324\111\310\112\214\113\216" +
    "\116\222\120\217\160\230\162\177\213\u0126\216\321\262" +
    "\u0127\273\u0125\001\001\000\072\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\213\103\205\110\u010c\111\u0106" +
    "\112\214\113\216\116\222\120\217\160\230\162\177\213" +
    "\u010a\216\321\264\u0108\265\u0107\266\u010b\270\u0109\001\001" +
    "\000\002\001\001\000\060\002\052\013\202\015\201\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\076\210\100\213\103\205\110\372\111\u0104\112" +
    "\214\113\216\116\222\120\217\160\230\162\177\206\u0105" +
    "\001\001\000\006\055\u0103\175\357\001\001\000\040\002" +
    "\052\005\367\013\202\015\362\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\120\363\175" +
    "\364\214\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\356\175\357\001\001\000" +
    "\004\257\344\001\001\000\016\104\240\105\254\106\256" +
    "\107\252\215\331\310\335\001\001\000\002\001\001\000" +
    "\054\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\213\103\205\110\342\112\214\113\216\116\222\120\217" +
    "\160\230\162\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\213\103\205\110\337\112\214" +
    "\113\216\116\222\120\217\160\230\162\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\104\240\105\254\106\256\107\252\310" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\104\240\105\254\106\256\107\252\001\001\000\062\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\213\103" +
    "\205\110\324\111\310\112\214\113\216\116\222\120\217" +
    "\160\230\162\177\213\354\216\321\001\001\000\054\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\213\103" +
    "\205\110\345\112\214\113\216\116\222\120\217\160\230" +
    "\162\177\001\001\000\014\104\240\105\254\106\256\107" +
    "\252\244\346\001\001\000\004\260\350\001\001\000\010" +
    "\244\351\255\353\261\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\372\111\371\112\214\113\216\116\222\120" +
    "\217\160\230\162\177\001\001\000\002\001\001\000\014" +
    "\104\240\105\254\106\256\107\252\310\335\001\001\000" +
    "\004\175\375\001\001\000\002\001\001\000\004\063\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\217\u011c\271" +
    "\u0120\001\001\000\002\001\001\000\004\244\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\104\240\105\254\106\256\107\252\215\331\310\335" +
    "\001\001\000\056\002\052\013\202\015\201\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\076\210\100\213\103\205\110\u010f\112\214\113\216\116" +
    "\222\120\217\131\u010e\160\230\162\177\001\001\000\002" +
    "\001\001\000\012\104\240\105\254\106\256\107\252\001" +
    "\001\000\062\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\213\103\205\110\324\111\310\112\214\113\216" +
    "\116\222\120\217\160\230\162\177\213\u0111\216\321\001" +
    "\001\000\002\001\001\000\054\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\213\103\205\110\u0113\112\214" +
    "\113\216\116\222\120\217\160\230\162\177\001\001\000" +
    "\012\104\240\105\254\106\256\107\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\315\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\052\013\202\015\201\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\076\210\100\213\103\205\110\372\111\u0123\112" +
    "\214\113\216\116\222\120\217\160\230\162\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\002\052\013\202\015\201\021\065" +
    "\023\071\024\066\025\056\026\074\030\053\032\067\072" +
    "\072\076\210\100\213\103\205\110\u010f\112\214\113\216" +
    "\116\222\120\217\131\u0129\160\230\162\177\175\u012b\274" +
    "\u012d\300\u012a\302\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\002" +
    "\052\013\202\015\201\021\065\023\071\024\066\025\056" +
    "\026\074\030\053\032\067\072\072\076\210\100\213\113" +
    "\u012e\116\222\120\217\160\230\162\177\001\001\000\002" +
    "\001\001\000\010\127\u0131\130\u0133\136\u0132\001\001\000" +
    "\056\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\213\103\205\110\u0148\112\214\113\216\116\222\120\217" +
    "\134\u0146\160\230\162\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\002\052\013\u013b\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\372\111\u013c\112\214\113\216\116\222\120" +
    "\217\137\u013e\140\u013d\160\230\162\177\001\001\000\002" +
    "\001\001\000\032\002\052\012\u0137\013\057\015\061\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\141\u0144\001\001" +
    "\000\002\001\001\000\004\056\u0140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\052\013\202\015\201\021" +
    "\065\023\071\024\066\025\056\026\074\030\053\032\067" +
    "\072\072\076\210\100\213\103\205\110\372\111\u0145\112" +
    "\214\113\216\116\222\120\217\160\230\162\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\002\052\013\202\015\201\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\076\210\100" +
    "\213\103\205\110\u014f\112\214\113\216\116\222\120\217" +
    "\160\230\162\177\001\001\000\014\104\240\105\254\106" +
    "\256\107\252\133\u014b\001\001\000\056\002\052\013\202" +
    "\015\201\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\076\210\100\213\103\205\110\u010f" +
    "\112\214\113\216\116\222\120\217\131\u014c\160\230\162" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\104" +
    "\240\105\254\106\256\107\252\135\u0152\001\001\000\054" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\u0153\112\214\113\216\116\222\120\217\160" +
    "\230\162\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\104\240\105\254\106\256\107\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\301\u0158\303\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\052\012\u015f\013\057\015\061\021\065\023\071\024\066" +
    "\025\056\026\074\030\053\032\067\072\072\305\u015e\001" +
    "\001\000\002\001\001\000\130\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\213\103\205\110\324\111\310" +
    "\112\214\113\216\116\222\120\217\152\305\160\230\162" +
    "\177\176\026\210\267\211\u015c\213\265\216\321\222\015" +
    "\230\020\235\273\236\307\237\275\240\276\241\274\242" +
    "\320\243\325\244\277\245\300\246\303\255\302\263\313" +
    "\272\271\001\001\000\006\301\u015d\303\u015a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\304\u0161\001\001" +
    "\000\032\002\052\012\u0162\013\057\015\061\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\001\001\000\002\001\001\000\004\304\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\276\u0167\277\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\213\103\205\110\372\111\u016a\112\214\113\216" +
    "\116\222\120\217\160\230\162\177\001\001\000\002\001" +
    "\001\000\130\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\213\103\205\110\324\111\310\112\214\113\216" +
    "\116\222\120\217\152\305\160\230\162\177\176\026\210" +
    "\267\211\u016c\213\265\216\321\222\015\230\020\235\273" +
    "\236\307\237\275\240\276\241\274\242\320\243\325\244" +
    "\277\245\300\246\303\255\302\263\313\272\271\001\001" +
    "\000\006\276\u016d\277\u0168\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\247\u0175\250\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\213\103\205\110\u017a\111\u0178\112\214\113\216" +
    "\116\222\120\217\160\230\162\177\251\u017b\252\u0179\253" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\u0181\112\214\113\216\116\222\120\217\160" +
    "\230\162\177\001\001\000\004\254\u017f\001\001\000\002" +
    "\001\001\000\014\104\240\105\254\106\256\107\252\310" +
    "\335\001\001\000\002\001\001\000\054\002\052\013\202" +
    "\015\201\021\065\023\071\024\066\025\056\026\074\030" +
    "\053\032\067\072\072\076\210\100\213\103\205\110\u017d" +
    "\112\214\113\216\116\222\120\217\160\230\162\177\001" +
    "\001\000\012\104\240\105\254\106\256\107\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\104\240\105\254\106\256\107\252\001\001\000\130" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\324\111\310\112\214\113\216\116\222\120" +
    "\217\152\305\160\230\162\177\176\026\210\267\211\u0183" +
    "\213\265\216\321\222\015\230\020\235\273\236\307\237" +
    "\275\240\276\241\274\242\320\243\325\244\277\245\300" +
    "\246\303\255\302\263\313\272\271\001\001\000\006\247" +
    "\u0184\250\u0172\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\104\240\105\254\106\256\107\252\001\001\000" +
    "\012\104\240\105\254\106\256\107\252\001\001\000\130" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\324\111\310\112\214\113\216\116\222\120" +
    "\217\152\305\160\230\162\177\176\026\210\267\211\u0189" +
    "\213\265\216\321\222\015\230\020\235\273\236\307\237" +
    "\275\240\276\241\274\242\320\243\325\244\277\245\300" +
    "\246\303\255\302\263\313\272\271\001\001\000\002\001" +
    "\001\000\126\002\052\013\202\015\201\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\076" +
    "\210\100\213\103\205\110\324\111\310\112\214\113\216" +
    "\116\222\120\217\152\305\160\230\162\177\176\026\210" +
    "\u018b\213\265\216\321\222\015\230\020\235\273\236\307" +
    "\237\275\240\276\241\274\242\320\243\325\244\277\245" +
    "\300\246\303\255\302\263\313\272\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\002\052\013\202\015" +
    "\201\021\065\023\071\024\066\025\056\026\074\030\053" +
    "\032\067\072\072\076\210\100\213\103\205\110\u018f\112" +
    "\214\113\216\116\222\120\217\160\230\162\177\001\001" +
    "\000\002\001\001\000\014\053\u0190\104\240\105\254\106" +
    "\256\107\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\052\012\u0137\013\057\015\061\021\065\023\071" +
    "\024\066\025\056\026\074\030\053\032\067\072\072\001" +
    "\001\000\012\104\240\105\254\106\256\107\252\001\001" +
    "\000\002\001\001\000\034\002\052\012\101\013\057\015" +
    "\061\020\u0199\021\065\023\071\024\066\025\056\026\074" +
    "\030\053\032\067\072\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\002\052\013\202\015\201\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\076\210\100\213" +
    "\103\205\110\372\111\u019e\112\214\113\216\116\222\120" +
    "\217\160\230\162\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u01a2\001\001\000" +
    "\010\003\u01a8\010\u01a3\057\u01a4\001\001\000\002\001\001" +
    "\000\006\006\u01b5\060\u01b4\001\001\000\004\015\u01b3\001" +
    "\001\000\006\061\u01af\063\u01ae\001\001\000\006\062\u01ac" +
    "\063\u01ab\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\052\012\u01ad\013\057\015\061" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\052\012\u01b2\013\057\015\061\021\065\023" +
    "\071\024\066\025\056\026\074\030\053\032\067\072\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\052\012" +
    "\u01b9\013\057\015\061\021\065\023\071\024\066\025\056" +
    "\026\074\027\u01b8\030\053\032\067\072\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\052\012\101" +
    "\013\057\015\061\020\u01bb\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\001\001\000\002" +
    "\001\001\000\022\152\017\153\023\154\u01bd\155\025\157" +
    "\016\176\026\222\015\230\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\224\u01c5\001\001\000\002\001" +
    "\001\000\004\226\u01c2\001\001\000\032\002\052\012\u01c4" +
    "\013\057\015\061\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\225\u01c6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\052" +
    "\012\u01d2\013\057\015\061\021\065\023\071\024\066\025" +
    "\056\026\074\030\053\032\067\072\072\233\u01d1\001\001" +
    "\000\002\001\001\000\004\232\u01cd\001\001\000\002\001" +
    "\001\000\006\205\u01c9\234\u01ce\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\227\u01d5\001\001\000\056\002\052\013\202\015\201" +
    "\021\065\023\071\024\066\025\056\026\074\030\053\032" +
    "\067\072\072\076\210\100\213\103\205\110\372\111\u01d4" +
    "\112\214\113\216\116\222\120\217\160\230\162\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\002\052" +
    "\013\202\015\201\021\065\023\071\024\066\025\056\026" +
    "\074\030\053\032\067\072\072\076\210\100\213\103\205" +
    "\110\372\111\u01d7\112\214\113\216\116\222\120\217\160" +
    "\230\162\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\314\u01da\001\001\000\006\033\u01db\035\111\001" +
    "\001\000\006\156\u01dc\244\u01dd\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u01df\035\111\001\001\000" +
    "\006\156\u01e0\244\u01dd\001\001\000\002\001\001\000\006" +
    "\144\012\145\u01e2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\147\u01e9" +
    "\150\u01ea\151\u01e4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\147\u01e9\150\u01ed\151\u01e4\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Syntax error: ");

        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            if(s.value != null) m.append( s.value.toString() );
            m.append( " - Line: " + s.getLeft().getLine() + " - Column: " + s.getLeft().getColumn() );
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("Error - " + message);
        System.exit(-1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Identifier ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;
		int bidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bid; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BasicLitStar ::= BasicLit BasicLitStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",197, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BasicLitStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLitStar",197, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BasicLit ::= INT_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression intLit = new Expression(Type.INT, i.toString());       RESULT = intLit;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BasicLit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression floatLit = new Expression(Type.FLOAT32, f.toString()); RESULT = floatLit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BasicLit ::= IMG_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BasicLit ::= RUNE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BasicLit ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression stringLit = new Expression(Type.STRING, s.toString()); RESULT = stringLit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BasicLit",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // UnaryOp ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plus;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // UnaryOp ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minus; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UnaryOp ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = not;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UnaryOp ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xor;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UnaryOp ::= MUL 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mul;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UnaryOp ::= ADDRESS 
            {
              Object RESULT =null;
		int addrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addr;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // UnaryOp ::= CHANNEL_OP 
            {
              Object RESULT =null;
		int copleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int copright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cop;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryOp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MulOp ::= MUL 
            {
              Object RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mul = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mul; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MulOp ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = div; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MulOp ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mod; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MulOp ::= LEFT_OP 
            {
              Object RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MulOp ::= RIGHT_OP 
            {
              Object RESULT =null;
		int ropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MulOp ::= ADDRESS 
            {
              Object RESULT =null;
		int addrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MulOp ::= AND_NOT_OP 
            {
              Object RESULT =null;
		int anopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object anop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = anop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MulOp",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AddOp ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = plus;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AddOp ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minus; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOp ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = or;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AddOp ::= XOR 
            {
              Object RESULT =null;
		int xorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xor;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOp",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= EQ_OP 
            {
              Object RESULT =null;
		int eqopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eqop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eqop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= NE_OP 
            {
              Object RESULT =null;
		int neopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int neopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object neop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = neop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lt;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= LTE 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = let;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = gt;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= GTE 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = gte;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BinOp ::= OR_OP 
            {
              Object RESULT =null;
		int oropleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oropright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = orop;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BinOp ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = and;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BinOp ::= RelOp 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = relop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BinOp ::= AddOp 
            {
              Object RESULT =null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object addop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = addop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BinOp ::= MulOp 
            {
              Object RESULT =null;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mulop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mulop; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CompositeLit ::= LiteralType LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompositeLit",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LiteralType ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LiteralType ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LiteralType ::= SQRD_L ELLIPSIS SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LiteralType ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LiteralType ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LiteralType ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LiteralValue ::= CURLY_L LiteralValueAux1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValue",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LiteralValueAux1 ::= ElementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValueAux1",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LiteralValueAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralValueAux1",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ElementList ::= KeyedElement ElementListAux1 OptComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ElementListAux1 ::= ElementListAux1 COMMA KeyedElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementListAux1",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ElementListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementListAux1",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // KeyedElement ::= KeyedElementAux1 KeyedElementAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElement",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // KeyedElementAux1 ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux1",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // KeyedElementAux1 ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux1",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // KeyedElementAux2 ::= KeyedElementAux3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux2",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // KeyedElementAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux2",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // KeyedElementAux3 ::= COLON Element 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyedElementAux3",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Element ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Element ::= LiteralValue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FunctionLit ::= FUNC Signature Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionLit",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SourceFile ::= PackageClause SEMICOLON ImportDeclStar TopLevelDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SourceFile",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ImportDeclStar ::= ImportDecl SEMICOLON ImportDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclStar",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ImportDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclStar",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ImportDecl ::= IMPORT ImportDeclAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDecl",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ImportDeclAux1 ::= ImportSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclAux1",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ImportDeclAux1 ::= PAR_L ImportSpecStar PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclAux1",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ImportSpecStar ::= ImportSpec SEMICOLON ImportSpecStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecStar",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ImportSpecStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecStar",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ImportSpec ::= ImportSpecAux1 STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpec",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ImportSpecAux1 ::= DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ImportSpecAux1 ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ImportSpecAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportSpecAux1",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PackageClause ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PackageClause",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperandStar ::= OperandStar Operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",199, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperandStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperandStar",199, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operand ::= Literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operand ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Expression expTn = new Expression(Type.UNKNOWN, tn.toString(), tn.toString()); RESULT = expTn;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operand ::= PAR_L Expression PAR_R 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operand",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Literal ::= BasicLit 
            {
              Object RESULT =null;
		int blitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = blit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Literal ::= FunctionLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UnaryExpr ::= PrimaryExpr 
            {
              Object RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // UnaryExpr ::= UnaryOp UnaryExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrimaryExpr ::= Operand 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrimaryExpr ::= Conversion 
            {
              Object RESULT =null;
		 RESULT = "";   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PrimaryExpr ::= PrimaryExpr PrimaryExprOtherOptions 
            {
              Object RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = pexp;  Semantic.getInstance().FunctionCheckParameters((Expression)pexp);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= UnaryExpr 
            {
              Object RESULT =null;
		int uexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object uexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = uexp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= Expression BinOp Expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Semantic.getInstance().calculateExpr((Expression) e1, bop.toString(), (Expression) e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PrimaryExprOtherOptions ::= IndexAndSlice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PrimaryExprOtherOptions ::= Arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PrimaryExprOtherOptions ::= HASH DOT PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimaryExprOtherOptions",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Arguments ::= HASH PAR_L ExpTypeEtc PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arguments",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpTypeEtc ::= OptExpType OptEllipsisComma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTypeEtc",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpTypeEtc ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpTypeEtc",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OptExpType ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpType",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OptExpType ::= TypeLit OptCommaExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpType",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OptCommaExp ::= COMMA ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptCommaExp",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptCommaExp",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IndexAndSlice ::= SQRD_L Expression PossibleClose 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IndexAndSlice",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IndexAndSlice ::= SQRD_L PossibleClose2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IndexAndSlice",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PossibleClose ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PossibleClose ::= COLON OptExpression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PossibleClose2 ::= COLON SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose2",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PossibleClose2 ::= COLON Expression PossibleClose3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose2",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PossibleClose3 ::= COLON Expression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose3",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PossibleClose3 ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PossibleClose3",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptEllipsisComma ::= ELLIPSIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptEllipsisComma ::= ELLIPSIS COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OptEllipsisComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptEllipsisComma",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptExpression ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptExpression2 ::= SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression2",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptExpression2 ::= COLON OptExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptExpression2",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Index ::= SQRD_L Expression SQRD_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpressionList ::= Expression ExpressionStar 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addExpression((Expression) exp); RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpressionStar ::= COMMA Expression ExpressionStar 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addExpression((Expression) exp); RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",198, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExpressionStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStar",198, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Conversion ::= TypeConv NextConversion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conversion",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NextConversion ::= PAR_L Expression OptComma PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NextConversion",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TypeConv ::= TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TypeConv ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TypeConv ::= INTERROGATION TypeConv INTERROGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeConv",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OptDotIDENTIFIER ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptDotIDENTIFIER",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OptDotIDENTIFIER ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptDotIDENTIFIER",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ConstDecl ::= CONST AuxConstDecl1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AuxConstDecl1 ::= ConstSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AuxConstDecl1 ::= PAR_L AuxConstSpec PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstDecl1",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ConstSpec ::= IdentifierListStar2 AuxConstSpec2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstSpec",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AuxConstSpec ::= AuxConstSpec ConstSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AuxConstSpec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AuxCommaExp ::= AuxCommaExp COMMA Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AuxCommaExp ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxCommaExp",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OptType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OptType ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AuxConstSpec2 ::= OptType ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AuxConstSpec2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxConstSpec2",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IdentifierListStarAux ::= IdentifierListStarAux COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().addVarName(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IdentifierListStarAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStarAux",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().addVarName(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",201, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IdentifierListStar2 ::= IDENTIFIER NT$0 IdentifierListStarAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListStar2",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Statement ::= LabeledStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Statement ::= SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Statement ::= GoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Statement ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Statement ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Statement ::= ContinueStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Statement ::= GotoStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Statement ::= FallthroughStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Statement ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Statement ::= SelectStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Statement ::= SwitchStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Statement ::= DeferStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Statement ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TopLevelDeclStar ::= TopLevelDecl SEMICOLON TopLevelDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclStar",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TopLevelDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclStar",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TopLevelDecl ::= Declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TopLevelDecl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TopLevelDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TopLevelDecl",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().createNewFunction(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",202, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FunctionDecl ::= FUNC IDENTIFIER NT$1 Signature FunctionBodyOpt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Semantic.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FunctionBodyOpt ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyOpt",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FunctionBodyOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyOpt",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // MethodDecl ::= FUNC Parameters IDENTIFIER Signature FunctionBodyOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Declaration ::= TypeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Declaration ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TypeDecl ::= TYPE TypeDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDecl",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TypeDeclAux ::= TypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TypeDeclAux ::= PAR_L TypeSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDeclAux",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TypeSpecAux ::= TypeSpecAux TypeSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TypeSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpecAux",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TypeSpec ::= IDENTIFIER OptAssign Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSpec",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // VarDecl ::= VAR VarDeclAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VarDeclAux ::= VarSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // VarDeclAux ::= PAR_L VarSpecAux PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclAux",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VarSpecAux ::= VarSpecAux VarSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VarSpecAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // VarSpec ::= IdentifierListStar2 VarSpecAux2 
            {
              Object RESULT =null;
		 Semantic.getInstance().printVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpec",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VarSpecAux2 ::= Type OptAssignExpList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int optAssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int optAssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object optAss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().initializeVars(type, optAss.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VarSpecAux2 ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarSpecAux2",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LabeledStmt ::= IDENTIFIER COLON Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LabeledStmt",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SimpleStmt ::= Expression AuxExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SimpleStmt ::= Assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SimpleStmt ::= INTERROGATION ShortVarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SimpleStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmt",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // AuxExpression ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // AuxExpression ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // AuxExpression ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AuxExpression ::= PLUS PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AuxExpression ::= MINUS MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AuxExpression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxExpression",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$2 ::= 
            {
              Object RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Semantic.getInstance().transferExpBuffer();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",203, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Assignment ::= ExpressionList AssignOp NT$2 ExpressionList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().updateVars(ass.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AssignOp ::= MUL_ASSIGN 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ma;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // AssignOp ::= ADD_ASSIGN 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aa;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // AssignOp ::= XOR_ASSIGN 
            {
              Object RESULT =null;
		int xaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object xa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xa;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // AssignOp ::= DIV_ASSIGN 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = da;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // AssignOp ::= LEFT_ASSIGN 
            {
              Object RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = la;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AssignOp ::= RIGHT_ASSIGN 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ra;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AssignOp ::= AND_NOT_ASSIGN 
            {
              Object RESULT =null;
		int analeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ana = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ana;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AssignOp ::= MINUS_ASSIGN 
            {
              Object RESULT =null;
		int minusaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minusa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = minusa; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AssignOp ::= ADDRESS_ASSIGN 
            {
              Object RESULT =null;
		int addaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object adda = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = adda;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // AssignOp ::= ASSIGN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignOp",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ShortVarDecl ::= IdentifierList CHANNEL_ASSIGN ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ShortVarDecl",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // StatementList ::= Statement SEMICOLON StatementList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Block ::= CURLY_L StatementList CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ForStmt ::= FOR ForStmtAux Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ForStmtAux ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ForStmtAux ::= ForClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ForStmtAux ::= RangeClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ForStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmtAux",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ForClause ::= SimpleStmt SEMICOLON OptExpression SEMICOLON SimpleStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForClause",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SimplesStmtStarAux ::= CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SimplesStmtStarAux ::= INC_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SimplesStmtStarAux ::= SUB_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SimplesStmtStarAux ::= AuxCommaExp AssignOp ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimplesStmtStarAux",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // RangeClauseAux ::= ExpressionList RangeClauseAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // RangeClauseAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // RangeClauseAux2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux2",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // RangeClauseAux2 ::= CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClauseAux2",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // RangeClause ::= RangeClauseAux RANGE Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RangeClause",180, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SwitchStmt ::= SWITCH SwitchStmtAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",184, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SwitchStmtAux ::= SimpleStmtSc SwitchStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SimpleStmtSc ::= SimpleStmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtSc",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SimpleStmtSc ::= HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtSc",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SwitchStmtAux2 ::= OptExpression CURLY_L ExprCaseClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux2",186, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SwitchStmtAux2 ::= TypeSwitchGuard CURLY_L TypeCaseClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmtAux2",186, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ExprCaseClause ::= ExprSwitchCase COLON StatementList ExprCaseClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprCaseClause",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ExprCaseClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprCaseClause",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TypeSwitchGuard ::= OptTypeSwitchGuard PrimaryExpr HASH DOT PAR_L TYPE PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchGuard",190, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OptTypeSwitchGuard ::= Identifier CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptTypeSwitchGuard",192, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // OptTypeSwitchGuard ::= HASH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptTypeSwitchGuard",192, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TypeCaseClause ::= TypeSwitchCase COLON StatementList TypeCaseClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeCaseClause",191, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TypeCaseClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeCaseClause",191, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TypeSwitchCase ::= CASE TypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchCase",193, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TypeSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeSwitchCase",193, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ExprSwitchCase ::= CASE ExpressionList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchCase",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ExprSwitchCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprSwitchCase",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TypeList ::= Type AuxTypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeList",195, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // AuxTypeList ::= COMMA Type AuxTypeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeList",194, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // AuxTypeList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeList",194, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // DeferStmt ::= DEFER Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeferStmt",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // IfStmt ::= IF SimpleStmtAux Expression Block IfStmtAux 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // SimpleStmtAux ::= HASH SimpleStmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",173, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // SimpleStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SimpleStmtAux",173, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // IfStmtAux ::= ELSE IfStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // IfStmtAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // IfStmtAux2 ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux2",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // IfStmtAux2 ::= Block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmtAux2",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // SelectStmt ::= SELECT CURLY_L CommClause CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SelectStmt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CommClause ::= CommCase COLON StatementList CommClause 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CommClause ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommClause",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CommCase ::= CASE StmtOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CommCase ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommCase",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // StmtOpt ::= Expression CHANNEL_OP Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // StmtOpt ::= RecvStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtOpt",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // RecvStmt ::= RecvStmtAux Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmt",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // RecvStmtAux ::= ExpressionList RecvStmtAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // RecvStmtAux2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux2",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // RecvStmtAux2 ::= CHANNEL_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RecvStmtAux2",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // OptIdentifier ::= Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // OptIdentifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptIdentifier",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FallthroughStmt ::= FALLTHROUGH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FallthroughStmt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // GotoStmt ::= GOTO OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GotoStmt",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ContinueStmt ::= CONTINUE OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ContinueStmt",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // BreakStmt ::= BREAK OptIdentifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BreakStmt",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ExpressionListStar ::= ExpressionList 
            {
              Object RESULT =null;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = epl;               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ExpressionListStar ::= 
            {
              Object RESULT =null;
		 RESULT = new Expression();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionListStar",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ReturnStmt ::= RETURN ExpressionListStar 
            {
              Object RESULT =null;
		int eplsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddReturnedExpression((Expression)epls);	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // GoStmt ::= GO Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GoStmt",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // OptAssign ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OptAssign ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssign",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // OptAssignExpList ::= ASSIGN ExpressionList 
            {
              Object RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object epl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "Assigment"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // OptAssignExpList ::= 
            {
              Object RESULT =null;
		 RESULT = "";          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptAssignExpList",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // StructType ::= STRUCT CURLY_L FieldDeclStar1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StructType",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FieldDeclStar1 ::= FieldDeclStar1 FieldDecl SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FieldDeclStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclStar1",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FieldDecl ::= AuxFieldDecl1 AuxFieldDecl2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDecl",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // AuxFieldDecl1 ::= IDENTIFIER AuxFieldDecl3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // AuxFieldDecl1 ::= BLANK_IDENTIFIER AuxFieldDecl4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // AuxFieldDecl1 ::= EmbeddedField1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // AuxFieldDecl3 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // AuxFieldDecl3 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // AuxFieldDecl3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // AuxFieldDecl4 ::= IdentifierStar1 Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // AuxFieldDecl2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // AuxFieldDecl2 ::= Tag 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxFieldDecl2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // Tag ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // EmbeddedField1 ::= MUL TypeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmbeddedField1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // OptMul ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // OptMul ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptMul",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // IdentifierList ::= Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // IdentifierStar1 ::= COMMA Identifier IdentifierStar1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // IdentifierStar1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TypeStar ::= Type TypeStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",196, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TypeStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeStar",196, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Type ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tn; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Type ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // Type ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TypeName ::= IDENTIFIER AuxTypeName1 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dotidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dotidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dotid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id.toString() + dotid.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TypeName ::= BLANK_IDENTIFIER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b;                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // AuxTypeName1 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "." + id.toString();              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // AuxTypeName1 ::= 
            {
              Object RESULT =null;
		 RESULT = "";                               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxTypeName1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TypeLit ::= ArrayType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TypeLit ::= PointerType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TypeLit ::= SliceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TypeLit ::= MapType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TypeLit ::= ChannelType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TypeLit ::= StructType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TypeLit ::= InterfaceType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TypeLit ::= FunctionType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeLit",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ArrayLength ::= Expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ArrayType ::= SQRD_L ArrayLength SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayType",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ElementType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // PointerType ::= MUL BaseType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PointerType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // BaseType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BaseType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // FunctionType ::= FUNC Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionType",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // Signature ::= Parameters AuxResult 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signature",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // AuxResult ::= Result 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // AuxResult ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // Result ::= HASH PAR_L AuxResult2 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // Result ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // Result ::= TypeName 
            {
              Object RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Type type = Type.convertToType(tn.toString()); Semantic.getInstance().FunctionAddReturnType(type); RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Result",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // AuxResult2 ::= Identifier AuxResult3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // AuxResult2 ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // AuxResult2 ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // AuxResult3 ::= IdentifierStar3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // AuxResult3 ::= DOT Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxResult3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // Parameters ::= PAR_L AuxParameters1 PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // AuxParameters1 ::= ParameterList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // AuxParameters1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxParameters1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // OptComma ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // OptComma ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptComma",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ParameterList ::= ParameterDecl 
            {
              Object RESULT =null;
		int pdeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pdecl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pdecl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterList",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TypeNoIdentifier ::= TypeLit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNoIdentifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TypeNoIdentifier ::= PAR_L Type PAR_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeNoIdentifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ParameterDecl ::= IdentifierListParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ParameterDecl ::= ELLIPSIS Type ParameterDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ParameterDecl ::= TypeNoIdentifier ParameterDeclStar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().FunctionInitializeParameters(type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDecl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ParameterDeclStar ::= COMMA ParameterDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ParameterDeclStar ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ParameterDeclStar ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclStar",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // IdentifierListParam ::= Identifier IdentifierStar2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddParameter(id.toString()); Semantic.getInstance().FunctionInitializeParameters((Type)t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierListParam",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // IdentifierStar2 ::= COMMA Identifier IdentifierStar2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Semantic.getInstance().FunctionAddParameter(id.toString()); Semantic.getInstance().FunctionInitializeParameters((Type)t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // IdentifierStar2 ::= ELLIPSIS Type ParameterDeclStar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // IdentifierStar2 ::= Type ParameterDeclStar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Type type = Type.convertToType(t.toString()); Semantic.getInstance().FunctionInitializeParameters(type); RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdentifierStar2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // FuncIdentifierList ::= Identifier FuncIdentifierListAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierList",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // FuncIdentifierListAux1 ::= FuncIdentifierListAux1 COMMA Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // FuncIdentifierListAux1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncIdentifierListAux1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // InterfaceType ::= INTERFACE CURLY_L AuxIntefaceType1 CURLY_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AuxIntefaceType1 ::= AuxIntefaceType1 MethodSpec SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AuxIntefaceType1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxIntefaceType1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // MethodSpec ::= IDENTIFIER MethodSpecAux1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // MethodSpecAux1 ::= Signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // MethodSpecAux1 ::= MethodSpecAux2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // MethodSpecAux2 ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // MethodSpecAux2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSpecAux2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // SliceType ::= SQRD_L SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SliceType",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // MapType ::= MAP SQRD_L KeyType SQRD_R ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapType",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // KeyType ::= Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("KeyType",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // ChannelType ::= AuxChannelType1 ElementType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ChannelType",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AuxChannelType1 ::= CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AuxChannelType1 ::= CHAN CHANNEL_OP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AuxChannelType1 ::= CHANNEL_OP CHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AuxChannelType1",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
